
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ae4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000070  20000068  00002b4c  00020068  2**2
                  ALLOC
  3 .stack        00001000  200000d8  00002bbc  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001f261  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e54  00000000  00000000  0003f34a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000474f  00000000  00000000  0004219e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003c8  00000000  00000000  000468ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004e8  00000000  00000000  00046cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018134  00000000  00000000  0004719d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009c04  00000000  00000000  0005f2d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00083411  00000000  00000000  00068ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000010c8  00000000  00000000  000ec2e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 10 00 20 41 12 00 00 3d 12 00 00 3d 12 00 00     ... A...=...=...
	...
      2c:	3d 12 00 00 00 00 00 00 00 00 00 00 3d 12 00 00     =...........=...
      3c:	3d 12 00 00 3d 12 00 00 3d 12 00 00 3d 12 00 00     =...=...=...=...
      4c:	3d 12 00 00 3d 12 00 00 3d 12 00 00 3d 12 00 00     =...=...=...=...
      5c:	3d 12 00 00 3d 12 00 00 3d 12 00 00 3d 12 00 00     =...=...=...=...
      6c:	3d 12 00 00 3d 12 00 00 00 00 00 00 00 00 00 00     =...=...........
      7c:	3d 12 00 00 3d 12 00 00 3d 12 00 00 3d 12 00 00     =...=...=...=...
      8c:	3d 12 00 00 3d 12 00 00 00 00 00 00 00 00 00 00     =...=...........
      9c:	3d 12 00 00 3d 12 00 00 3d 12 00 00 3d 12 00 00     =...=...=...=...
      ac:	3d 12 00 00 00 00 00 00                             =.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002ae4 	.word	0x00002ae4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002ae4 	.word	0x00002ae4
     10c:	00002ae4 	.word	0x00002ae4
     110:	00000000 	.word	0x00000000

00000114 <nvm_set_config>:
	}

	*((uint32_t *)NVMCTRL_AUX0_ADDRESS) = fusebits[0];
    *(((uint32_t *)NVMCTRL_AUX0_ADDRESS) + 1) = fusebits[1];

	error_code = nvm_execute_command(NVM_COMMAND_WRITE_AUX_ROW,NVMCTRL_AUX0_ADDRESS,0);
     114:	b510      	push	{r4, lr}
     116:	4a1e      	ldr	r2, [pc, #120]	; (190 <nvm_set_config+0x7c>)
     118:	69d3      	ldr	r3, [r2, #28]
     11a:	2104      	movs	r1, #4
     11c:	430b      	orrs	r3, r1
     11e:	61d3      	str	r3, [r2, #28]
     120:	4b1c      	ldr	r3, [pc, #112]	; (194 <nvm_set_config+0x80>)
     122:	2220      	movs	r2, #32
     124:	32ff      	adds	r2, #255	; 0xff
     126:	831a      	strh	r2, [r3, #24]
     128:	7d1a      	ldrb	r2, [r3, #20]
     12a:	2305      	movs	r3, #5
     12c:	07d2      	lsls	r2, r2, #31
     12e:	d401      	bmi.n	134 <nvm_set_config+0x20>
     130:	0018      	movs	r0, r3
     132:	bd10      	pop	{r4, pc}
     134:	7803      	ldrb	r3, [r0, #0]
     136:	021b      	lsls	r3, r3, #8
     138:	22c0      	movs	r2, #192	; 0xc0
     13a:	0092      	lsls	r2, r2, #2
     13c:	4013      	ands	r3, r2
     13e:	7841      	ldrb	r1, [r0, #1]
     140:	01c9      	lsls	r1, r1, #7
     142:	22ff      	movs	r2, #255	; 0xff
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     144:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     146:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     148:	7881      	ldrb	r1, [r0, #2]
     14a:	0049      	lsls	r1, r1, #1
     14c:	221e      	movs	r2, #30
     14e:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     150:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     152:	78c2      	ldrb	r2, [r0, #3]
     154:	0492      	lsls	r2, r2, #18
     156:	2180      	movs	r1, #128	; 0x80
     158:	02c9      	lsls	r1, r1, #11
     15a:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     15c:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     15e:	7902      	ldrb	r2, [r0, #4]
     160:	0412      	lsls	r2, r2, #16
     162:	21c0      	movs	r1, #192	; 0xc0
     164:	0289      	lsls	r1, r1, #10
     166:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     168:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     16a:	4a0a      	ldr	r2, [pc, #40]	; (194 <nvm_set_config+0x80>)
     16c:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     16e:	6893      	ldr	r3, [r2, #8]
     170:	035b      	lsls	r3, r3, #13
     172:	0f5b      	lsrs	r3, r3, #29
     174:	4908      	ldr	r1, [pc, #32]	; (198 <nvm_set_config+0x84>)
     176:	2408      	movs	r4, #8
     178:	409c      	lsls	r4, r3
     17a:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     17c:	6893      	ldr	r3, [r2, #8]
     17e:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     180:	7843      	ldrb	r3, [r0, #1]
     182:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     184:	8b13      	ldrh	r3, [r2, #24]
     186:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     188:	0fdb      	lsrs	r3, r3, #31
     18a:	011b      	lsls	r3, r3, #4
     18c:	e7d0      	b.n	130 <nvm_set_config+0x1c>
     18e:	46c0      	nop			; (mov r8, r8)
     190:	40000400 	.word	0x40000400
     194:	41004000 	.word	0x41004000
     198:	20000084 	.word	0x20000084

0000019c <nvm_execute_command>:
{
     19c:	b530      	push	{r4, r5, lr}
     19e:	0004      	movs	r4, r0
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     1a0:	4a22      	ldr	r2, [pc, #136]	; (22c <nvm_execute_command+0x90>)
     1a2:	8810      	ldrh	r0, [r2, #0]
     1a4:	8853      	ldrh	r3, [r2, #2]
     1a6:	4343      	muls	r3, r0
     1a8:	428b      	cmp	r3, r1
     1aa:	d206      	bcs.n	1ba <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     1ac:	2280      	movs	r2, #128	; 0x80
     1ae:	0192      	lsls	r2, r2, #6
		return STATUS_ERR_BAD_ADDRESS;
     1b0:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     1b2:	4b1f      	ldr	r3, [pc, #124]	; (230 <nvm_execute_command+0x94>)
     1b4:	18cb      	adds	r3, r1, r3
     1b6:	4293      	cmp	r3, r2
     1b8:	d80e      	bhi.n	1d8 <nvm_execute_command+0x3c>
	ctrlb_bak = nvm_module->CTRLB.reg;
     1ba:	4b1e      	ldr	r3, [pc, #120]	; (234 <nvm_execute_command+0x98>)
     1bc:	685d      	ldr	r5, [r3, #4]
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     1be:	2280      	movs	r2, #128	; 0x80
     1c0:	02d2      	lsls	r2, r2, #11
     1c2:	432a      	orrs	r2, r5
     1c4:	605a      	str	r2, [r3, #4]
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     1c6:	2220      	movs	r2, #32
     1c8:	32ff      	adds	r2, #255	; 0xff
     1ca:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     1cc:	7d1b      	ldrb	r3, [r3, #20]
	if (!nvm_is_ready()) {
     1ce:	07db      	lsls	r3, r3, #31
     1d0:	d403      	bmi.n	1da <nvm_execute_command+0x3e>
		nvm_module->CTRLB.reg = ctrlb_bak;
     1d2:	4b18      	ldr	r3, [pc, #96]	; (234 <nvm_execute_command+0x98>)
     1d4:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     1d6:	2005      	movs	r0, #5
}
     1d8:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     1da:	2c45      	cmp	r4, #69	; 0x45
     1dc:	d822      	bhi.n	224 <nvm_execute_command+0x88>
     1de:	00a3      	lsls	r3, r4, #2
     1e0:	4a15      	ldr	r2, [pc, #84]	; (238 <nvm_execute_command+0x9c>)
     1e2:	58d3      	ldr	r3, [r2, r3]
     1e4:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     1e6:	4b13      	ldr	r3, [pc, #76]	; (234 <nvm_execute_command+0x98>)
     1e8:	8b1b      	ldrh	r3, [r3, #24]
     1ea:	05db      	lsls	r3, r3, #23
     1ec:	d503      	bpl.n	1f6 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
     1ee:	4b11      	ldr	r3, [pc, #68]	; (234 <nvm_execute_command+0x98>)
     1f0:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     1f2:	2010      	movs	r0, #16
     1f4:	e7f0      	b.n	1d8 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     1f6:	0889      	lsrs	r1, r1, #2
     1f8:	0049      	lsls	r1, r1, #1
     1fa:	4b0e      	ldr	r3, [pc, #56]	; (234 <nvm_execute_command+0x98>)
     1fc:	61d9      	str	r1, [r3, #28]
			break;
     1fe:	e003      	b.n	208 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     200:	0889      	lsrs	r1, r1, #2
     202:	0049      	lsls	r1, r1, #1
     204:	4b0b      	ldr	r3, [pc, #44]	; (234 <nvm_execute_command+0x98>)
     206:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     208:	20a5      	movs	r0, #165	; 0xa5
     20a:	0200      	lsls	r0, r0, #8
     20c:	4304      	orrs	r4, r0
     20e:	4b09      	ldr	r3, [pc, #36]	; (234 <nvm_execute_command+0x98>)
     210:	801c      	strh	r4, [r3, #0]
     212:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     214:	2201      	movs	r2, #1
     216:	7d0b      	ldrb	r3, [r1, #20]
     218:	4213      	tst	r3, r2
     21a:	d0fc      	beq.n	216 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
     21c:	4b05      	ldr	r3, [pc, #20]	; (234 <nvm_execute_command+0x98>)
     21e:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     220:	2000      	movs	r0, #0
     222:	e7d9      	b.n	1d8 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
     224:	4b03      	ldr	r3, [pc, #12]	; (234 <nvm_execute_command+0x98>)
     226:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     228:	2017      	movs	r0, #23
     22a:	e7d5      	b.n	1d8 <nvm_execute_command+0x3c>
     22c:	20000084 	.word	0x20000084
     230:	ff7fc000 	.word	0xff7fc000
     234:	41004000 	.word	0x41004000
     238:	000027a0 	.word	0x000027a0

0000023c <nvm_write_buffer>:
{
     23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     23e:	4b25      	ldr	r3, [pc, #148]	; (2d4 <nvm_write_buffer+0x98>)
     240:	881d      	ldrh	r5, [r3, #0]
     242:	885b      	ldrh	r3, [r3, #2]
     244:	436b      	muls	r3, r5
		return STATUS_ERR_BAD_ADDRESS;
     246:	2418      	movs	r4, #24
	if (destination_address >
     248:	4283      	cmp	r3, r0
     24a:	d201      	bcs.n	250 <nvm_write_buffer+0x14>
}
     24c:	0020      	movs	r0, r4
     24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
     250:	1e6b      	subs	r3, r5, #1
     252:	4218      	tst	r0, r3
     254:	d1fa      	bne.n	24c <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     256:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     258:	4295      	cmp	r5, r2
     25a:	d3f7      	bcc.n	24c <nvm_write_buffer+0x10>
     25c:	4b1e      	ldr	r3, [pc, #120]	; (2d8 <nvm_write_buffer+0x9c>)
     25e:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     260:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     262:	07db      	lsls	r3, r3, #31
     264:	d5f2      	bpl.n	24c <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     266:	4c1d      	ldr	r4, [pc, #116]	; (2dc <nvm_write_buffer+0xa0>)
     268:	4b1b      	ldr	r3, [pc, #108]	; (2d8 <nvm_write_buffer+0x9c>)
     26a:	801c      	strh	r4, [r3, #0]
     26c:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     26e:	2401      	movs	r4, #1
     270:	7d2b      	ldrb	r3, [r5, #20]
     272:	4223      	tst	r3, r4
     274:	d0fc      	beq.n	270 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     276:	2420      	movs	r4, #32
     278:	34ff      	adds	r4, #255	; 0xff
     27a:	4b17      	ldr	r3, [pc, #92]	; (2d8 <nvm_write_buffer+0x9c>)
     27c:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     27e:	2a00      	cmp	r2, #0
     280:	d022      	beq.n	2c8 <nvm_write_buffer+0x8c>
     282:	2301      	movs	r3, #1
     284:	0005      	movs	r5, r0
     286:	439d      	bics	r5, r3
     288:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     28a:	1e57      	subs	r7, r2, #1
     28c:	e009      	b.n	2a2 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
     28e:	18ce      	adds	r6, r1, r3
     290:	7876      	ldrb	r6, [r6, #1]
     292:	0236      	lsls	r6, r6, #8
     294:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
     296:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     298:	3302      	adds	r3, #2
     29a:	b29b      	uxth	r3, r3
     29c:	3502      	adds	r5, #2
     29e:	429a      	cmp	r2, r3
     2a0:	d904      	bls.n	2ac <nvm_write_buffer+0x70>
		data = buffer[i];
     2a2:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     2a4:	42bb      	cmp	r3, r7
     2a6:	dbf2      	blt.n	28e <nvm_write_buffer+0x52>
		data = buffer[i];
     2a8:	b2a4      	uxth	r4, r4
     2aa:	e7f4      	b.n	296 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     2ac:	4b09      	ldr	r3, [pc, #36]	; (2d4 <nvm_write_buffer+0x98>)
     2ae:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     2b0:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     2b2:	2b00      	cmp	r3, #0
     2b4:	d1ca      	bne.n	24c <nvm_write_buffer+0x10>
     2b6:	2a3f      	cmp	r2, #63	; 0x3f
     2b8:	d8c8      	bhi.n	24c <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     2ba:	2200      	movs	r2, #0
     2bc:	0001      	movs	r1, r0
     2be:	2004      	movs	r0, #4
     2c0:	4b07      	ldr	r3, [pc, #28]	; (2e0 <nvm_write_buffer+0xa4>)
     2c2:	4798      	blx	r3
     2c4:	0004      	movs	r4, r0
     2c6:	e7c1      	b.n	24c <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     2c8:	4b02      	ldr	r3, [pc, #8]	; (2d4 <nvm_write_buffer+0x98>)
     2ca:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     2cc:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     2ce:	2b00      	cmp	r3, #0
     2d0:	d0f3      	beq.n	2ba <nvm_write_buffer+0x7e>
     2d2:	e7bb      	b.n	24c <nvm_write_buffer+0x10>
     2d4:	20000084 	.word	0x20000084
     2d8:	41004000 	.word	0x41004000
     2dc:	ffffa544 	.word	0xffffa544
     2e0:	0000019d 	.word	0x0000019d

000002e4 <nvm_erase_row>:
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     2e4:	4b13      	ldr	r3, [pc, #76]	; (334 <nvm_erase_row+0x50>)
     2e6:	881a      	ldrh	r2, [r3, #0]
     2e8:	885b      	ldrh	r3, [r3, #2]
     2ea:	4353      	muls	r3, r2
		return STATUS_ERR_BAD_ADDRESS;
     2ec:	2118      	movs	r1, #24
	if (row_address >
     2ee:	4283      	cmp	r3, r0
     2f0:	d201      	bcs.n	2f6 <nvm_erase_row+0x12>
}
     2f2:	0008      	movs	r0, r1
     2f4:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     2f6:	0092      	lsls	r2, r2, #2
     2f8:	3a01      	subs	r2, #1
     2fa:	4210      	tst	r0, r2
     2fc:	d1f9      	bne.n	2f2 <nvm_erase_row+0xe>
     2fe:	4b0e      	ldr	r3, [pc, #56]	; (338 <nvm_erase_row+0x54>)
     300:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     302:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
     304:	07db      	lsls	r3, r3, #31
     306:	d5f4      	bpl.n	2f2 <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     308:	4b0b      	ldr	r3, [pc, #44]	; (338 <nvm_erase_row+0x54>)
     30a:	2220      	movs	r2, #32
     30c:	32ff      	adds	r2, #255	; 0xff
     30e:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     310:	0880      	lsrs	r0, r0, #2
     312:	0040      	lsls	r0, r0, #1
     314:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     316:	4a09      	ldr	r2, [pc, #36]	; (33c <nvm_erase_row+0x58>)
     318:	801a      	strh	r2, [r3, #0]
     31a:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     31c:	2201      	movs	r2, #1
     31e:	7d0b      	ldrb	r3, [r1, #20]
     320:	4213      	tst	r3, r2
     322:	d0fc      	beq.n	31e <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     324:	4b04      	ldr	r3, [pc, #16]	; (338 <nvm_erase_row+0x54>)
     326:	8b19      	ldrh	r1, [r3, #24]
     328:	201c      	movs	r0, #28
     32a:	4001      	ands	r1, r0
	return STATUS_OK;
     32c:	1e48      	subs	r0, r1, #1
     32e:	4181      	sbcs	r1, r0
     330:	0089      	lsls	r1, r1, #2
     332:	e7de      	b.n	2f2 <nvm_erase_row+0xe>
     334:	20000084 	.word	0x20000084
     338:	41004000 	.word	0x41004000
     33c:	ffffa502 	.word	0xffffa502

00000340 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     340:	b5f0      	push	{r4, r5, r6, r7, lr}
     342:	46de      	mov	lr, fp
     344:	4657      	mov	r7, sl
     346:	464e      	mov	r6, r9
     348:	4645      	mov	r5, r8
     34a:	b5e0      	push	{r5, r6, r7, lr}
     34c:	b087      	sub	sp, #28
     34e:	4680      	mov	r8, r0
     350:	9104      	str	r1, [sp, #16]
     352:	0016      	movs	r6, r2
     354:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     356:	2200      	movs	r2, #0
     358:	2300      	movs	r3, #0
     35a:	2100      	movs	r1, #0
     35c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     35e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     360:	2001      	movs	r0, #1
     362:	0021      	movs	r1, r4
     364:	9600      	str	r6, [sp, #0]
     366:	9701      	str	r7, [sp, #4]
     368:	465c      	mov	r4, fp
     36a:	9403      	str	r4, [sp, #12]
     36c:	4644      	mov	r4, r8
     36e:	9405      	str	r4, [sp, #20]
     370:	e013      	b.n	39a <long_division+0x5a>
     372:	2420      	movs	r4, #32
     374:	1a64      	subs	r4, r4, r1
     376:	0005      	movs	r5, r0
     378:	40e5      	lsrs	r5, r4
     37a:	46a8      	mov	r8, r5
     37c:	e014      	b.n	3a8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     37e:	9c00      	ldr	r4, [sp, #0]
     380:	9d01      	ldr	r5, [sp, #4]
     382:	1b12      	subs	r2, r2, r4
     384:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     386:	465c      	mov	r4, fp
     388:	464d      	mov	r5, r9
     38a:	432c      	orrs	r4, r5
     38c:	46a3      	mov	fp, r4
     38e:	9c03      	ldr	r4, [sp, #12]
     390:	4645      	mov	r5, r8
     392:	432c      	orrs	r4, r5
     394:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     396:	3901      	subs	r1, #1
     398:	d325      	bcc.n	3e6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     39a:	2420      	movs	r4, #32
     39c:	4264      	negs	r4, r4
     39e:	190c      	adds	r4, r1, r4
     3a0:	d4e7      	bmi.n	372 <long_division+0x32>
     3a2:	0005      	movs	r5, r0
     3a4:	40a5      	lsls	r5, r4
     3a6:	46a8      	mov	r8, r5
     3a8:	0004      	movs	r4, r0
     3aa:	408c      	lsls	r4, r1
     3ac:	46a1      	mov	r9, r4
		r = r << 1;
     3ae:	1892      	adds	r2, r2, r2
     3b0:	415b      	adcs	r3, r3
     3b2:	0014      	movs	r4, r2
     3b4:	001d      	movs	r5, r3
		if (n & bit_shift) {
     3b6:	9e05      	ldr	r6, [sp, #20]
     3b8:	464f      	mov	r7, r9
     3ba:	403e      	ands	r6, r7
     3bc:	46b4      	mov	ip, r6
     3be:	9e04      	ldr	r6, [sp, #16]
     3c0:	4647      	mov	r7, r8
     3c2:	403e      	ands	r6, r7
     3c4:	46b2      	mov	sl, r6
     3c6:	4666      	mov	r6, ip
     3c8:	4657      	mov	r7, sl
     3ca:	433e      	orrs	r6, r7
     3cc:	d003      	beq.n	3d6 <long_division+0x96>
			r |= 0x01;
     3ce:	0006      	movs	r6, r0
     3d0:	4326      	orrs	r6, r4
     3d2:	0032      	movs	r2, r6
     3d4:	002b      	movs	r3, r5
		if (r >= d) {
     3d6:	9c00      	ldr	r4, [sp, #0]
     3d8:	9d01      	ldr	r5, [sp, #4]
     3da:	429d      	cmp	r5, r3
     3dc:	d8db      	bhi.n	396 <long_division+0x56>
     3de:	d1ce      	bne.n	37e <long_division+0x3e>
     3e0:	4294      	cmp	r4, r2
     3e2:	d8d8      	bhi.n	396 <long_division+0x56>
     3e4:	e7cb      	b.n	37e <long_division+0x3e>
     3e6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     3e8:	4658      	mov	r0, fp
     3ea:	0019      	movs	r1, r3
     3ec:	b007      	add	sp, #28
     3ee:	bc3c      	pop	{r2, r3, r4, r5}
     3f0:	4690      	mov	r8, r2
     3f2:	4699      	mov	r9, r3
     3f4:	46a2      	mov	sl, r4
     3f6:	46ab      	mov	fp, r5
     3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000003fa <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     3fa:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     3fc:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3fe:	2340      	movs	r3, #64	; 0x40
     400:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     402:	4281      	cmp	r1, r0
     404:	d202      	bcs.n	40c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     406:	0018      	movs	r0, r3
     408:	bd10      	pop	{r4, pc}
		baud_calculated++;
     40a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     40c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     40e:	1c63      	adds	r3, r4, #1
     410:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     412:	4288      	cmp	r0, r1
     414:	d9f9      	bls.n	40a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     416:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     418:	2cff      	cmp	r4, #255	; 0xff
     41a:	d8f4      	bhi.n	406 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     41c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     41e:	2300      	movs	r3, #0
     420:	e7f1      	b.n	406 <_sercom_get_sync_baud_val+0xc>
	...

00000424 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     424:	b5f0      	push	{r4, r5, r6, r7, lr}
     426:	b083      	sub	sp, #12
     428:	000f      	movs	r7, r1
     42a:	0016      	movs	r6, r2
     42c:	aa08      	add	r2, sp, #32
     42e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     430:	0004      	movs	r4, r0
     432:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     434:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     436:	42bc      	cmp	r4, r7
     438:	d902      	bls.n	440 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     43a:	0010      	movs	r0, r2
     43c:	b003      	add	sp, #12
     43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     440:	2b00      	cmp	r3, #0
     442:	d114      	bne.n	46e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     444:	0002      	movs	r2, r0
     446:	0008      	movs	r0, r1
     448:	2100      	movs	r1, #0
     44a:	4c19      	ldr	r4, [pc, #100]	; (4b0 <_sercom_get_async_baud_val+0x8c>)
     44c:	47a0      	blx	r4
     44e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     450:	003a      	movs	r2, r7
     452:	2300      	movs	r3, #0
     454:	2000      	movs	r0, #0
     456:	4c17      	ldr	r4, [pc, #92]	; (4b4 <_sercom_get_async_baud_val+0x90>)
     458:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     45a:	2200      	movs	r2, #0
     45c:	2301      	movs	r3, #1
     45e:	1a12      	subs	r2, r2, r0
     460:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     462:	0c12      	lsrs	r2, r2, #16
     464:	041b      	lsls	r3, r3, #16
     466:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     468:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     46a:	2200      	movs	r2, #0
     46c:	e7e5      	b.n	43a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     46e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     470:	2b01      	cmp	r3, #1
     472:	d1f9      	bne.n	468 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     474:	000a      	movs	r2, r1
     476:	2300      	movs	r3, #0
     478:	2100      	movs	r1, #0
     47a:	4c0d      	ldr	r4, [pc, #52]	; (4b0 <_sercom_get_async_baud_val+0x8c>)
     47c:	47a0      	blx	r4
     47e:	0002      	movs	r2, r0
     480:	000b      	movs	r3, r1
     482:	9200      	str	r2, [sp, #0]
     484:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     486:	0038      	movs	r0, r7
     488:	2100      	movs	r1, #0
     48a:	4c0a      	ldr	r4, [pc, #40]	; (4b4 <_sercom_get_async_baud_val+0x90>)
     48c:	47a0      	blx	r4
     48e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     490:	2380      	movs	r3, #128	; 0x80
     492:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     494:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     496:	4298      	cmp	r0, r3
     498:	d8cf      	bhi.n	43a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     49a:	0f79      	lsrs	r1, r7, #29
     49c:	00f8      	lsls	r0, r7, #3
     49e:	9a00      	ldr	r2, [sp, #0]
     4a0:	9b01      	ldr	r3, [sp, #4]
     4a2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     4a4:	00ea      	lsls	r2, r5, #3
     4a6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     4a8:	b2d2      	uxtb	r2, r2
     4aa:	0352      	lsls	r2, r2, #13
     4ac:	432a      	orrs	r2, r5
     4ae:	e7db      	b.n	468 <_sercom_get_async_baud_val+0x44>
     4b0:	0000163d 	.word	0x0000163d
     4b4:	00000341 	.word	0x00000341

000004b8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     4b8:	b510      	push	{r4, lr}
     4ba:	b082      	sub	sp, #8
     4bc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     4be:	4b0e      	ldr	r3, [pc, #56]	; (4f8 <sercom_set_gclk_generator+0x40>)
     4c0:	781b      	ldrb	r3, [r3, #0]
     4c2:	2b00      	cmp	r3, #0
     4c4:	d007      	beq.n	4d6 <sercom_set_gclk_generator+0x1e>
     4c6:	2900      	cmp	r1, #0
     4c8:	d105      	bne.n	4d6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     4ca:	4b0b      	ldr	r3, [pc, #44]	; (4f8 <sercom_set_gclk_generator+0x40>)
     4cc:	785b      	ldrb	r3, [r3, #1]
     4ce:	4283      	cmp	r3, r0
     4d0:	d010      	beq.n	4f4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     4d2:	201d      	movs	r0, #29
     4d4:	e00c      	b.n	4f0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     4d6:	a901      	add	r1, sp, #4
     4d8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     4da:	2013      	movs	r0, #19
     4dc:	4b07      	ldr	r3, [pc, #28]	; (4fc <sercom_set_gclk_generator+0x44>)
     4de:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     4e0:	2013      	movs	r0, #19
     4e2:	4b07      	ldr	r3, [pc, #28]	; (500 <sercom_set_gclk_generator+0x48>)
     4e4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     4e6:	4b04      	ldr	r3, [pc, #16]	; (4f8 <sercom_set_gclk_generator+0x40>)
     4e8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     4ea:	2201      	movs	r2, #1
     4ec:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     4ee:	2000      	movs	r0, #0
}
     4f0:	b002      	add	sp, #8
     4f2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     4f4:	2000      	movs	r0, #0
     4f6:	e7fb      	b.n	4f0 <sercom_set_gclk_generator+0x38>
     4f8:	2000008c 	.word	0x2000008c
     4fc:	000010e5 	.word	0x000010e5
     500:	00001059 	.word	0x00001059

00000504 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     504:	4b2b      	ldr	r3, [pc, #172]	; (5b4 <_sercom_get_default_pad+0xb0>)
     506:	4298      	cmp	r0, r3
     508:	d023      	beq.n	552 <_sercom_get_default_pad+0x4e>
     50a:	d90f      	bls.n	52c <_sercom_get_default_pad+0x28>
     50c:	4b2a      	ldr	r3, [pc, #168]	; (5b8 <_sercom_get_default_pad+0xb4>)
     50e:	4298      	cmp	r0, r3
     510:	d02f      	beq.n	572 <_sercom_get_default_pad+0x6e>
     512:	4b2a      	ldr	r3, [pc, #168]	; (5bc <_sercom_get_default_pad+0xb8>)
     514:	4298      	cmp	r0, r3
     516:	d142      	bne.n	59e <_sercom_get_default_pad+0x9a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     518:	2901      	cmp	r1, #1
     51a:	d03a      	beq.n	592 <_sercom_get_default_pad+0x8e>
     51c:	2900      	cmp	r1, #0
     51e:	d046      	beq.n	5ae <_sercom_get_default_pad+0xaa>
     520:	2902      	cmp	r1, #2
     522:	d038      	beq.n	596 <_sercom_get_default_pad+0x92>
     524:	2903      	cmp	r1, #3
     526:	d038      	beq.n	59a <_sercom_get_default_pad+0x96>
	}

	Assert(false);
	return 0;
     528:	2000      	movs	r0, #0
     52a:	e039      	b.n	5a0 <_sercom_get_default_pad+0x9c>
	switch ((uintptr_t)sercom_module) {
     52c:	4b24      	ldr	r3, [pc, #144]	; (5c0 <_sercom_get_default_pad+0xbc>)
     52e:	4298      	cmp	r0, r3
     530:	d135      	bne.n	59e <_sercom_get_default_pad+0x9a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     532:	2901      	cmp	r1, #1
     534:	d007      	beq.n	546 <_sercom_get_default_pad+0x42>
     536:	2900      	cmp	r1, #0
     538:	d033      	beq.n	5a2 <_sercom_get_default_pad+0x9e>
     53a:	2902      	cmp	r1, #2
     53c:	d005      	beq.n	54a <_sercom_get_default_pad+0x46>
     53e:	2903      	cmp	r1, #3
     540:	d005      	beq.n	54e <_sercom_get_default_pad+0x4a>
	return 0;
     542:	2000      	movs	r0, #0
     544:	e02c      	b.n	5a0 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     546:	481f      	ldr	r0, [pc, #124]	; (5c4 <_sercom_get_default_pad+0xc0>)
     548:	e02a      	b.n	5a0 <_sercom_get_default_pad+0x9c>
     54a:	481f      	ldr	r0, [pc, #124]	; (5c8 <_sercom_get_default_pad+0xc4>)
     54c:	e028      	b.n	5a0 <_sercom_get_default_pad+0x9c>
     54e:	481f      	ldr	r0, [pc, #124]	; (5cc <_sercom_get_default_pad+0xc8>)
     550:	e026      	b.n	5a0 <_sercom_get_default_pad+0x9c>
     552:	2901      	cmp	r1, #1
     554:	d007      	beq.n	566 <_sercom_get_default_pad+0x62>
     556:	2900      	cmp	r1, #0
     558:	d025      	beq.n	5a6 <_sercom_get_default_pad+0xa2>
     55a:	2902      	cmp	r1, #2
     55c:	d005      	beq.n	56a <_sercom_get_default_pad+0x66>
     55e:	2903      	cmp	r1, #3
     560:	d005      	beq.n	56e <_sercom_get_default_pad+0x6a>
	return 0;
     562:	2000      	movs	r0, #0
     564:	e01c      	b.n	5a0 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     566:	481a      	ldr	r0, [pc, #104]	; (5d0 <_sercom_get_default_pad+0xcc>)
     568:	e01a      	b.n	5a0 <_sercom_get_default_pad+0x9c>
     56a:	481a      	ldr	r0, [pc, #104]	; (5d4 <_sercom_get_default_pad+0xd0>)
     56c:	e018      	b.n	5a0 <_sercom_get_default_pad+0x9c>
     56e:	481a      	ldr	r0, [pc, #104]	; (5d8 <_sercom_get_default_pad+0xd4>)
     570:	e016      	b.n	5a0 <_sercom_get_default_pad+0x9c>
     572:	2901      	cmp	r1, #1
     574:	d007      	beq.n	586 <_sercom_get_default_pad+0x82>
     576:	2900      	cmp	r1, #0
     578:	d017      	beq.n	5aa <_sercom_get_default_pad+0xa6>
     57a:	2902      	cmp	r1, #2
     57c:	d005      	beq.n	58a <_sercom_get_default_pad+0x86>
     57e:	2903      	cmp	r1, #3
     580:	d005      	beq.n	58e <_sercom_get_default_pad+0x8a>
	return 0;
     582:	2000      	movs	r0, #0
     584:	e00c      	b.n	5a0 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     586:	4815      	ldr	r0, [pc, #84]	; (5dc <_sercom_get_default_pad+0xd8>)
     588:	e00a      	b.n	5a0 <_sercom_get_default_pad+0x9c>
     58a:	4815      	ldr	r0, [pc, #84]	; (5e0 <_sercom_get_default_pad+0xdc>)
     58c:	e008      	b.n	5a0 <_sercom_get_default_pad+0x9c>
     58e:	4815      	ldr	r0, [pc, #84]	; (5e4 <_sercom_get_default_pad+0xe0>)
     590:	e006      	b.n	5a0 <_sercom_get_default_pad+0x9c>
     592:	4815      	ldr	r0, [pc, #84]	; (5e8 <_sercom_get_default_pad+0xe4>)
     594:	e004      	b.n	5a0 <_sercom_get_default_pad+0x9c>
     596:	4815      	ldr	r0, [pc, #84]	; (5ec <_sercom_get_default_pad+0xe8>)
     598:	e002      	b.n	5a0 <_sercom_get_default_pad+0x9c>
     59a:	4815      	ldr	r0, [pc, #84]	; (5f0 <_sercom_get_default_pad+0xec>)
     59c:	e000      	b.n	5a0 <_sercom_get_default_pad+0x9c>
	return 0;
     59e:	2000      	movs	r0, #0
}
     5a0:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5a2:	4814      	ldr	r0, [pc, #80]	; (5f4 <_sercom_get_default_pad+0xf0>)
     5a4:	e7fc      	b.n	5a0 <_sercom_get_default_pad+0x9c>
     5a6:	2003      	movs	r0, #3
     5a8:	e7fa      	b.n	5a0 <_sercom_get_default_pad+0x9c>
     5aa:	4813      	ldr	r0, [pc, #76]	; (5f8 <_sercom_get_default_pad+0xf4>)
     5ac:	e7f8      	b.n	5a0 <_sercom_get_default_pad+0x9c>
     5ae:	4813      	ldr	r0, [pc, #76]	; (5fc <_sercom_get_default_pad+0xf8>)
     5b0:	e7f6      	b.n	5a0 <_sercom_get_default_pad+0x9c>
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	42000c00 	.word	0x42000c00
     5b8:	42001000 	.word	0x42001000
     5bc:	42001400 	.word	0x42001400
     5c0:	42000800 	.word	0x42000800
     5c4:	00050003 	.word	0x00050003
     5c8:	00060003 	.word	0x00060003
     5cc:	00070003 	.word	0x00070003
     5d0:	00010003 	.word	0x00010003
     5d4:	001e0003 	.word	0x001e0003
     5d8:	001f0003 	.word	0x001f0003
     5dc:	00090003 	.word	0x00090003
     5e0:	000a0003 	.word	0x000a0003
     5e4:	000b0003 	.word	0x000b0003
     5e8:	00110003 	.word	0x00110003
     5ec:	00120003 	.word	0x00120003
     5f0:	00130003 	.word	0x00130003
     5f4:	00040003 	.word	0x00040003
     5f8:	00080003 	.word	0x00080003
     5fc:	00100003 	.word	0x00100003

00000600 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     600:	b530      	push	{r4, r5, lr}
     602:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     604:	466a      	mov	r2, sp
     606:	4b0f      	ldr	r3, [pc, #60]	; (644 <_sercom_get_sercom_inst_index+0x44>)
     608:	cb32      	ldmia	r3!, {r1, r4, r5}
     60a:	c232      	stmia	r2!, {r1, r4, r5}
     60c:	681b      	ldr	r3, [r3, #0]
     60e:	6013      	str	r3, [r2, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     610:	0003      	movs	r3, r0
     612:	9a00      	ldr	r2, [sp, #0]
     614:	4282      	cmp	r2, r0
     616:	d011      	beq.n	63c <_sercom_get_sercom_inst_index+0x3c>
     618:	9a01      	ldr	r2, [sp, #4]
     61a:	4282      	cmp	r2, r0
     61c:	d00a      	beq.n	634 <_sercom_get_sercom_inst_index+0x34>
     61e:	9a02      	ldr	r2, [sp, #8]
     620:	4282      	cmp	r2, r0
     622:	d009      	beq.n	638 <_sercom_get_sercom_inst_index+0x38>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     624:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     626:	9a03      	ldr	r2, [sp, #12]
     628:	429a      	cmp	r2, r3
     62a:	d001      	beq.n	630 <_sercom_get_sercom_inst_index+0x30>
}
     62c:	b005      	add	sp, #20
     62e:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     630:	3003      	adds	r0, #3
     632:	e004      	b.n	63e <_sercom_get_sercom_inst_index+0x3e>
     634:	2001      	movs	r0, #1
     636:	e002      	b.n	63e <_sercom_get_sercom_inst_index+0x3e>
     638:	2002      	movs	r0, #2
     63a:	e000      	b.n	63e <_sercom_get_sercom_inst_index+0x3e>
     63c:	2000      	movs	r0, #0
			return i;
     63e:	b2c0      	uxtb	r0, r0
     640:	e7f4      	b.n	62c <_sercom_get_sercom_inst_index+0x2c>
     642:	46c0      	nop			; (mov r8, r8)
     644:	000028b8 	.word	0x000028b8

00000648 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     648:	b5f0      	push	{r4, r5, r6, r7, lr}
     64a:	46c6      	mov	lr, r8
     64c:	b500      	push	{lr}
     64e:	000c      	movs	r4, r1
     650:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     652:	2800      	cmp	r0, #0
     654:	d10f      	bne.n	676 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
     656:	2a00      	cmp	r2, #0
     658:	dd11      	ble.n	67e <_read+0x36>
     65a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     65c:	4e09      	ldr	r6, [pc, #36]	; (684 <_read+0x3c>)
     65e:	4d0a      	ldr	r5, [pc, #40]	; (688 <_read+0x40>)
     660:	6830      	ldr	r0, [r6, #0]
     662:	0021      	movs	r1, r4
     664:	682b      	ldr	r3, [r5, #0]
     666:	4798      	blx	r3
		ptr++;
     668:	3401      	adds	r4, #1
	for (; len > 0; --len) {
     66a:	42bc      	cmp	r4, r7
     66c:	d1f8      	bne.n	660 <_read+0x18>
		nChars++;
	}
	return nChars;
}
     66e:	4640      	mov	r0, r8
     670:	bc04      	pop	{r2}
     672:	4690      	mov	r8, r2
     674:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
     676:	2301      	movs	r3, #1
     678:	425b      	negs	r3, r3
     67a:	4698      	mov	r8, r3
     67c:	e7f7      	b.n	66e <_read+0x26>
	for (; len > 0; --len) {
     67e:	4680      	mov	r8, r0
     680:	e7f5      	b.n	66e <_read+0x26>
     682:	46c0      	nop			; (mov r8, r8)
     684:	200000c4 	.word	0x200000c4
     688:	200000bc 	.word	0x200000bc

0000068c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     68c:	b5f0      	push	{r4, r5, r6, r7, lr}
     68e:	46c6      	mov	lr, r8
     690:	b500      	push	{lr}
     692:	000e      	movs	r6, r1
     694:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     696:	3801      	subs	r0, #1
     698:	2802      	cmp	r0, #2
     69a:	d810      	bhi.n	6be <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     69c:	2a00      	cmp	r2, #0
     69e:	d011      	beq.n	6c4 <_write+0x38>
     6a0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     6a2:	4b0c      	ldr	r3, [pc, #48]	; (6d4 <_write+0x48>)
     6a4:	4698      	mov	r8, r3
     6a6:	4f0c      	ldr	r7, [pc, #48]	; (6d8 <_write+0x4c>)
     6a8:	4643      	mov	r3, r8
     6aa:	6818      	ldr	r0, [r3, #0]
     6ac:	5d31      	ldrb	r1, [r6, r4]
     6ae:	683b      	ldr	r3, [r7, #0]
     6b0:	4798      	blx	r3
     6b2:	2800      	cmp	r0, #0
     6b4:	db08      	blt.n	6c8 <_write+0x3c>
			return -1;
		}
		++nChars;
     6b6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
     6b8:	42a5      	cmp	r5, r4
     6ba:	d1f5      	bne.n	6a8 <_write+0x1c>
     6bc:	e006      	b.n	6cc <_write+0x40>
		return -1;
     6be:	2401      	movs	r4, #1
     6c0:	4264      	negs	r4, r4
     6c2:	e003      	b.n	6cc <_write+0x40>
	for (; len != 0; --len) {
     6c4:	0014      	movs	r4, r2
     6c6:	e001      	b.n	6cc <_write+0x40>
			return -1;
     6c8:	2401      	movs	r4, #1
     6ca:	4264      	negs	r4, r4
	}
	return nChars;
}
     6cc:	0020      	movs	r0, r4
     6ce:	bc04      	pop	{r2}
     6d0:	4690      	mov	r8, r2
     6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6d4:	200000c4 	.word	0x200000c4
     6d8:	200000c0 	.word	0x200000c0

000006dc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     6dc:	b570      	push	{r4, r5, r6, lr}
     6de:	b082      	sub	sp, #8
     6e0:	0005      	movs	r5, r0
     6e2:	000e      	movs	r6, r1
	uint16_t temp = 0;
     6e4:	2200      	movs	r2, #0
     6e6:	466b      	mov	r3, sp
     6e8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     6ea:	4c06      	ldr	r4, [pc, #24]	; (704 <usart_serial_getchar+0x28>)
     6ec:	466b      	mov	r3, sp
     6ee:	1d99      	adds	r1, r3, #6
     6f0:	0028      	movs	r0, r5
     6f2:	47a0      	blx	r4
     6f4:	2800      	cmp	r0, #0
     6f6:	d1f9      	bne.n	6ec <usart_serial_getchar+0x10>

	*c = temp;
     6f8:	466b      	mov	r3, sp
     6fa:	3306      	adds	r3, #6
     6fc:	881b      	ldrh	r3, [r3, #0]
     6fe:	7033      	strb	r3, [r6, #0]
}
     700:	b002      	add	sp, #8
     702:	bd70      	pop	{r4, r5, r6, pc}
     704:	00000b2b 	.word	0x00000b2b

00000708 <usart_serial_putchar>:
{
     708:	b570      	push	{r4, r5, r6, lr}
     70a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     70c:	b28c      	uxth	r4, r1
     70e:	4e03      	ldr	r6, [pc, #12]	; (71c <usart_serial_putchar+0x14>)
     710:	0021      	movs	r1, r4
     712:	0028      	movs	r0, r5
     714:	47b0      	blx	r6
     716:	2800      	cmp	r0, #0
     718:	d1fa      	bne.n	710 <usart_serial_putchar+0x8>
}
     71a:	bd70      	pop	{r4, r5, r6, pc}
     71c:	00000b01 	.word	0x00000b01

00000720 <console_init>:

/**
 * \brief Initializes the console output
 */
void console_init(void)
{
     720:	b570      	push	{r4, r5, r6, lr}
     722:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     724:	2380      	movs	r3, #128	; 0x80
     726:	05db      	lsls	r3, r3, #23
     728:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     72a:	2300      	movs	r3, #0
     72c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     72e:	22ff      	movs	r2, #255	; 0xff
     730:	4669      	mov	r1, sp
     732:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     734:	2200      	movs	r2, #0
     736:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     738:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     73a:	2101      	movs	r1, #1
     73c:	2024      	movs	r0, #36	; 0x24
     73e:	466c      	mov	r4, sp
     740:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     742:	3001      	adds	r0, #1
     744:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     746:	3125      	adds	r1, #37	; 0x25
     748:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     74a:	3101      	adds	r1, #1
     74c:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     74e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     750:	3105      	adds	r1, #5
     752:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     754:	3101      	adds	r1, #1
     756:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     758:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     75a:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     75c:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     75e:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     760:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     762:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     764:	2313      	movs	r3, #19
     766:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     768:	7762      	strb	r2, [r4, #29]
	struct usart_config uart_conf;

	usart_get_config_defaults(&uart_conf);
	uart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
     76a:	2380      	movs	r3, #128	; 0x80
     76c:	035b      	lsls	r3, r3, #13
     76e:	9303      	str	r3, [sp, #12]
	uart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
     770:	4b16      	ldr	r3, [pc, #88]	; (7cc <console_init+0xac>)
     772:	930c      	str	r3, [sp, #48]	; 0x30
	uart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
     774:	4b16      	ldr	r3, [pc, #88]	; (7d0 <console_init+0xb0>)
     776:	930d      	str	r3, [sp, #52]	; 0x34
	uart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
     778:	4b16      	ldr	r3, [pc, #88]	; (7d4 <console_init+0xb4>)
     77a:	930e      	str	r3, [sp, #56]	; 0x38
	uart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
     77c:	4b16      	ldr	r3, [pc, #88]	; (7d8 <console_init+0xb8>)
     77e:	930f      	str	r3, [sp, #60]	; 0x3c
	uart_conf.baudrate    = CONF_STDIO_BAUDRATE;
     780:	23e1      	movs	r3, #225	; 0xe1
     782:	025b      	lsls	r3, r3, #9
     784:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     786:	4c15      	ldr	r4, [pc, #84]	; (7dc <console_init+0xbc>)
     788:	4b15      	ldr	r3, [pc, #84]	; (7e0 <console_init+0xc0>)
     78a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     78c:	4a15      	ldr	r2, [pc, #84]	; (7e4 <console_init+0xc4>)
     78e:	4b16      	ldr	r3, [pc, #88]	; (7e8 <console_init+0xc8>)
     790:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     792:	4a16      	ldr	r2, [pc, #88]	; (7ec <console_init+0xcc>)
     794:	4b16      	ldr	r3, [pc, #88]	; (7f0 <console_init+0xd0>)
     796:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     798:	466a      	mov	r2, sp
     79a:	4916      	ldr	r1, [pc, #88]	; (7f4 <console_init+0xd4>)
     79c:	0020      	movs	r0, r4
     79e:	4b16      	ldr	r3, [pc, #88]	; (7f8 <console_init+0xd8>)
     7a0:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     7a2:	4e16      	ldr	r6, [pc, #88]	; (7fc <console_init+0xdc>)
     7a4:	6833      	ldr	r3, [r6, #0]
     7a6:	6898      	ldr	r0, [r3, #8]
     7a8:	2100      	movs	r1, #0
     7aa:	4d15      	ldr	r5, [pc, #84]	; (800 <console_init+0xe0>)
     7ac:	47a8      	blx	r5
	setbuf(stdin, NULL);
     7ae:	6833      	ldr	r3, [r6, #0]
     7b0:	6858      	ldr	r0, [r3, #4]
     7b2:	2100      	movs	r1, #0
     7b4:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     7b6:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     7b8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     7ba:	2b00      	cmp	r3, #0
     7bc:	d1fc      	bne.n	7b8 <console_init+0x98>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     7be:	6813      	ldr	r3, [r2, #0]
     7c0:	2102      	movs	r1, #2
     7c2:	430b      	orrs	r3, r1
     7c4:	6013      	str	r3, [r2, #0]

	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE, &uart_conf);
	usart_enable(&cdc_uart_module);
}
     7c6:	b010      	add	sp, #64	; 0x40
     7c8:	bd70      	pop	{r4, r5, r6, pc}
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	00160002 	.word	0x00160002
     7d0:	00170002 	.word	0x00170002
     7d4:	00180002 	.word	0x00180002
     7d8:	00190002 	.word	0x00190002
     7dc:	200000c8 	.word	0x200000c8
     7e0:	200000c4 	.word	0x200000c4
     7e4:	00000709 	.word	0x00000709
     7e8:	200000c0 	.word	0x200000c0
     7ec:	000006dd 	.word	0x000006dd
     7f0:	200000bc 	.word	0x200000bc
     7f4:	42001400 	.word	0x42001400
     7f8:	00000805 	.word	0x00000805
     7fc:	20000004 	.word	0x20000004
     800:	000017f1 	.word	0x000017f1

00000804 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     804:	b5f0      	push	{r4, r5, r6, r7, lr}
     806:	46de      	mov	lr, fp
     808:	4657      	mov	r7, sl
     80a:	464e      	mov	r6, r9
     80c:	4645      	mov	r5, r8
     80e:	b5e0      	push	{r5, r6, r7, lr}
     810:	b091      	sub	sp, #68	; 0x44
     812:	0005      	movs	r5, r0
     814:	000c      	movs	r4, r1
     816:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     818:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     81a:	0008      	movs	r0, r1
     81c:	4bad      	ldr	r3, [pc, #692]	; (ad4 <usart_init+0x2d0>)
     81e:	4798      	blx	r3
     820:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     822:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     824:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     826:	07db      	lsls	r3, r3, #31
     828:	d506      	bpl.n	838 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     82a:	b011      	add	sp, #68	; 0x44
     82c:	bc3c      	pop	{r2, r3, r4, r5}
     82e:	4690      	mov	r8, r2
     830:	4699      	mov	r9, r3
     832:	46a2      	mov	sl, r4
     834:	46ab      	mov	fp, r5
     836:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     838:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     83a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     83c:	079b      	lsls	r3, r3, #30
     83e:	d4f4      	bmi.n	82a <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     840:	49a5      	ldr	r1, [pc, #660]	; (ad8 <usart_init+0x2d4>)
     842:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     844:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     846:	2301      	movs	r3, #1
     848:	40bb      	lsls	r3, r7
     84a:	4303      	orrs	r3, r0
     84c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     84e:	a90f      	add	r1, sp, #60	; 0x3c
     850:	272d      	movs	r7, #45	; 0x2d
     852:	5df3      	ldrb	r3, [r6, r7]
     854:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     856:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     858:	b2d3      	uxtb	r3, r2
     85a:	9302      	str	r3, [sp, #8]
     85c:	0018      	movs	r0, r3
     85e:	4b9f      	ldr	r3, [pc, #636]	; (adc <usart_init+0x2d8>)
     860:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     862:	9802      	ldr	r0, [sp, #8]
     864:	4b9e      	ldr	r3, [pc, #632]	; (ae0 <usart_init+0x2dc>)
     866:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     868:	5df0      	ldrb	r0, [r6, r7]
     86a:	2100      	movs	r1, #0
     86c:	4b9d      	ldr	r3, [pc, #628]	; (ae4 <usart_init+0x2e0>)
     86e:	4798      	blx	r3
	module->character_size = config->character_size;
     870:	7af3      	ldrb	r3, [r6, #11]
     872:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     874:	2324      	movs	r3, #36	; 0x24
     876:	5cf3      	ldrb	r3, [r6, r3]
     878:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     87a:	2325      	movs	r3, #37	; 0x25
     87c:	5cf3      	ldrb	r3, [r6, r3]
     87e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     880:	7ef3      	ldrb	r3, [r6, #27]
     882:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     884:	7f33      	ldrb	r3, [r6, #28]
     886:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     888:	682b      	ldr	r3, [r5, #0]
     88a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     88c:	0018      	movs	r0, r3
     88e:	4b91      	ldr	r3, [pc, #580]	; (ad4 <usart_init+0x2d0>)
     890:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     892:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     894:	2200      	movs	r2, #0
     896:	230e      	movs	r3, #14
     898:	a906      	add	r1, sp, #24
     89a:	468c      	mov	ip, r1
     89c:	4463      	add	r3, ip
     89e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     8a0:	8a32      	ldrh	r2, [r6, #16]
     8a2:	9202      	str	r2, [sp, #8]
     8a4:	2380      	movs	r3, #128	; 0x80
     8a6:	01db      	lsls	r3, r3, #7
     8a8:	429a      	cmp	r2, r3
     8aa:	d100      	bne.n	8ae <usart_init+0xaa>
     8ac:	e09f      	b.n	9ee <usart_init+0x1ea>
     8ae:	d90f      	bls.n	8d0 <usart_init+0xcc>
     8b0:	23c0      	movs	r3, #192	; 0xc0
     8b2:	01db      	lsls	r3, r3, #7
     8b4:	9a02      	ldr	r2, [sp, #8]
     8b6:	429a      	cmp	r2, r3
     8b8:	d100      	bne.n	8bc <usart_init+0xb8>
     8ba:	e093      	b.n	9e4 <usart_init+0x1e0>
     8bc:	2380      	movs	r3, #128	; 0x80
     8be:	021b      	lsls	r3, r3, #8
     8c0:	429a      	cmp	r2, r3
     8c2:	d000      	beq.n	8c6 <usart_init+0xc2>
     8c4:	e101      	b.n	aca <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     8c6:	2303      	movs	r3, #3
     8c8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8ca:	2300      	movs	r3, #0
     8cc:	9307      	str	r3, [sp, #28]
     8ce:	e008      	b.n	8e2 <usart_init+0xde>
	switch (config->sample_rate) {
     8d0:	2380      	movs	r3, #128	; 0x80
     8d2:	019b      	lsls	r3, r3, #6
     8d4:	429a      	cmp	r2, r3
     8d6:	d000      	beq.n	8da <usart_init+0xd6>
     8d8:	e0f7      	b.n	aca <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     8da:	2310      	movs	r3, #16
     8dc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     8de:	3b0f      	subs	r3, #15
     8e0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     8e2:	6833      	ldr	r3, [r6, #0]
     8e4:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     8e6:	68f3      	ldr	r3, [r6, #12]
     8e8:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
     8ea:	6973      	ldr	r3, [r6, #20]
     8ec:	469a      	mov	sl, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     8ee:	7e33      	ldrb	r3, [r6, #24]
     8f0:	9305      	str	r3, [sp, #20]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8f2:	2326      	movs	r3, #38	; 0x26
     8f4:	5cf3      	ldrb	r3, [r6, r3]
     8f6:	9303      	str	r3, [sp, #12]
	transfer_mode = (uint32_t)config->transfer_mode;
     8f8:	6873      	ldr	r3, [r6, #4]
     8fa:	4699      	mov	r9, r3
	switch (transfer_mode)
     8fc:	2b00      	cmp	r3, #0
     8fe:	d100      	bne.n	902 <usart_init+0xfe>
     900:	e0a1      	b.n	a46 <usart_init+0x242>
     902:	2380      	movs	r3, #128	; 0x80
     904:	055b      	lsls	r3, r3, #21
     906:	4599      	cmp	r9, r3
     908:	d100      	bne.n	90c <usart_init+0x108>
     90a:	e085      	b.n	a18 <usart_init+0x214>
	if(config->encoding_format_enable) {
     90c:	7e73      	ldrb	r3, [r6, #25]
     90e:	2b00      	cmp	r3, #0
     910:	d002      	beq.n	918 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     912:	7eb3      	ldrb	r3, [r6, #26]
     914:	4642      	mov	r2, r8
     916:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
     918:	682a      	ldr	r2, [r5, #0]
     91a:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
     91c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     91e:	2b00      	cmp	r3, #0
     920:	d1fc      	bne.n	91c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     922:	330e      	adds	r3, #14
     924:	aa06      	add	r2, sp, #24
     926:	4694      	mov	ip, r2
     928:	4463      	add	r3, ip
     92a:	881b      	ldrh	r3, [r3, #0]
     92c:	4642      	mov	r2, r8
     92e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     930:	465b      	mov	r3, fp
     932:	9a04      	ldr	r2, [sp, #16]
     934:	4313      	orrs	r3, r2
     936:	4652      	mov	r2, sl
     938:	4313      	orrs	r3, r2
     93a:	464a      	mov	r2, r9
     93c:	4313      	orrs	r3, r2
     93e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     940:	9b05      	ldr	r3, [sp, #20]
     942:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     944:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     946:	9b03      	ldr	r3, [sp, #12]
     948:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     94a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     94c:	2327      	movs	r3, #39	; 0x27
     94e:	5cf3      	ldrb	r3, [r6, r3]
     950:	2b00      	cmp	r3, #0
     952:	d101      	bne.n	958 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     954:	3304      	adds	r3, #4
     956:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     958:	7e73      	ldrb	r3, [r6, #25]
     95a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     95c:	7f32      	ldrb	r2, [r6, #28]
     95e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     960:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     962:	7f72      	ldrb	r2, [r6, #29]
     964:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     966:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     968:	2224      	movs	r2, #36	; 0x24
     96a:	5cb2      	ldrb	r2, [r6, r2]
     96c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     96e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     970:	2225      	movs	r2, #37	; 0x25
     972:	5cb2      	ldrb	r2, [r6, r2]
     974:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     976:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     978:	7ab1      	ldrb	r1, [r6, #10]
     97a:	7af2      	ldrb	r2, [r6, #11]
     97c:	4311      	orrs	r1, r2
     97e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     980:	8933      	ldrh	r3, [r6, #8]
     982:	2bff      	cmp	r3, #255	; 0xff
     984:	d100      	bne.n	988 <usart_init+0x184>
     986:	e082      	b.n	a8e <usart_init+0x28a>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     988:	2280      	movs	r2, #128	; 0x80
     98a:	0452      	lsls	r2, r2, #17
     98c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     98e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     990:	232c      	movs	r3, #44	; 0x2c
     992:	5cf3      	ldrb	r3, [r6, r3]
     994:	2b00      	cmp	r3, #0
     996:	d103      	bne.n	9a0 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     998:	4b53      	ldr	r3, [pc, #332]	; (ae8 <usart_init+0x2e4>)
     99a:	789b      	ldrb	r3, [r3, #2]
     99c:	079b      	lsls	r3, r3, #30
     99e:	d501      	bpl.n	9a4 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     9a0:	2380      	movs	r3, #128	; 0x80
     9a2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     9a4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     9a6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     9a8:	2b00      	cmp	r3, #0
     9aa:	d1fc      	bne.n	9a6 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     9ac:	4643      	mov	r3, r8
     9ae:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     9b0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     9b2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     9b4:	2b00      	cmp	r3, #0
     9b6:	d1fc      	bne.n	9b2 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     9b8:	4643      	mov	r3, r8
     9ba:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     9bc:	ab0e      	add	r3, sp, #56	; 0x38
     9be:	2280      	movs	r2, #128	; 0x80
     9c0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9c2:	2200      	movs	r2, #0
     9c4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     9c6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     9c8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     9ca:	6b33      	ldr	r3, [r6, #48]	; 0x30
     9cc:	930a      	str	r3, [sp, #40]	; 0x28
     9ce:	6b73      	ldr	r3, [r6, #52]	; 0x34
     9d0:	930b      	str	r3, [sp, #44]	; 0x2c
     9d2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     9d4:	930c      	str	r3, [sp, #48]	; 0x30
     9d6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     9d8:	9302      	str	r3, [sp, #8]
     9da:	930d      	str	r3, [sp, #52]	; 0x34
     9dc:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9de:	ad0a      	add	r5, sp, #40	; 0x28
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     9e0:	4e42      	ldr	r6, [pc, #264]	; (aec <usart_init+0x2e8>)
     9e2:	e063      	b.n	aac <usart_init+0x2a8>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     9e4:	2308      	movs	r3, #8
     9e6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     9e8:	3b07      	subs	r3, #7
     9ea:	9307      	str	r3, [sp, #28]
     9ec:	e779      	b.n	8e2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     9ee:	6833      	ldr	r3, [r6, #0]
     9f0:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     9f2:	68f3      	ldr	r3, [r6, #12]
     9f4:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
     9f6:	6973      	ldr	r3, [r6, #20]
     9f8:	469a      	mov	sl, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     9fa:	7e33      	ldrb	r3, [r6, #24]
     9fc:	9305      	str	r3, [sp, #20]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     9fe:	2326      	movs	r3, #38	; 0x26
     a00:	5cf3      	ldrb	r3, [r6, r3]
     a02:	9303      	str	r3, [sp, #12]
	transfer_mode = (uint32_t)config->transfer_mode;
     a04:	6873      	ldr	r3, [r6, #4]
     a06:	4699      	mov	r9, r3
	switch (transfer_mode)
     a08:	2b00      	cmp	r3, #0
     a0a:	d018      	beq.n	a3e <usart_init+0x23a>
     a0c:	2380      	movs	r3, #128	; 0x80
     a0e:	055b      	lsls	r3, r3, #21
     a10:	4599      	cmp	r9, r3
     a12:	d001      	beq.n	a18 <usart_init+0x214>
	enum status_code status_code = STATUS_OK;
     a14:	2000      	movs	r0, #0
     a16:	e025      	b.n	a64 <usart_init+0x260>
			if (!config->use_external_clock) {
     a18:	2327      	movs	r3, #39	; 0x27
     a1a:	5cf3      	ldrb	r3, [r6, r3]
     a1c:	2b00      	cmp	r3, #0
     a1e:	d000      	beq.n	a22 <usart_init+0x21e>
     a20:	e774      	b.n	90c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     a22:	6a33      	ldr	r3, [r6, #32]
     a24:	001f      	movs	r7, r3
     a26:	b2c0      	uxtb	r0, r0
     a28:	4b31      	ldr	r3, [pc, #196]	; (af0 <usart_init+0x2ec>)
     a2a:	4798      	blx	r3
     a2c:	0001      	movs	r1, r0
     a2e:	220e      	movs	r2, #14
     a30:	ab06      	add	r3, sp, #24
     a32:	469c      	mov	ip, r3
     a34:	4462      	add	r2, ip
     a36:	0038      	movs	r0, r7
     a38:	4b2e      	ldr	r3, [pc, #184]	; (af4 <usart_init+0x2f0>)
     a3a:	4798      	blx	r3
     a3c:	e012      	b.n	a64 <usart_init+0x260>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     a3e:	2308      	movs	r3, #8
     a40:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a42:	2300      	movs	r3, #0
     a44:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     a46:	2327      	movs	r3, #39	; 0x27
     a48:	5cf3      	ldrb	r3, [r6, r3]
     a4a:	2b00      	cmp	r3, #0
     a4c:	d00e      	beq.n	a6c <usart_init+0x268>
				status_code =
     a4e:	9b06      	ldr	r3, [sp, #24]
     a50:	9300      	str	r3, [sp, #0]
     a52:	9b07      	ldr	r3, [sp, #28]
     a54:	220e      	movs	r2, #14
     a56:	a906      	add	r1, sp, #24
     a58:	468c      	mov	ip, r1
     a5a:	4462      	add	r2, ip
     a5c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     a5e:	6a30      	ldr	r0, [r6, #32]
     a60:	4f25      	ldr	r7, [pc, #148]	; (af8 <usart_init+0x2f4>)
     a62:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     a64:	2800      	cmp	r0, #0
     a66:	d000      	beq.n	a6a <usart_init+0x266>
     a68:	e6df      	b.n	82a <usart_init+0x26>
     a6a:	e74f      	b.n	90c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     a6c:	6a33      	ldr	r3, [r6, #32]
     a6e:	001f      	movs	r7, r3
     a70:	b2c0      	uxtb	r0, r0
     a72:	4b1f      	ldr	r3, [pc, #124]	; (af0 <usart_init+0x2ec>)
     a74:	4798      	blx	r3
     a76:	0001      	movs	r1, r0
				status_code =
     a78:	9b06      	ldr	r3, [sp, #24]
     a7a:	9300      	str	r3, [sp, #0]
     a7c:	9b07      	ldr	r3, [sp, #28]
     a7e:	220e      	movs	r2, #14
     a80:	a806      	add	r0, sp, #24
     a82:	4684      	mov	ip, r0
     a84:	4462      	add	r2, ip
     a86:	0038      	movs	r0, r7
     a88:	4f1b      	ldr	r7, [pc, #108]	; (af8 <usart_init+0x2f4>)
     a8a:	47b8      	blx	r7
     a8c:	e7ea      	b.n	a64 <usart_init+0x260>
		if(config->lin_slave_enable) {
     a8e:	7ef3      	ldrb	r3, [r6, #27]
     a90:	2b00      	cmp	r3, #0
     a92:	d100      	bne.n	a96 <usart_init+0x292>
     a94:	e77c      	b.n	990 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     a96:	2380      	movs	r3, #128	; 0x80
     a98:	04db      	lsls	r3, r3, #19
     a9a:	431f      	orrs	r7, r3
     a9c:	e778      	b.n	990 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a9e:	0020      	movs	r0, r4
     aa0:	4b16      	ldr	r3, [pc, #88]	; (afc <usart_init+0x2f8>)
     aa2:	4798      	blx	r3
     aa4:	e007      	b.n	ab6 <usart_init+0x2b2>
     aa6:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     aa8:	2f04      	cmp	r7, #4
     aaa:	d00c      	beq.n	ac6 <usart_init+0x2c2>
     aac:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     aae:	00bb      	lsls	r3, r7, #2
     ab0:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     ab2:	2800      	cmp	r0, #0
     ab4:	d0f3      	beq.n	a9e <usart_init+0x29a>
		if (current_pinmux != PINMUX_UNUSED) {
     ab6:	1c43      	adds	r3, r0, #1
     ab8:	d0f5      	beq.n	aa6 <usart_init+0x2a2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     aba:	a90e      	add	r1, sp, #56	; 0x38
     abc:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     abe:	0c00      	lsrs	r0, r0, #16
     ac0:	b2c0      	uxtb	r0, r0
     ac2:	47b0      	blx	r6
     ac4:	e7ef      	b.n	aa6 <usart_init+0x2a2>
	return status_code;
     ac6:	2000      	movs	r0, #0
     ac8:	e6af      	b.n	82a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     aca:	2310      	movs	r3, #16
     acc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ace:	2300      	movs	r3, #0
     ad0:	9307      	str	r3, [sp, #28]
     ad2:	e706      	b.n	8e2 <usart_init+0xde>
     ad4:	00000601 	.word	0x00000601
     ad8:	40000400 	.word	0x40000400
     adc:	000010e5 	.word	0x000010e5
     ae0:	00001059 	.word	0x00001059
     ae4:	000004b9 	.word	0x000004b9
     ae8:	41002000 	.word	0x41002000
     aec:	000011dd 	.word	0x000011dd
     af0:	00001101 	.word	0x00001101
     af4:	000003fb 	.word	0x000003fb
     af8:	00000425 	.word	0x00000425
     afc:	00000505 	.word	0x00000505

00000b00 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b00:	79c3      	ldrb	r3, [r0, #7]
		return STATUS_ERR_DENIED;
     b02:	221c      	movs	r2, #28
	if (!(module->transmitter_enabled)) {
     b04:	2b00      	cmp	r3, #0
     b06:	d101      	bne.n	b0c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     b08:	0010      	movs	r0, r2
     b0a:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
     b0c:	6803      	ldr	r3, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     b0e:	7e18      	ldrb	r0, [r3, #24]
		return STATUS_BUSY;
     b10:	3a17      	subs	r2, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     b12:	07c0      	lsls	r0, r0, #31
     b14:	d5f8      	bpl.n	b08 <usart_write_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     b16:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     b18:	2a00      	cmp	r2, #0
     b1a:	d1fc      	bne.n	b16 <usart_write_wait+0x16>
	usart_hw->DATA.reg = tx_data;
     b1c:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     b1e:	2102      	movs	r1, #2
     b20:	7e1a      	ldrb	r2, [r3, #24]
     b22:	420a      	tst	r2, r1
     b24:	d0fc      	beq.n	b20 <usart_write_wait+0x20>
	return STATUS_OK;
     b26:	2200      	movs	r2, #0
     b28:	e7ee      	b.n	b08 <usart_write_wait+0x8>

00000b2a <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     b2a:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     b2c:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     b2e:	2a00      	cmp	r2, #0
     b30:	d101      	bne.n	b36 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     b32:	0018      	movs	r0, r3
     b34:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
     b36:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     b38:	7e10      	ldrb	r0, [r2, #24]
		return STATUS_BUSY;
     b3a:	3b17      	subs	r3, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     b3c:	0740      	lsls	r0, r0, #29
     b3e:	d5f8      	bpl.n	b32 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     b40:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     b42:	2b00      	cmp	r3, #0
     b44:	d1fc      	bne.n	b40 <usart_read_wait+0x16>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b46:	8b53      	ldrh	r3, [r2, #26]
     b48:	b2db      	uxtb	r3, r3
	if (error_code) {
     b4a:	0698      	lsls	r0, r3, #26
     b4c:	d01d      	beq.n	b8a <usart_read_wait+0x60>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     b4e:	0798      	lsls	r0, r3, #30
     b50:	d503      	bpl.n	b5a <usart_read_wait+0x30>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     b52:	2302      	movs	r3, #2
     b54:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     b56:	3318      	adds	r3, #24
     b58:	e7eb      	b.n	b32 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     b5a:	0758      	lsls	r0, r3, #29
     b5c:	d503      	bpl.n	b66 <usart_read_wait+0x3c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     b5e:	2304      	movs	r3, #4
     b60:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     b62:	331a      	adds	r3, #26
     b64:	e7e5      	b.n	b32 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     b66:	07d8      	lsls	r0, r3, #31
     b68:	d503      	bpl.n	b72 <usart_read_wait+0x48>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     b6a:	2301      	movs	r3, #1
     b6c:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     b6e:	3312      	adds	r3, #18
     b70:	e7df      	b.n	b32 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     b72:	06d8      	lsls	r0, r3, #27
     b74:	d503      	bpl.n	b7e <usart_read_wait+0x54>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     b76:	2310      	movs	r3, #16
     b78:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     b7a:	3332      	adds	r3, #50	; 0x32
     b7c:	e7d9      	b.n	b32 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     b7e:	069b      	lsls	r3, r3, #26
     b80:	d503      	bpl.n	b8a <usart_read_wait+0x60>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     b82:	2320      	movs	r3, #32
     b84:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     b86:	3321      	adds	r3, #33	; 0x21
     b88:	e7d3      	b.n	b32 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     b8a:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     b8c:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     b8e:	2300      	movs	r3, #0
     b90:	e7cf      	b.n	b32 <usart_read_wait+0x8>
	...

00000b94 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     b94:	b5f0      	push	{r4, r5, r6, r7, lr}
     b96:	46d6      	mov	lr, sl
     b98:	b500      	push	{lr}
     b9a:	b084      	sub	sp, #16
     b9c:	0004      	movs	r4, r0
     b9e:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     ba0:	2017      	movs	r0, #23
	if (length == 0) {
     ba2:	2a00      	cmp	r2, #0
     ba4:	d103      	bne.n	bae <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
     ba6:	b004      	add	sp, #16
     ba8:	bc04      	pop	{r2}
     baa:	4692      	mov	sl, r2
     bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
     bae:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
     bb0:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
     bb2:	2b00      	cmp	r3, #0
     bb4:	d0f7      	beq.n	ba6 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
     bb6:	6826      	ldr	r6, [r4, #0]
	while (length--) {
     bb8:	3a01      	subs	r2, #1
     bba:	b293      	uxth	r3, r2
     bbc:	469a      	mov	sl, r3
     bbe:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     bc0:	2704      	movs	r7, #4
     bc2:	e019      	b.n	bf8 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
     bc4:	2300      	movs	r3, #0
     bc6:	aa02      	add	r2, sp, #8
     bc8:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
     bca:	1d91      	adds	r1, r2, #6
     bcc:	0020      	movs	r0, r4
     bce:	4b15      	ldr	r3, [pc, #84]	; (c24 <usart_read_buffer_wait+0x90>)
     bd0:	4798      	blx	r3
		if (retval != STATUS_OK) {
     bd2:	2800      	cmp	r0, #0
     bd4:	d1e7      	bne.n	ba6 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
     bd6:	1c69      	adds	r1, r5, #1
     bd8:	b289      	uxth	r1, r1
     bda:	ab02      	add	r3, sp, #8
     bdc:	88db      	ldrh	r3, [r3, #6]
     bde:	9a01      	ldr	r2, [sp, #4]
     be0:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     be2:	7962      	ldrb	r2, [r4, #5]
     be4:	2a01      	cmp	r2, #1
     be6:	d014      	beq.n	c12 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
     be8:	000d      	movs	r5, r1
	while (length--) {
     bea:	4653      	mov	r3, sl
     bec:	3b01      	subs	r3, #1
     bee:	b29b      	uxth	r3, r3
     bf0:	469a      	mov	sl, r3
     bf2:	4b0d      	ldr	r3, [pc, #52]	; (c28 <usart_read_buffer_wait+0x94>)
     bf4:	459a      	cmp	sl, r3
     bf6:	d0d6      	beq.n	ba6 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     bf8:	7e33      	ldrb	r3, [r6, #24]
     bfa:	423b      	tst	r3, r7
     bfc:	d1e2      	bne.n	bc4 <usart_read_buffer_wait+0x30>
     bfe:	4b0a      	ldr	r3, [pc, #40]	; (c28 <usart_read_buffer_wait+0x94>)
     c00:	7e32      	ldrb	r2, [r6, #24]
     c02:	423a      	tst	r2, r7
     c04:	d1de      	bne.n	bc4 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
     c06:	2b01      	cmp	r3, #1
     c08:	d009      	beq.n	c1e <usart_read_buffer_wait+0x8a>
     c0a:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     c0c:	2b00      	cmp	r3, #0
     c0e:	d1f7      	bne.n	c00 <usart_read_buffer_wait+0x6c>
     c10:	e7d8      	b.n	bc4 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
     c12:	3502      	adds	r5, #2
     c14:	b2ad      	uxth	r5, r5
     c16:	0a1b      	lsrs	r3, r3, #8
     c18:	9a01      	ldr	r2, [sp, #4]
     c1a:	5453      	strb	r3, [r2, r1]
     c1c:	e7e5      	b.n	bea <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
     c1e:	2012      	movs	r0, #18
     c20:	e7c1      	b.n	ba6 <usart_read_buffer_wait+0x12>
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	00000b2b 	.word	0x00000b2b
     c28:	0000ffff 	.word	0x0000ffff

00000c2c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     c2c:	4770      	bx	lr
	...

00000c30 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     c30:	4b0c      	ldr	r3, [pc, #48]	; (c64 <cpu_irq_enter_critical+0x34>)
     c32:	681b      	ldr	r3, [r3, #0]
     c34:	2b00      	cmp	r3, #0
     c36:	d106      	bne.n	c46 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     c38:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     c3c:	2b00      	cmp	r3, #0
     c3e:	d007      	beq.n	c50 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     c40:	2200      	movs	r2, #0
     c42:	4b09      	ldr	r3, [pc, #36]	; (c68 <cpu_irq_enter_critical+0x38>)
     c44:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     c46:	4a07      	ldr	r2, [pc, #28]	; (c64 <cpu_irq_enter_critical+0x34>)
     c48:	6813      	ldr	r3, [r2, #0]
     c4a:	3301      	adds	r3, #1
     c4c:	6013      	str	r3, [r2, #0]
}
     c4e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     c50:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     c52:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     c56:	2200      	movs	r2, #0
     c58:	4b04      	ldr	r3, [pc, #16]	; (c6c <cpu_irq_enter_critical+0x3c>)
     c5a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     c5c:	3201      	adds	r2, #1
     c5e:	4b02      	ldr	r3, [pc, #8]	; (c68 <cpu_irq_enter_critical+0x38>)
     c60:	701a      	strb	r2, [r3, #0]
     c62:	e7f0      	b.n	c46 <cpu_irq_enter_critical+0x16>
     c64:	20000090 	.word	0x20000090
     c68:	20000094 	.word	0x20000094
     c6c:	20000000 	.word	0x20000000

00000c70 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     c70:	4b08      	ldr	r3, [pc, #32]	; (c94 <cpu_irq_leave_critical+0x24>)
     c72:	681a      	ldr	r2, [r3, #0]
     c74:	3a01      	subs	r2, #1
     c76:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     c78:	681b      	ldr	r3, [r3, #0]
     c7a:	2b00      	cmp	r3, #0
     c7c:	d109      	bne.n	c92 <cpu_irq_leave_critical+0x22>
     c7e:	4b06      	ldr	r3, [pc, #24]	; (c98 <cpu_irq_leave_critical+0x28>)
     c80:	781b      	ldrb	r3, [r3, #0]
     c82:	2b00      	cmp	r3, #0
     c84:	d005      	beq.n	c92 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     c86:	2201      	movs	r2, #1
     c88:	4b04      	ldr	r3, [pc, #16]	; (c9c <cpu_irq_leave_critical+0x2c>)
     c8a:	701a      	strb	r2, [r3, #0]
     c8c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c90:	b662      	cpsie	i
	}
}
     c92:	4770      	bx	lr
     c94:	20000090 	.word	0x20000090
     c98:	20000094 	.word	0x20000094
     c9c:	20000000 	.word	0x20000000

00000ca0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     ca0:	b510      	push	{r4, lr}
	switch (clock_source) {
     ca2:	2808      	cmp	r0, #8
     ca4:	d803      	bhi.n	cae <system_clock_source_get_hz+0xe>
     ca6:	0080      	lsls	r0, r0, #2
     ca8:	4b1b      	ldr	r3, [pc, #108]	; (d18 <system_clock_source_get_hz+0x78>)
     caa:	581b      	ldr	r3, [r3, r0]
     cac:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     cae:	2000      	movs	r0, #0
     cb0:	e030      	b.n	d14 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
     cb2:	4b1a      	ldr	r3, [pc, #104]	; (d1c <system_clock_source_get_hz+0x7c>)
     cb4:	6918      	ldr	r0, [r3, #16]
     cb6:	e02d      	b.n	d14 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     cb8:	4b19      	ldr	r3, [pc, #100]	; (d20 <system_clock_source_get_hz+0x80>)
     cba:	6a1b      	ldr	r3, [r3, #32]
     cbc:	059b      	lsls	r3, r3, #22
     cbe:	0f9b      	lsrs	r3, r3, #30
     cc0:	4818      	ldr	r0, [pc, #96]	; (d24 <system_clock_source_get_hz+0x84>)
     cc2:	40d8      	lsrs	r0, r3
     cc4:	e026      	b.n	d14 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
     cc6:	4b15      	ldr	r3, [pc, #84]	; (d1c <system_clock_source_get_hz+0x7c>)
     cc8:	6958      	ldr	r0, [r3, #20]
     cca:	e023      	b.n	d14 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     ccc:	4b13      	ldr	r3, [pc, #76]	; (d1c <system_clock_source_get_hz+0x7c>)
     cce:	681b      	ldr	r3, [r3, #0]
			return 0;
     cd0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     cd2:	079b      	lsls	r3, r3, #30
     cd4:	d51e      	bpl.n	d14 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     cd6:	4912      	ldr	r1, [pc, #72]	; (d20 <system_clock_source_get_hz+0x80>)
     cd8:	2210      	movs	r2, #16
     cda:	68cb      	ldr	r3, [r1, #12]
     cdc:	421a      	tst	r2, r3
     cde:	d0fc      	beq.n	cda <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     ce0:	4b0e      	ldr	r3, [pc, #56]	; (d1c <system_clock_source_get_hz+0x7c>)
     ce2:	681b      	ldr	r3, [r3, #0]
     ce4:	075b      	lsls	r3, r3, #29
     ce6:	d401      	bmi.n	cec <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     ce8:	480f      	ldr	r0, [pc, #60]	; (d28 <system_clock_source_get_hz+0x88>)
     cea:	e013      	b.n	d14 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     cec:	2000      	movs	r0, #0
     cee:	4b0f      	ldr	r3, [pc, #60]	; (d2c <system_clock_source_get_hz+0x8c>)
     cf0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     cf2:	4b0a      	ldr	r3, [pc, #40]	; (d1c <system_clock_source_get_hz+0x7c>)
     cf4:	689b      	ldr	r3, [r3, #8]
     cf6:	041b      	lsls	r3, r3, #16
     cf8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     cfa:	4358      	muls	r0, r3
     cfc:	e00a      	b.n	d14 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     cfe:	2350      	movs	r3, #80	; 0x50
     d00:	4a07      	ldr	r2, [pc, #28]	; (d20 <system_clock_source_get_hz+0x80>)
     d02:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     d04:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d06:	075b      	lsls	r3, r3, #29
     d08:	d504      	bpl.n	d14 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
     d0a:	4b04      	ldr	r3, [pc, #16]	; (d1c <system_clock_source_get_hz+0x7c>)
     d0c:	68d8      	ldr	r0, [r3, #12]
     d0e:	e001      	b.n	d14 <system_clock_source_get_hz+0x74>
		return 32768UL;
     d10:	2080      	movs	r0, #128	; 0x80
     d12:	0200      	lsls	r0, r0, #8
	}
}
     d14:	bd10      	pop	{r4, pc}
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	000028c8 	.word	0x000028c8
     d1c:	20000098 	.word	0x20000098
     d20:	40000800 	.word	0x40000800
     d24:	007a1200 	.word	0x007a1200
     d28:	02dc6c00 	.word	0x02dc6c00
     d2c:	00001101 	.word	0x00001101

00000d30 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     d30:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     d32:	490c      	ldr	r1, [pc, #48]	; (d64 <system_clock_source_osc8m_set_config+0x34>)
     d34:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     d36:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     d38:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     d3a:	7840      	ldrb	r0, [r0, #1]
     d3c:	2201      	movs	r2, #1
     d3e:	4010      	ands	r0, r2
     d40:	0180      	lsls	r0, r0, #6
     d42:	2640      	movs	r6, #64	; 0x40
     d44:	43b3      	bics	r3, r6
     d46:	4303      	orrs	r3, r0
     d48:	402a      	ands	r2, r5
     d4a:	01d2      	lsls	r2, r2, #7
     d4c:	2080      	movs	r0, #128	; 0x80
     d4e:	4383      	bics	r3, r0
     d50:	4313      	orrs	r3, r2
     d52:	2203      	movs	r2, #3
     d54:	4022      	ands	r2, r4
     d56:	0212      	lsls	r2, r2, #8
     d58:	4803      	ldr	r0, [pc, #12]	; (d68 <system_clock_source_osc8m_set_config+0x38>)
     d5a:	4003      	ands	r3, r0
     d5c:	4313      	orrs	r3, r2
     d5e:	620b      	str	r3, [r1, #32]
}
     d60:	bd70      	pop	{r4, r5, r6, pc}
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	40000800 	.word	0x40000800
     d68:	fffffcff 	.word	0xfffffcff

00000d6c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     d6c:	2808      	cmp	r0, #8
     d6e:	d803      	bhi.n	d78 <system_clock_source_enable+0xc>
     d70:	0080      	lsls	r0, r0, #2
     d72:	4b25      	ldr	r3, [pc, #148]	; (e08 <system_clock_source_enable+0x9c>)
     d74:	581b      	ldr	r3, [r3, r0]
     d76:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     d78:	2017      	movs	r0, #23
     d7a:	e044      	b.n	e06 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     d7c:	4a23      	ldr	r2, [pc, #140]	; (e0c <system_clock_source_enable+0xa0>)
     d7e:	6a13      	ldr	r3, [r2, #32]
     d80:	2102      	movs	r1, #2
     d82:	430b      	orrs	r3, r1
     d84:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     d86:	2000      	movs	r0, #0
     d88:	e03d      	b.n	e06 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     d8a:	4a20      	ldr	r2, [pc, #128]	; (e0c <system_clock_source_enable+0xa0>)
     d8c:	6993      	ldr	r3, [r2, #24]
     d8e:	2102      	movs	r1, #2
     d90:	430b      	orrs	r3, r1
     d92:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     d94:	2000      	movs	r0, #0
		break;
     d96:	e036      	b.n	e06 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     d98:	4a1c      	ldr	r2, [pc, #112]	; (e0c <system_clock_source_enable+0xa0>)
     d9a:	8a13      	ldrh	r3, [r2, #16]
     d9c:	2102      	movs	r1, #2
     d9e:	430b      	orrs	r3, r1
     da0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     da2:	2000      	movs	r0, #0
		break;
     da4:	e02f      	b.n	e06 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     da6:	4a19      	ldr	r2, [pc, #100]	; (e0c <system_clock_source_enable+0xa0>)
     da8:	8a93      	ldrh	r3, [r2, #20]
     daa:	2102      	movs	r1, #2
     dac:	430b      	orrs	r3, r1
     dae:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     db0:	2000      	movs	r0, #0
		break;
     db2:	e028      	b.n	e06 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     db4:	4916      	ldr	r1, [pc, #88]	; (e10 <system_clock_source_enable+0xa4>)
     db6:	680b      	ldr	r3, [r1, #0]
     db8:	2202      	movs	r2, #2
     dba:	4313      	orrs	r3, r2
     dbc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     dbe:	4b13      	ldr	r3, [pc, #76]	; (e0c <system_clock_source_enable+0xa0>)
     dc0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     dc2:	0019      	movs	r1, r3
     dc4:	320e      	adds	r2, #14
     dc6:	68cb      	ldr	r3, [r1, #12]
     dc8:	421a      	tst	r2, r3
     dca:	d0fc      	beq.n	dc6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     dcc:	4a10      	ldr	r2, [pc, #64]	; (e10 <system_clock_source_enable+0xa4>)
     dce:	6891      	ldr	r1, [r2, #8]
     dd0:	4b0e      	ldr	r3, [pc, #56]	; (e0c <system_clock_source_enable+0xa0>)
     dd2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     dd4:	6852      	ldr	r2, [r2, #4]
     dd6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     dd8:	2200      	movs	r2, #0
     dda:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ddc:	0019      	movs	r1, r3
     dde:	3210      	adds	r2, #16
     de0:	68cb      	ldr	r3, [r1, #12]
     de2:	421a      	tst	r2, r3
     de4:	d0fc      	beq.n	de0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     de6:	4b0a      	ldr	r3, [pc, #40]	; (e10 <system_clock_source_enable+0xa4>)
     de8:	681b      	ldr	r3, [r3, #0]
     dea:	b29b      	uxth	r3, r3
     dec:	4a07      	ldr	r2, [pc, #28]	; (e0c <system_clock_source_enable+0xa0>)
     dee:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     df0:	2000      	movs	r0, #0
     df2:	e008      	b.n	e06 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     df4:	4905      	ldr	r1, [pc, #20]	; (e0c <system_clock_source_enable+0xa0>)
     df6:	2244      	movs	r2, #68	; 0x44
     df8:	5c8b      	ldrb	r3, [r1, r2]
     dfa:	2002      	movs	r0, #2
     dfc:	4303      	orrs	r3, r0
     dfe:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     e00:	2000      	movs	r0, #0
		break;
     e02:	e000      	b.n	e06 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     e04:	2000      	movs	r0, #0
}
     e06:	4770      	bx	lr
     e08:	000028ec 	.word	0x000028ec
     e0c:	40000800 	.word	0x40000800
     e10:	20000098 	.word	0x20000098

00000e14 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     e14:	b530      	push	{r4, r5, lr}
     e16:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e18:	22c2      	movs	r2, #194	; 0xc2
     e1a:	00d2      	lsls	r2, r2, #3
     e1c:	4b1a      	ldr	r3, [pc, #104]	; (e88 <system_clock_init+0x74>)
     e1e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     e20:	4a1a      	ldr	r2, [pc, #104]	; (e8c <system_clock_init+0x78>)
     e22:	6853      	ldr	r3, [r2, #4]
     e24:	211e      	movs	r1, #30
     e26:	438b      	bics	r3, r1
     e28:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     e2a:	2301      	movs	r3, #1
     e2c:	466a      	mov	r2, sp
     e2e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e30:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     e32:	4d17      	ldr	r5, [pc, #92]	; (e90 <system_clock_init+0x7c>)
     e34:	b2e0      	uxtb	r0, r4
     e36:	4669      	mov	r1, sp
     e38:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e3a:	3401      	adds	r4, #1
     e3c:	2c25      	cmp	r4, #37	; 0x25
     e3e:	d1f9      	bne.n	e34 <system_clock_init+0x20>
	config->run_in_standby  = false;
     e40:	a803      	add	r0, sp, #12
     e42:	2400      	movs	r4, #0
     e44:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     e46:	2501      	movs	r5, #1
     e48:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     e4a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     e4c:	4b11      	ldr	r3, [pc, #68]	; (e94 <system_clock_init+0x80>)
     e4e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     e50:	2006      	movs	r0, #6
     e52:	4b11      	ldr	r3, [pc, #68]	; (e98 <system_clock_init+0x84>)
     e54:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     e56:	4b11      	ldr	r3, [pc, #68]	; (e9c <system_clock_init+0x88>)
     e58:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     e5a:	4b11      	ldr	r3, [pc, #68]	; (ea0 <system_clock_init+0x8c>)
     e5c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     e5e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     e60:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     e62:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     e64:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     e66:	466b      	mov	r3, sp
     e68:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     e6a:	2306      	movs	r3, #6
     e6c:	466a      	mov	r2, sp
     e6e:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     e70:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     e72:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     e74:	4669      	mov	r1, sp
     e76:	2000      	movs	r0, #0
     e78:	4b0a      	ldr	r3, [pc, #40]	; (ea4 <system_clock_init+0x90>)
     e7a:	4798      	blx	r3
     e7c:	2000      	movs	r0, #0
     e7e:	4b0a      	ldr	r3, [pc, #40]	; (ea8 <system_clock_init+0x94>)
     e80:	4798      	blx	r3
#endif
}
     e82:	b005      	add	sp, #20
     e84:	bd30      	pop	{r4, r5, pc}
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	40000800 	.word	0x40000800
     e8c:	41004000 	.word	0x41004000
     e90:	000010e5 	.word	0x000010e5
     e94:	00000d31 	.word	0x00000d31
     e98:	00000d6d 	.word	0x00000d6d
     e9c:	00000ead 	.word	0x00000ead
     ea0:	40000400 	.word	0x40000400
     ea4:	00000ed1 	.word	0x00000ed1
     ea8:	00000f89 	.word	0x00000f89

00000eac <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     eac:	4a06      	ldr	r2, [pc, #24]	; (ec8 <system_gclk_init+0x1c>)
     eae:	6993      	ldr	r3, [r2, #24]
     eb0:	2108      	movs	r1, #8
     eb2:	430b      	orrs	r3, r1
     eb4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     eb6:	2201      	movs	r2, #1
     eb8:	4b04      	ldr	r3, [pc, #16]	; (ecc <system_gclk_init+0x20>)
     eba:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     ebc:	0019      	movs	r1, r3
     ebe:	780b      	ldrb	r3, [r1, #0]
     ec0:	4213      	tst	r3, r2
     ec2:	d1fc      	bne.n	ebe <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     ec4:	4770      	bx	lr
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	40000400 	.word	0x40000400
     ecc:	40000c00 	.word	0x40000c00

00000ed0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     ed0:	b570      	push	{r4, r5, r6, lr}
     ed2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     ed4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     ed6:	780d      	ldrb	r5, [r1, #0]
     ed8:	022d      	lsls	r5, r5, #8
     eda:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     edc:	784b      	ldrb	r3, [r1, #1]
     ede:	2b00      	cmp	r3, #0
     ee0:	d002      	beq.n	ee8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     ee2:	2380      	movs	r3, #128	; 0x80
     ee4:	02db      	lsls	r3, r3, #11
     ee6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     ee8:	7a4b      	ldrb	r3, [r1, #9]
     eea:	2b00      	cmp	r3, #0
     eec:	d002      	beq.n	ef4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     eee:	2380      	movs	r3, #128	; 0x80
     ef0:	031b      	lsls	r3, r3, #12
     ef2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     ef4:	6848      	ldr	r0, [r1, #4]
     ef6:	2801      	cmp	r0, #1
     ef8:	d910      	bls.n	f1c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     efa:	1e43      	subs	r3, r0, #1
     efc:	4218      	tst	r0, r3
     efe:	d134      	bne.n	f6a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     f00:	2802      	cmp	r0, #2
     f02:	d930      	bls.n	f66 <system_gclk_gen_set_config+0x96>
     f04:	2302      	movs	r3, #2
     f06:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     f08:	3201      	adds	r2, #1
						mask <<= 1) {
     f0a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     f0c:	4298      	cmp	r0, r3
     f0e:	d8fb      	bhi.n	f08 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     f10:	0212      	lsls	r2, r2, #8
     f12:	4332      	orrs	r2, r6
     f14:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     f16:	2380      	movs	r3, #128	; 0x80
     f18:	035b      	lsls	r3, r3, #13
     f1a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     f1c:	7a0b      	ldrb	r3, [r1, #8]
     f1e:	2b00      	cmp	r3, #0
     f20:	d002      	beq.n	f28 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     f22:	2380      	movs	r3, #128	; 0x80
     f24:	039b      	lsls	r3, r3, #14
     f26:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f28:	4a13      	ldr	r2, [pc, #76]	; (f78 <system_gclk_gen_set_config+0xa8>)
     f2a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     f2c:	b25b      	sxtb	r3, r3
     f2e:	2b00      	cmp	r3, #0
     f30:	dbfb      	blt.n	f2a <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f32:	4b12      	ldr	r3, [pc, #72]	; (f7c <system_gclk_gen_set_config+0xac>)
     f34:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     f36:	4b12      	ldr	r3, [pc, #72]	; (f80 <system_gclk_gen_set_config+0xb0>)
     f38:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f3a:	4a0f      	ldr	r2, [pc, #60]	; (f78 <system_gclk_gen_set_config+0xa8>)
     f3c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     f3e:	b25b      	sxtb	r3, r3
     f40:	2b00      	cmp	r3, #0
     f42:	dbfb      	blt.n	f3c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     f44:	4b0c      	ldr	r3, [pc, #48]	; (f78 <system_gclk_gen_set_config+0xa8>)
     f46:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f48:	001a      	movs	r2, r3
     f4a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     f4c:	b25b      	sxtb	r3, r3
     f4e:	2b00      	cmp	r3, #0
     f50:	dbfb      	blt.n	f4a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     f52:	4a09      	ldr	r2, [pc, #36]	; (f78 <system_gclk_gen_set_config+0xa8>)
     f54:	6853      	ldr	r3, [r2, #4]
     f56:	2180      	movs	r1, #128	; 0x80
     f58:	0249      	lsls	r1, r1, #9
     f5a:	400b      	ands	r3, r1
     f5c:	431d      	orrs	r5, r3
     f5e:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f60:	4b08      	ldr	r3, [pc, #32]	; (f84 <system_gclk_gen_set_config+0xb4>)
     f62:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f64:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     f66:	2200      	movs	r2, #0
     f68:	e7d2      	b.n	f10 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     f6a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     f6c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     f6e:	2380      	movs	r3, #128	; 0x80
     f70:	029b      	lsls	r3, r3, #10
     f72:	431d      	orrs	r5, r3
     f74:	e7d2      	b.n	f1c <system_gclk_gen_set_config+0x4c>
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	40000c00 	.word	0x40000c00
     f7c:	00000c31 	.word	0x00000c31
     f80:	40000c08 	.word	0x40000c08
     f84:	00000c71 	.word	0x00000c71

00000f88 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     f88:	b510      	push	{r4, lr}
     f8a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f8c:	4a0b      	ldr	r2, [pc, #44]	; (fbc <system_gclk_gen_enable+0x34>)
     f8e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f90:	b25b      	sxtb	r3, r3
     f92:	2b00      	cmp	r3, #0
     f94:	dbfb      	blt.n	f8e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     f96:	4b0a      	ldr	r3, [pc, #40]	; (fc0 <system_gclk_gen_enable+0x38>)
     f98:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f9a:	4b0a      	ldr	r3, [pc, #40]	; (fc4 <system_gclk_gen_enable+0x3c>)
     f9c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f9e:	4a07      	ldr	r2, [pc, #28]	; (fbc <system_gclk_gen_enable+0x34>)
     fa0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fa2:	b25b      	sxtb	r3, r3
     fa4:	2b00      	cmp	r3, #0
     fa6:	dbfb      	blt.n	fa0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     fa8:	4a04      	ldr	r2, [pc, #16]	; (fbc <system_gclk_gen_enable+0x34>)
     faa:	6851      	ldr	r1, [r2, #4]
     fac:	2380      	movs	r3, #128	; 0x80
     fae:	025b      	lsls	r3, r3, #9
     fb0:	430b      	orrs	r3, r1
     fb2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     fb4:	4b04      	ldr	r3, [pc, #16]	; (fc8 <system_gclk_gen_enable+0x40>)
     fb6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fb8:	bd10      	pop	{r4, pc}
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	40000c00 	.word	0x40000c00
     fc0:	00000c31 	.word	0x00000c31
     fc4:	40000c04 	.word	0x40000c04
     fc8:	00000c71 	.word	0x00000c71

00000fcc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     fcc:	b570      	push	{r4, r5, r6, lr}
     fce:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fd0:	4a1a      	ldr	r2, [pc, #104]	; (103c <STACK_SIZE+0x3c>)
     fd2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fd4:	b25b      	sxtb	r3, r3
     fd6:	2b00      	cmp	r3, #0
     fd8:	dbfb      	blt.n	fd2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     fda:	4b19      	ldr	r3, [pc, #100]	; (1040 <STACK_SIZE+0x40>)
     fdc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     fde:	4b19      	ldr	r3, [pc, #100]	; (1044 <STACK_SIZE+0x44>)
     fe0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fe2:	4a16      	ldr	r2, [pc, #88]	; (103c <STACK_SIZE+0x3c>)
     fe4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fe6:	b25b      	sxtb	r3, r3
     fe8:	2b00      	cmp	r3, #0
     fea:	dbfb      	blt.n	fe4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     fec:	4e13      	ldr	r6, [pc, #76]	; (103c <STACK_SIZE+0x3c>)
     fee:	6870      	ldr	r0, [r6, #4]
     ff0:	04c0      	lsls	r0, r0, #19
     ff2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     ff4:	4b14      	ldr	r3, [pc, #80]	; (1048 <STACK_SIZE+0x48>)
     ff6:	4798      	blx	r3
     ff8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ffa:	4b12      	ldr	r3, [pc, #72]	; (1044 <STACK_SIZE+0x44>)
     ffc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     ffe:	6876      	ldr	r6, [r6, #4]
    1000:	02f6      	lsls	r6, r6, #11
    1002:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1004:	4b11      	ldr	r3, [pc, #68]	; (104c <STACK_SIZE+0x4c>)
    1006:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1008:	4a0c      	ldr	r2, [pc, #48]	; (103c <STACK_SIZE+0x3c>)
    100a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    100c:	b25b      	sxtb	r3, r3
    100e:	2b00      	cmp	r3, #0
    1010:	dbfb      	blt.n	100a <STACK_SIZE+0xa>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1012:	4b0a      	ldr	r3, [pc, #40]	; (103c <STACK_SIZE+0x3c>)
    1014:	689c      	ldr	r4, [r3, #8]
    1016:	0224      	lsls	r4, r4, #8
    1018:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    101a:	4b0d      	ldr	r3, [pc, #52]	; (1050 <STACK_SIZE+0x50>)
    101c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    101e:	2e00      	cmp	r6, #0
    1020:	d107      	bne.n	1032 <STACK_SIZE+0x32>
    1022:	2c01      	cmp	r4, #1
    1024:	d907      	bls.n	1036 <STACK_SIZE+0x36>
		gen_input_hz /= divider;
    1026:	0021      	movs	r1, r4
    1028:	0028      	movs	r0, r5
    102a:	4b0a      	ldr	r3, [pc, #40]	; (1054 <STACK_SIZE+0x54>)
    102c:	4798      	blx	r3
    102e:	0005      	movs	r5, r0
    1030:	e001      	b.n	1036 <STACK_SIZE+0x36>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1032:	3401      	adds	r4, #1
    1034:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1036:	0028      	movs	r0, r5
    1038:	bd70      	pop	{r4, r5, r6, pc}
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	40000c00 	.word	0x40000c00
    1040:	00000c31 	.word	0x00000c31
    1044:	40000c04 	.word	0x40000c04
    1048:	00000ca1 	.word	0x00000ca1
    104c:	40000c08 	.word	0x40000c08
    1050:	00000c71 	.word	0x00000c71
    1054:	00001525 	.word	0x00001525

00001058 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1058:	b510      	push	{r4, lr}
    105a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    105c:	4b06      	ldr	r3, [pc, #24]	; (1078 <system_gclk_chan_enable+0x20>)
    105e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1060:	4b06      	ldr	r3, [pc, #24]	; (107c <system_gclk_chan_enable+0x24>)
    1062:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1064:	4a06      	ldr	r2, [pc, #24]	; (1080 <system_gclk_chan_enable+0x28>)
    1066:	8853      	ldrh	r3, [r2, #2]
    1068:	2180      	movs	r1, #128	; 0x80
    106a:	01c9      	lsls	r1, r1, #7
    106c:	430b      	orrs	r3, r1
    106e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1070:	4b04      	ldr	r3, [pc, #16]	; (1084 <system_gclk_chan_enable+0x2c>)
    1072:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1074:	bd10      	pop	{r4, pc}
    1076:	46c0      	nop			; (mov r8, r8)
    1078:	00000c31 	.word	0x00000c31
    107c:	40000c02 	.word	0x40000c02
    1080:	40000c00 	.word	0x40000c00
    1084:	00000c71 	.word	0x00000c71

00001088 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1088:	b510      	push	{r4, lr}
    108a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    108c:	4b0f      	ldr	r3, [pc, #60]	; (10cc <system_gclk_chan_disable+0x44>)
    108e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1090:	4b0f      	ldr	r3, [pc, #60]	; (10d0 <system_gclk_chan_disable+0x48>)
    1092:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1094:	4a0f      	ldr	r2, [pc, #60]	; (10d4 <system_gclk_chan_disable+0x4c>)
    1096:	8853      	ldrh	r3, [r2, #2]
    1098:	051b      	lsls	r3, r3, #20
    109a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    109c:	8853      	ldrh	r3, [r2, #2]
    109e:	490e      	ldr	r1, [pc, #56]	; (10d8 <system_gclk_chan_disable+0x50>)
    10a0:	400b      	ands	r3, r1
    10a2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    10a4:	8853      	ldrh	r3, [r2, #2]
    10a6:	490d      	ldr	r1, [pc, #52]	; (10dc <system_gclk_chan_disable+0x54>)
    10a8:	400b      	ands	r3, r1
    10aa:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    10ac:	0011      	movs	r1, r2
    10ae:	2280      	movs	r2, #128	; 0x80
    10b0:	01d2      	lsls	r2, r2, #7
    10b2:	884b      	ldrh	r3, [r1, #2]
    10b4:	4213      	tst	r3, r2
    10b6:	d1fc      	bne.n	10b2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    10b8:	4906      	ldr	r1, [pc, #24]	; (10d4 <system_gclk_chan_disable+0x4c>)
    10ba:	884a      	ldrh	r2, [r1, #2]
    10bc:	0203      	lsls	r3, r0, #8
    10be:	4806      	ldr	r0, [pc, #24]	; (10d8 <system_gclk_chan_disable+0x50>)
    10c0:	4002      	ands	r2, r0
    10c2:	4313      	orrs	r3, r2
    10c4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    10c6:	4b06      	ldr	r3, [pc, #24]	; (10e0 <system_gclk_chan_disable+0x58>)
    10c8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10ca:	bd10      	pop	{r4, pc}
    10cc:	00000c31 	.word	0x00000c31
    10d0:	40000c02 	.word	0x40000c02
    10d4:	40000c00 	.word	0x40000c00
    10d8:	fffff0ff 	.word	0xfffff0ff
    10dc:	ffffbfff 	.word	0xffffbfff
    10e0:	00000c71 	.word	0x00000c71

000010e4 <system_gclk_chan_set_config>:
{
    10e4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    10e6:	780c      	ldrb	r4, [r1, #0]
    10e8:	0224      	lsls	r4, r4, #8
    10ea:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    10ec:	4b02      	ldr	r3, [pc, #8]	; (10f8 <system_gclk_chan_set_config+0x14>)
    10ee:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    10f0:	b2a4      	uxth	r4, r4
    10f2:	4b02      	ldr	r3, [pc, #8]	; (10fc <system_gclk_chan_set_config+0x18>)
    10f4:	805c      	strh	r4, [r3, #2]
}
    10f6:	bd10      	pop	{r4, pc}
    10f8:	00001089 	.word	0x00001089
    10fc:	40000c00 	.word	0x40000c00

00001100 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1100:	b510      	push	{r4, lr}
    1102:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1104:	4b06      	ldr	r3, [pc, #24]	; (1120 <system_gclk_chan_get_hz+0x20>)
    1106:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1108:	4b06      	ldr	r3, [pc, #24]	; (1124 <system_gclk_chan_get_hz+0x24>)
    110a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    110c:	4b06      	ldr	r3, [pc, #24]	; (1128 <system_gclk_chan_get_hz+0x28>)
    110e:	885c      	ldrh	r4, [r3, #2]
    1110:	0524      	lsls	r4, r4, #20
    1112:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1114:	4b05      	ldr	r3, [pc, #20]	; (112c <system_gclk_chan_get_hz+0x2c>)
    1116:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1118:	0020      	movs	r0, r4
    111a:	4b05      	ldr	r3, [pc, #20]	; (1130 <system_gclk_chan_get_hz+0x30>)
    111c:	4798      	blx	r3
}
    111e:	bd10      	pop	{r4, pc}
    1120:	00000c31 	.word	0x00000c31
    1124:	40000c02 	.word	0x40000c02
    1128:	40000c00 	.word	0x40000c00
    112c:	00000c71 	.word	0x00000c71
    1130:	00000fcd 	.word	0x00000fcd

00001134 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1134:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1136:	78d3      	ldrb	r3, [r2, #3]
    1138:	2b00      	cmp	r3, #0
    113a:	d135      	bne.n	11a8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    113c:	7813      	ldrb	r3, [r2, #0]
    113e:	2b80      	cmp	r3, #128	; 0x80
    1140:	d029      	beq.n	1196 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1142:	061b      	lsls	r3, r3, #24
    1144:	2480      	movs	r4, #128	; 0x80
    1146:	0264      	lsls	r4, r4, #9
    1148:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    114a:	7854      	ldrb	r4, [r2, #1]
    114c:	2502      	movs	r5, #2
    114e:	43ac      	bics	r4, r5
    1150:	d106      	bne.n	1160 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1152:	7894      	ldrb	r4, [r2, #2]
    1154:	2c00      	cmp	r4, #0
    1156:	d120      	bne.n	119a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1158:	2480      	movs	r4, #128	; 0x80
    115a:	02a4      	lsls	r4, r4, #10
    115c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    115e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1160:	7854      	ldrb	r4, [r2, #1]
    1162:	3c01      	subs	r4, #1
    1164:	2c01      	cmp	r4, #1
    1166:	d91c      	bls.n	11a2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1168:	040d      	lsls	r5, r1, #16
    116a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    116c:	24a0      	movs	r4, #160	; 0xa0
    116e:	05e4      	lsls	r4, r4, #23
    1170:	432c      	orrs	r4, r5
    1172:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1174:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1176:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1178:	24d0      	movs	r4, #208	; 0xd0
    117a:	0624      	lsls	r4, r4, #24
    117c:	432c      	orrs	r4, r5
    117e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1180:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1182:	78d4      	ldrb	r4, [r2, #3]
    1184:	2c00      	cmp	r4, #0
    1186:	d122      	bne.n	11ce <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1188:	035b      	lsls	r3, r3, #13
    118a:	d51c      	bpl.n	11c6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    118c:	7893      	ldrb	r3, [r2, #2]
    118e:	2b01      	cmp	r3, #1
    1190:	d01e      	beq.n	11d0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1192:	6141      	str	r1, [r0, #20]
    1194:	e017      	b.n	11c6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1196:	2300      	movs	r3, #0
    1198:	e7d7      	b.n	114a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    119a:	24c0      	movs	r4, #192	; 0xc0
    119c:	02e4      	lsls	r4, r4, #11
    119e:	4323      	orrs	r3, r4
    11a0:	e7dd      	b.n	115e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    11a2:	4c0d      	ldr	r4, [pc, #52]	; (11d8 <_system_pinmux_config+0xa4>)
    11a4:	4023      	ands	r3, r4
    11a6:	e7df      	b.n	1168 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    11a8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    11aa:	040c      	lsls	r4, r1, #16
    11ac:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    11ae:	23a0      	movs	r3, #160	; 0xa0
    11b0:	05db      	lsls	r3, r3, #23
    11b2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11b4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    11b6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    11b8:	23d0      	movs	r3, #208	; 0xd0
    11ba:	061b      	lsls	r3, r3, #24
    11bc:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11be:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    11c0:	78d3      	ldrb	r3, [r2, #3]
    11c2:	2b00      	cmp	r3, #0
    11c4:	d103      	bne.n	11ce <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    11c6:	7853      	ldrb	r3, [r2, #1]
    11c8:	3b01      	subs	r3, #1
    11ca:	2b01      	cmp	r3, #1
    11cc:	d902      	bls.n	11d4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    11ce:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    11d0:	6181      	str	r1, [r0, #24]
    11d2:	e7f8      	b.n	11c6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    11d4:	6081      	str	r1, [r0, #8]
}
    11d6:	e7fa      	b.n	11ce <_system_pinmux_config+0x9a>
    11d8:	fffbffff 	.word	0xfffbffff

000011dc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    11dc:	b510      	push	{r4, lr}
    11de:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11e0:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    11e2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    11e4:	2900      	cmp	r1, #0
    11e6:	d104      	bne.n	11f2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    11e8:	0943      	lsrs	r3, r0, #5
    11ea:	01db      	lsls	r3, r3, #7
    11ec:	4905      	ldr	r1, [pc, #20]	; (1204 <system_pinmux_pin_set_config+0x28>)
    11ee:	468c      	mov	ip, r1
    11f0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    11f2:	241f      	movs	r4, #31
    11f4:	4020      	ands	r0, r4
    11f6:	2101      	movs	r1, #1
    11f8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    11fa:	0018      	movs	r0, r3
    11fc:	4b02      	ldr	r3, [pc, #8]	; (1208 <system_pinmux_pin_set_config+0x2c>)
    11fe:	4798      	blx	r3
}
    1200:	bd10      	pop	{r4, pc}
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	41004400 	.word	0x41004400
    1208:	00001135 	.word	0x00001135

0000120c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    120c:	4770      	bx	lr
	...

00001210 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1210:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1212:	4b05      	ldr	r3, [pc, #20]	; (1228 <system_init+0x18>)
    1214:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1216:	4b05      	ldr	r3, [pc, #20]	; (122c <system_init+0x1c>)
    1218:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    121a:	4b05      	ldr	r3, [pc, #20]	; (1230 <system_init+0x20>)
    121c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    121e:	4b05      	ldr	r3, [pc, #20]	; (1234 <system_init+0x24>)
    1220:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1222:	4b05      	ldr	r3, [pc, #20]	; (1238 <system_init+0x28>)
    1224:	4798      	blx	r3
}
    1226:	bd10      	pop	{r4, pc}
    1228:	00000e15 	.word	0x00000e15
    122c:	00000c2d 	.word	0x00000c2d
    1230:	0000120d 	.word	0x0000120d
    1234:	0000120d 	.word	0x0000120d
    1238:	0000120d 	.word	0x0000120d

0000123c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    123c:	e7fe      	b.n	123c <Dummy_Handler>
	...

00001240 <Reset_Handler>:
{
    1240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1242:	4a2a      	ldr	r2, [pc, #168]	; (12ec <Reset_Handler+0xac>)
    1244:	4b2a      	ldr	r3, [pc, #168]	; (12f0 <Reset_Handler+0xb0>)
    1246:	429a      	cmp	r2, r3
    1248:	d011      	beq.n	126e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    124a:	001a      	movs	r2, r3
    124c:	4b29      	ldr	r3, [pc, #164]	; (12f4 <Reset_Handler+0xb4>)
    124e:	429a      	cmp	r2, r3
    1250:	d20d      	bcs.n	126e <Reset_Handler+0x2e>
    1252:	4a29      	ldr	r2, [pc, #164]	; (12f8 <Reset_Handler+0xb8>)
    1254:	3303      	adds	r3, #3
    1256:	1a9b      	subs	r3, r3, r2
    1258:	089b      	lsrs	r3, r3, #2
    125a:	3301      	adds	r3, #1
    125c:	009b      	lsls	r3, r3, #2
    125e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1260:	4823      	ldr	r0, [pc, #140]	; (12f0 <Reset_Handler+0xb0>)
    1262:	4922      	ldr	r1, [pc, #136]	; (12ec <Reset_Handler+0xac>)
    1264:	588c      	ldr	r4, [r1, r2]
    1266:	5084      	str	r4, [r0, r2]
    1268:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    126a:	429a      	cmp	r2, r3
    126c:	d1fa      	bne.n	1264 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    126e:	4a23      	ldr	r2, [pc, #140]	; (12fc <Reset_Handler+0xbc>)
    1270:	4b23      	ldr	r3, [pc, #140]	; (1300 <Reset_Handler+0xc0>)
    1272:	429a      	cmp	r2, r3
    1274:	d20a      	bcs.n	128c <Reset_Handler+0x4c>
    1276:	43d3      	mvns	r3, r2
    1278:	4921      	ldr	r1, [pc, #132]	; (1300 <Reset_Handler+0xc0>)
    127a:	185b      	adds	r3, r3, r1
    127c:	2103      	movs	r1, #3
    127e:	438b      	bics	r3, r1
    1280:	3304      	adds	r3, #4
    1282:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1284:	2100      	movs	r1, #0
    1286:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1288:	4293      	cmp	r3, r2
    128a:	d1fc      	bne.n	1286 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    128c:	4a1d      	ldr	r2, [pc, #116]	; (1304 <Reset_Handler+0xc4>)
    128e:	21ff      	movs	r1, #255	; 0xff
    1290:	4b1d      	ldr	r3, [pc, #116]	; (1308 <Reset_Handler+0xc8>)
    1292:	438b      	bics	r3, r1
    1294:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1296:	39fd      	subs	r1, #253	; 0xfd
    1298:	2390      	movs	r3, #144	; 0x90
    129a:	005b      	lsls	r3, r3, #1
    129c:	4a1b      	ldr	r2, [pc, #108]	; (130c <Reset_Handler+0xcc>)
    129e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    12a0:	4a1b      	ldr	r2, [pc, #108]	; (1310 <Reset_Handler+0xd0>)
    12a2:	78d3      	ldrb	r3, [r2, #3]
    12a4:	2503      	movs	r5, #3
    12a6:	43ab      	bics	r3, r5
    12a8:	2402      	movs	r4, #2
    12aa:	4323      	orrs	r3, r4
    12ac:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    12ae:	78d3      	ldrb	r3, [r2, #3]
    12b0:	270c      	movs	r7, #12
    12b2:	43bb      	bics	r3, r7
    12b4:	2608      	movs	r6, #8
    12b6:	4333      	orrs	r3, r6
    12b8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    12ba:	4b16      	ldr	r3, [pc, #88]	; (1314 <Reset_Handler+0xd4>)
    12bc:	7b98      	ldrb	r0, [r3, #14]
    12be:	2230      	movs	r2, #48	; 0x30
    12c0:	4390      	bics	r0, r2
    12c2:	2220      	movs	r2, #32
    12c4:	4310      	orrs	r0, r2
    12c6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    12c8:	7b99      	ldrb	r1, [r3, #14]
    12ca:	43b9      	bics	r1, r7
    12cc:	4331      	orrs	r1, r6
    12ce:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    12d0:	7b9a      	ldrb	r2, [r3, #14]
    12d2:	43aa      	bics	r2, r5
    12d4:	4322      	orrs	r2, r4
    12d6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    12d8:	4a0f      	ldr	r2, [pc, #60]	; (1318 <Reset_Handler+0xd8>)
    12da:	6853      	ldr	r3, [r2, #4]
    12dc:	2180      	movs	r1, #128	; 0x80
    12de:	430b      	orrs	r3, r1
    12e0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    12e2:	4b0e      	ldr	r3, [pc, #56]	; (131c <Reset_Handler+0xdc>)
    12e4:	4798      	blx	r3
        main();
    12e6:	4b0e      	ldr	r3, [pc, #56]	; (1320 <Reset_Handler+0xe0>)
    12e8:	4798      	blx	r3
    12ea:	e7fe      	b.n	12ea <Reset_Handler+0xaa>
    12ec:	00002ae4 	.word	0x00002ae4
    12f0:	20000000 	.word	0x20000000
    12f4:	20000068 	.word	0x20000068
    12f8:	20000004 	.word	0x20000004
    12fc:	20000068 	.word	0x20000068
    1300:	200000d8 	.word	0x200000d8
    1304:	e000ed00 	.word	0xe000ed00
    1308:	00000000 	.word	0x00000000
    130c:	41007000 	.word	0x41007000
    1310:	41005000 	.word	0x41005000
    1314:	41004800 	.word	0x41004800
    1318:	41004000 	.word	0x41004000
    131c:	00001691 	.word	0x00001691
    1320:	00001431 	.word	0x00001431

00001324 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1324:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1326:	4a06      	ldr	r2, [pc, #24]	; (1340 <_sbrk+0x1c>)
    1328:	6812      	ldr	r2, [r2, #0]
    132a:	2a00      	cmp	r2, #0
    132c:	d004      	beq.n	1338 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    132e:	4a04      	ldr	r2, [pc, #16]	; (1340 <_sbrk+0x1c>)
    1330:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1332:	18c3      	adds	r3, r0, r3
    1334:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1336:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1338:	4902      	ldr	r1, [pc, #8]	; (1344 <_sbrk+0x20>)
    133a:	4a01      	ldr	r2, [pc, #4]	; (1340 <_sbrk+0x1c>)
    133c:	6011      	str	r1, [r2, #0]
    133e:	e7f6      	b.n	132e <_sbrk+0xa>
    1340:	200000b0 	.word	0x200000b0
    1344:	200010d8 	.word	0x200010d8

00001348 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1348:	2001      	movs	r0, #1
    134a:	4240      	negs	r0, r0
    134c:	4770      	bx	lr

0000134e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    134e:	2380      	movs	r3, #128	; 0x80
    1350:	019b      	lsls	r3, r3, #6
    1352:	604b      	str	r3, [r1, #4]

	return 0;
}
    1354:	2000      	movs	r0, #0
    1356:	4770      	bx	lr

00001358 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1358:	2001      	movs	r0, #1
    135a:	4770      	bx	lr

0000135c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    135c:	2000      	movs	r0, #0
    135e:	4770      	bx	lr

00001360 <configure_nvm>:
	port_pin_set_config(PIN_PA07, &pin_conf);
	port_pin_set_output_level(PIN_PA07, true);
}

void configure_nvm(void)
{
    1360:	b500      	push	{lr}
    1362:	b083      	sub	sp, #12
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    1364:	2200      	movs	r2, #0
    1366:	466b      	mov	r3, sp
    1368:	701a      	strb	r2, [r3, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    136a:	4b07      	ldr	r3, [pc, #28]	; (1388 <configure_nvm+0x28>)
    136c:	685b      	ldr	r3, [r3, #4]
    136e:	06db      	lsls	r3, r3, #27
    1370:	0f1b      	lsrs	r3, r3, #28
    1372:	4669      	mov	r1, sp
    1374:	708b      	strb	r3, [r1, #2]
	config->disable_cache     = false;
    1376:	70ca      	strb	r2, [r1, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    1378:	710a      	strb	r2, [r1, #4]
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
    137a:	704a      	strb	r2, [r1, #1]
	nvm_set_config(&config_nvm);
    137c:	4668      	mov	r0, sp
    137e:	4b03      	ldr	r3, [pc, #12]	; (138c <configure_nvm+0x2c>)
    1380:	4798      	blx	r3
}
    1382:	b003      	add	sp, #12
    1384:	bd00      	pop	{pc}
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	41004000 	.word	0x41004000
    138c:	00000115 	.word	0x00000115

00001390 <write_to_flash>:
}
*/


void write_to_flash(int page_base, uint8_t *write_page_buffer)
{
    1390:	b5f0      	push	{r4, r5, r6, r7, lr}
    1392:	46de      	mov	lr, fp
    1394:	4647      	mov	r7, r8
    1396:	b580      	push	{r7, lr}
    1398:	b083      	sub	sp, #12
    139a:	9100      	str	r1, [sp, #0]
	enum status_code error_code;
	do
	{
		printf("start erase.....\r\n");
		error_code = nvm_erase_row(
		page_base * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE);
    139c:	0204      	lsls	r4, r0, #8
		printf("start erase.....\r\n");
    139e:	4e1a      	ldr	r6, [pc, #104]	; (1408 <write_to_flash+0x78>)
    13a0:	4d1a      	ldr	r5, [pc, #104]	; (140c <write_to_flash+0x7c>)
		error_code = nvm_erase_row(
    13a2:	4f1b      	ldr	r7, [pc, #108]	; (1410 <write_to_flash+0x80>)
		printf("start erase.....\r\n");
    13a4:	0030      	movs	r0, r6
    13a6:	47a8      	blx	r5
		error_code = nvm_erase_row(
    13a8:	0020      	movs	r0, r4
    13aa:	47b8      	blx	r7
	} while (error_code == STATUS_BUSY);
    13ac:	2805      	cmp	r0, #5
    13ae:	d0f9      	beq.n	13a4 <write_to_flash+0x14>
	printf("erase end.....\r\n");
    13b0:	4818      	ldr	r0, [pc, #96]	; (1414 <write_to_flash+0x84>)
    13b2:	4e16      	ldr	r6, [pc, #88]	; (140c <write_to_flash+0x7c>)
    13b4:	47b0      	blx	r6
	
	printf("start write.....\r\n");
    13b6:	4818      	ldr	r0, [pc, #96]	; (1418 <write_to_flash+0x88>)
    13b8:	47b0      	blx	r6
    13ba:	9a00      	ldr	r2, [sp, #0]
    13bc:	4693      	mov	fp, r2
    13be:	1aa3      	subs	r3, r4, r2
    13c0:	4698      	mov	r8, r3
    13c2:	2401      	movs	r4, #1
	for(i=0; i<4; i++)
	{
		do
		{
			printf("write %d.....\r\n", i+1);
    13c4:	4f15      	ldr	r7, [pc, #84]	; (141c <write_to_flash+0x8c>)
			error_code = nvm_write_buffer(
    13c6:	4d16      	ldr	r5, [pc, #88]	; (1420 <write_to_flash+0x90>)
    13c8:	465e      	mov	r6, fp
    13ca:	4446      	add	r6, r8
			page_base * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE + i*64,
			write_page_buffer+i*64, NVMCTRL_PAGE_SIZE);
    13cc:	465b      	mov	r3, fp
    13ce:	9301      	str	r3, [sp, #4]
			printf("write %d.....\r\n", i+1);
    13d0:	9400      	str	r4, [sp, #0]
    13d2:	9900      	ldr	r1, [sp, #0]
    13d4:	4813      	ldr	r0, [pc, #76]	; (1424 <write_to_flash+0x94>)
    13d6:	47b8      	blx	r7
			error_code = nvm_write_buffer(
    13d8:	2240      	movs	r2, #64	; 0x40
    13da:	9901      	ldr	r1, [sp, #4]
    13dc:	0030      	movs	r0, r6
    13de:	47a8      	blx	r5
		} while (error_code == STATUS_BUSY);
    13e0:	2805      	cmp	r0, #5
    13e2:	d0f6      	beq.n	13d2 <write_to_flash+0x42>
		printf("write %d end.....\r\n", i+1);
    13e4:	9900      	ldr	r1, [sp, #0]
    13e6:	4810      	ldr	r0, [pc, #64]	; (1428 <write_to_flash+0x98>)
    13e8:	4b0c      	ldr	r3, [pc, #48]	; (141c <write_to_flash+0x8c>)
    13ea:	4798      	blx	r3
    13ec:	3401      	adds	r4, #1
    13ee:	2340      	movs	r3, #64	; 0x40
    13f0:	469c      	mov	ip, r3
    13f2:	44e3      	add	fp, ip
	for(i=0; i<4; i++)
    13f4:	2c05      	cmp	r4, #5
    13f6:	d1e7      	bne.n	13c8 <write_to_flash+0x38>
	}
	printf("write end.....\r\n");
    13f8:	480c      	ldr	r0, [pc, #48]	; (142c <write_to_flash+0x9c>)
    13fa:	4b04      	ldr	r3, [pc, #16]	; (140c <write_to_flash+0x7c>)
    13fc:	4798      	blx	r3
	
}
    13fe:	b003      	add	sp, #12
    1400:	bc0c      	pop	{r2, r3}
    1402:	4690      	mov	r8, r2
    1404:	469b      	mov	fp, r3
    1406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1408:	000029c0 	.word	0x000029c0
    140c:	000017dd 	.word	0x000017dd
    1410:	000002e5 	.word	0x000002e5
    1414:	000029d4 	.word	0x000029d4
    1418:	000029e4 	.word	0x000029e4
    141c:	000016e9 	.word	0x000016e9
    1420:	0000023d 	.word	0x0000023d
    1424:	000029f8 	.word	0x000029f8
    1428:	00002a08 	.word	0x00002a08
    142c:	00002a1c 	.word	0x00002a1c

00001430 <main>:
#if CONSOLE_OUTPUT_ENABLED
extern struct usart_module cdc_uart_module;
#endif

int main (void)
{
    1430:	b5f0      	push	{r4, r5, r6, r7, lr}
    1432:	46d6      	mov	lr, sl
    1434:	464f      	mov	r7, r9
    1436:	b580      	push	{r7, lr}
    1438:	4c2a      	ldr	r4, [pc, #168]	; (14e4 <main+0xb4>)
    143a:	44a5      	add	sp, r4
    143c:	af00      	add	r7, sp, #0
	app_start_address = *(uint32_t *)(APP_START_ADDRESS + 4);
    143e:	4b2a      	ldr	r3, [pc, #168]	; (14e8 <main+0xb8>)
    1440:	681b      	ldr	r3, [r3, #0]
	if (app_start_address == 0xFFFFFFFF) {
    1442:	1c5a      	adds	r2, r3, #1
    1444:	d007      	beq.n	1456 <main+0x26>
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    1446:	22a0      	movs	r2, #160	; 0xa0
    1448:	01d2      	lsls	r2, r2, #7
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    144a:	6811      	ldr	r1, [r2, #0]
    144c:	f381 8808 	msr	MSP, r1
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    1450:	4926      	ldr	r1, [pc, #152]	; (14ec <main+0xbc>)
    1452:	608a      	str	r2, [r1, #8]
	asm("bx %0"::"r"(app_start_address));
    1454:	4718      	bx	r3
	int page_base = 80;
	int j;

	check_is_jump_to_application();

	system_init();
    1456:	4b26      	ldr	r3, [pc, #152]	; (14f0 <main+0xc0>)
    1458:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
	//power_on();

	console_init();
    145a:	4b26      	ldr	r3, [pc, #152]	; (14f4 <main+0xc4>)
    145c:	4798      	blx	r3
	printf("start-bootloader----------\r\n");
    145e:	4826      	ldr	r0, [pc, #152]	; (14f8 <main+0xc8>)
    1460:	4c26      	ldr	r4, [pc, #152]	; (14fc <main+0xcc>)
    1462:	47a0      	blx	r4
	configure_nvm();
    1464:	4b26      	ldr	r3, [pc, #152]	; (1500 <main+0xd0>)
    1466:	4798      	blx	r3
	printf("start-send-data----------\r\n");
    1468:	4826      	ldr	r0, [pc, #152]	; (1504 <main+0xd4>)
    146a:	47a0      	blx	r4
	int page_base = 80;
    146c:	2550      	movs	r5, #80	; 0x50
	while(1)
	{
		if(usart_read_buffer_wait(&cdc_uart_module, temp, 1024) == STATUS_OK)
    146e:	4e26      	ldr	r6, [pc, #152]	; (1508 <main+0xd8>)
    1470:	e018      	b.n	14a4 <main+0x74>
			{
				printf("---------updata end-----------\r\n");
				break;
			}

			printf("start-write-data----------\r\n");
    1472:	4826      	ldr	r0, [pc, #152]	; (150c <main+0xdc>)
    1474:	4b21      	ldr	r3, [pc, #132]	; (14fc <main+0xcc>)
    1476:	4798      	blx	r3
    1478:	2308      	movs	r3, #8
    147a:	18fc      	adds	r4, r7, r3
    147c:	1d2b      	adds	r3, r5, #4
    147e:	469a      	mov	sl, r3
    1480:	0028      	movs	r0, r5
			for(j=0;j<4;j++)
			{
				write_to_flash(page_base++, temp+j*256);
    1482:	4b23      	ldr	r3, [pc, #140]	; (1510 <main+0xe0>)
    1484:	4699      	mov	r9, r3
    1486:	1c43      	adds	r3, r0, #1
    1488:	607b      	str	r3, [r7, #4]
    148a:	0021      	movs	r1, r4
    148c:	47c8      	blx	r9
    148e:	3401      	adds	r4, #1
    1490:	34ff      	adds	r4, #255	; 0xff
    1492:	6878      	ldr	r0, [r7, #4]
			for(j=0;j<4;j++)
    1494:	4550      	cmp	r0, sl
    1496:	d1f6      	bne.n	1486 <main+0x56>
    1498:	3504      	adds	r5, #4
			}
			
			printf("--------------------------\r\n");
    149a:	481e      	ldr	r0, [pc, #120]	; (1514 <main+0xe4>)
    149c:	4c17      	ldr	r4, [pc, #92]	; (14fc <main+0xcc>)
    149e:	47a0      	blx	r4
			printf("continue-send-data----------\r\n");
    14a0:	481d      	ldr	r0, [pc, #116]	; (1518 <main+0xe8>)
    14a2:	47a0      	blx	r4
		if(usart_read_buffer_wait(&cdc_uart_module, temp, 1024) == STATUS_OK)
    14a4:	2480      	movs	r4, #128	; 0x80
    14a6:	00e4      	lsls	r4, r4, #3
    14a8:	0022      	movs	r2, r4
    14aa:	2308      	movs	r3, #8
    14ac:	18f9      	adds	r1, r7, r3
    14ae:	481b      	ldr	r0, [pc, #108]	; (151c <main+0xec>)
    14b0:	47b0      	blx	r6
    14b2:	2800      	cmp	r0, #0
    14b4:	d1f8      	bne.n	14a8 <main+0x78>
			if(temp[0] == 0xff && temp[1] == 0xff && temp[2] == 0xff && temp[3] == 0xff && temp[4] == 0xff && temp[5] == 0xff)
    14b6:	7a3b      	ldrb	r3, [r7, #8]
    14b8:	2bff      	cmp	r3, #255	; 0xff
    14ba:	d1da      	bne.n	1472 <main+0x42>
    14bc:	7a7b      	ldrb	r3, [r7, #9]
    14be:	2bff      	cmp	r3, #255	; 0xff
    14c0:	d1d7      	bne.n	1472 <main+0x42>
    14c2:	7abb      	ldrb	r3, [r7, #10]
    14c4:	2bff      	cmp	r3, #255	; 0xff
    14c6:	d1d4      	bne.n	1472 <main+0x42>
    14c8:	7afb      	ldrb	r3, [r7, #11]
    14ca:	2bff      	cmp	r3, #255	; 0xff
    14cc:	d1d1      	bne.n	1472 <main+0x42>
    14ce:	7b3b      	ldrb	r3, [r7, #12]
    14d0:	2bff      	cmp	r3, #255	; 0xff
    14d2:	d1ce      	bne.n	1472 <main+0x42>
    14d4:	7b7b      	ldrb	r3, [r7, #13]
    14d6:	2bff      	cmp	r3, #255	; 0xff
    14d8:	d1cb      	bne.n	1472 <main+0x42>
				printf("---------updata end-----------\r\n");
    14da:	4811      	ldr	r0, [pc, #68]	; (1520 <main+0xf0>)
    14dc:	4b07      	ldr	r3, [pc, #28]	; (14fc <main+0xcc>)
    14de:	4798      	blx	r3
    14e0:	e7fe      	b.n	14e0 <main+0xb0>
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	fffffbf4 	.word	0xfffffbf4
    14e8:	00005004 	.word	0x00005004
    14ec:	e000ed00 	.word	0xe000ed00
    14f0:	00001211 	.word	0x00001211
    14f4:	00000721 	.word	0x00000721
    14f8:	00002910 	.word	0x00002910
    14fc:	000017dd 	.word	0x000017dd
    1500:	00001361 	.word	0x00001361
    1504:	0000292c 	.word	0x0000292c
    1508:	00000b95 	.word	0x00000b95
    150c:	00002968 	.word	0x00002968
    1510:	00001391 	.word	0x00001391
    1514:	00002984 	.word	0x00002984
    1518:	000029a0 	.word	0x000029a0
    151c:	200000c8 	.word	0x200000c8
    1520:	00002948 	.word	0x00002948

00001524 <__udivsi3>:
    1524:	2200      	movs	r2, #0
    1526:	0843      	lsrs	r3, r0, #1
    1528:	428b      	cmp	r3, r1
    152a:	d374      	bcc.n	1616 <__udivsi3+0xf2>
    152c:	0903      	lsrs	r3, r0, #4
    152e:	428b      	cmp	r3, r1
    1530:	d35f      	bcc.n	15f2 <__udivsi3+0xce>
    1532:	0a03      	lsrs	r3, r0, #8
    1534:	428b      	cmp	r3, r1
    1536:	d344      	bcc.n	15c2 <__udivsi3+0x9e>
    1538:	0b03      	lsrs	r3, r0, #12
    153a:	428b      	cmp	r3, r1
    153c:	d328      	bcc.n	1590 <__udivsi3+0x6c>
    153e:	0c03      	lsrs	r3, r0, #16
    1540:	428b      	cmp	r3, r1
    1542:	d30d      	bcc.n	1560 <__udivsi3+0x3c>
    1544:	22ff      	movs	r2, #255	; 0xff
    1546:	0209      	lsls	r1, r1, #8
    1548:	ba12      	rev	r2, r2
    154a:	0c03      	lsrs	r3, r0, #16
    154c:	428b      	cmp	r3, r1
    154e:	d302      	bcc.n	1556 <__udivsi3+0x32>
    1550:	1212      	asrs	r2, r2, #8
    1552:	0209      	lsls	r1, r1, #8
    1554:	d065      	beq.n	1622 <__udivsi3+0xfe>
    1556:	0b03      	lsrs	r3, r0, #12
    1558:	428b      	cmp	r3, r1
    155a:	d319      	bcc.n	1590 <__udivsi3+0x6c>
    155c:	e000      	b.n	1560 <__udivsi3+0x3c>
    155e:	0a09      	lsrs	r1, r1, #8
    1560:	0bc3      	lsrs	r3, r0, #15
    1562:	428b      	cmp	r3, r1
    1564:	d301      	bcc.n	156a <__udivsi3+0x46>
    1566:	03cb      	lsls	r3, r1, #15
    1568:	1ac0      	subs	r0, r0, r3
    156a:	4152      	adcs	r2, r2
    156c:	0b83      	lsrs	r3, r0, #14
    156e:	428b      	cmp	r3, r1
    1570:	d301      	bcc.n	1576 <__udivsi3+0x52>
    1572:	038b      	lsls	r3, r1, #14
    1574:	1ac0      	subs	r0, r0, r3
    1576:	4152      	adcs	r2, r2
    1578:	0b43      	lsrs	r3, r0, #13
    157a:	428b      	cmp	r3, r1
    157c:	d301      	bcc.n	1582 <__udivsi3+0x5e>
    157e:	034b      	lsls	r3, r1, #13
    1580:	1ac0      	subs	r0, r0, r3
    1582:	4152      	adcs	r2, r2
    1584:	0b03      	lsrs	r3, r0, #12
    1586:	428b      	cmp	r3, r1
    1588:	d301      	bcc.n	158e <__udivsi3+0x6a>
    158a:	030b      	lsls	r3, r1, #12
    158c:	1ac0      	subs	r0, r0, r3
    158e:	4152      	adcs	r2, r2
    1590:	0ac3      	lsrs	r3, r0, #11
    1592:	428b      	cmp	r3, r1
    1594:	d301      	bcc.n	159a <__udivsi3+0x76>
    1596:	02cb      	lsls	r3, r1, #11
    1598:	1ac0      	subs	r0, r0, r3
    159a:	4152      	adcs	r2, r2
    159c:	0a83      	lsrs	r3, r0, #10
    159e:	428b      	cmp	r3, r1
    15a0:	d301      	bcc.n	15a6 <__udivsi3+0x82>
    15a2:	028b      	lsls	r3, r1, #10
    15a4:	1ac0      	subs	r0, r0, r3
    15a6:	4152      	adcs	r2, r2
    15a8:	0a43      	lsrs	r3, r0, #9
    15aa:	428b      	cmp	r3, r1
    15ac:	d301      	bcc.n	15b2 <__udivsi3+0x8e>
    15ae:	024b      	lsls	r3, r1, #9
    15b0:	1ac0      	subs	r0, r0, r3
    15b2:	4152      	adcs	r2, r2
    15b4:	0a03      	lsrs	r3, r0, #8
    15b6:	428b      	cmp	r3, r1
    15b8:	d301      	bcc.n	15be <__udivsi3+0x9a>
    15ba:	020b      	lsls	r3, r1, #8
    15bc:	1ac0      	subs	r0, r0, r3
    15be:	4152      	adcs	r2, r2
    15c0:	d2cd      	bcs.n	155e <__udivsi3+0x3a>
    15c2:	09c3      	lsrs	r3, r0, #7
    15c4:	428b      	cmp	r3, r1
    15c6:	d301      	bcc.n	15cc <__udivsi3+0xa8>
    15c8:	01cb      	lsls	r3, r1, #7
    15ca:	1ac0      	subs	r0, r0, r3
    15cc:	4152      	adcs	r2, r2
    15ce:	0983      	lsrs	r3, r0, #6
    15d0:	428b      	cmp	r3, r1
    15d2:	d301      	bcc.n	15d8 <__udivsi3+0xb4>
    15d4:	018b      	lsls	r3, r1, #6
    15d6:	1ac0      	subs	r0, r0, r3
    15d8:	4152      	adcs	r2, r2
    15da:	0943      	lsrs	r3, r0, #5
    15dc:	428b      	cmp	r3, r1
    15de:	d301      	bcc.n	15e4 <__udivsi3+0xc0>
    15e0:	014b      	lsls	r3, r1, #5
    15e2:	1ac0      	subs	r0, r0, r3
    15e4:	4152      	adcs	r2, r2
    15e6:	0903      	lsrs	r3, r0, #4
    15e8:	428b      	cmp	r3, r1
    15ea:	d301      	bcc.n	15f0 <__udivsi3+0xcc>
    15ec:	010b      	lsls	r3, r1, #4
    15ee:	1ac0      	subs	r0, r0, r3
    15f0:	4152      	adcs	r2, r2
    15f2:	08c3      	lsrs	r3, r0, #3
    15f4:	428b      	cmp	r3, r1
    15f6:	d301      	bcc.n	15fc <__udivsi3+0xd8>
    15f8:	00cb      	lsls	r3, r1, #3
    15fa:	1ac0      	subs	r0, r0, r3
    15fc:	4152      	adcs	r2, r2
    15fe:	0883      	lsrs	r3, r0, #2
    1600:	428b      	cmp	r3, r1
    1602:	d301      	bcc.n	1608 <__udivsi3+0xe4>
    1604:	008b      	lsls	r3, r1, #2
    1606:	1ac0      	subs	r0, r0, r3
    1608:	4152      	adcs	r2, r2
    160a:	0843      	lsrs	r3, r0, #1
    160c:	428b      	cmp	r3, r1
    160e:	d301      	bcc.n	1614 <__udivsi3+0xf0>
    1610:	004b      	lsls	r3, r1, #1
    1612:	1ac0      	subs	r0, r0, r3
    1614:	4152      	adcs	r2, r2
    1616:	1a41      	subs	r1, r0, r1
    1618:	d200      	bcs.n	161c <__udivsi3+0xf8>
    161a:	4601      	mov	r1, r0
    161c:	4152      	adcs	r2, r2
    161e:	4610      	mov	r0, r2
    1620:	4770      	bx	lr
    1622:	e7ff      	b.n	1624 <__udivsi3+0x100>
    1624:	b501      	push	{r0, lr}
    1626:	2000      	movs	r0, #0
    1628:	f000 f806 	bl	1638 <__aeabi_idiv0>
    162c:	bd02      	pop	{r1, pc}
    162e:	46c0      	nop			; (mov r8, r8)

00001630 <__aeabi_uidivmod>:
    1630:	2900      	cmp	r1, #0
    1632:	d0f7      	beq.n	1624 <__udivsi3+0x100>
    1634:	e776      	b.n	1524 <__udivsi3>
    1636:	4770      	bx	lr

00001638 <__aeabi_idiv0>:
    1638:	4770      	bx	lr
    163a:	46c0      	nop			; (mov r8, r8)

0000163c <__aeabi_lmul>:
    163c:	b5f0      	push	{r4, r5, r6, r7, lr}
    163e:	46ce      	mov	lr, r9
    1640:	4647      	mov	r7, r8
    1642:	0415      	lsls	r5, r2, #16
    1644:	0c2d      	lsrs	r5, r5, #16
    1646:	002e      	movs	r6, r5
    1648:	b580      	push	{r7, lr}
    164a:	0407      	lsls	r7, r0, #16
    164c:	0c14      	lsrs	r4, r2, #16
    164e:	0c3f      	lsrs	r7, r7, #16
    1650:	4699      	mov	r9, r3
    1652:	0c03      	lsrs	r3, r0, #16
    1654:	437e      	muls	r6, r7
    1656:	435d      	muls	r5, r3
    1658:	4367      	muls	r7, r4
    165a:	4363      	muls	r3, r4
    165c:	197f      	adds	r7, r7, r5
    165e:	0c34      	lsrs	r4, r6, #16
    1660:	19e4      	adds	r4, r4, r7
    1662:	469c      	mov	ip, r3
    1664:	42a5      	cmp	r5, r4
    1666:	d903      	bls.n	1670 <__aeabi_lmul+0x34>
    1668:	2380      	movs	r3, #128	; 0x80
    166a:	025b      	lsls	r3, r3, #9
    166c:	4698      	mov	r8, r3
    166e:	44c4      	add	ip, r8
    1670:	464b      	mov	r3, r9
    1672:	4351      	muls	r1, r2
    1674:	4343      	muls	r3, r0
    1676:	0436      	lsls	r6, r6, #16
    1678:	0c36      	lsrs	r6, r6, #16
    167a:	0c25      	lsrs	r5, r4, #16
    167c:	0424      	lsls	r4, r4, #16
    167e:	4465      	add	r5, ip
    1680:	19a4      	adds	r4, r4, r6
    1682:	1859      	adds	r1, r3, r1
    1684:	1949      	adds	r1, r1, r5
    1686:	0020      	movs	r0, r4
    1688:	bc0c      	pop	{r2, r3}
    168a:	4690      	mov	r8, r2
    168c:	4699      	mov	r9, r3
    168e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001690 <__libc_init_array>:
    1690:	b570      	push	{r4, r5, r6, lr}
    1692:	2600      	movs	r6, #0
    1694:	4d0c      	ldr	r5, [pc, #48]	; (16c8 <__libc_init_array+0x38>)
    1696:	4c0d      	ldr	r4, [pc, #52]	; (16cc <__libc_init_array+0x3c>)
    1698:	1b64      	subs	r4, r4, r5
    169a:	10a4      	asrs	r4, r4, #2
    169c:	42a6      	cmp	r6, r4
    169e:	d109      	bne.n	16b4 <__libc_init_array+0x24>
    16a0:	2600      	movs	r6, #0
    16a2:	f001 fa0f 	bl	2ac4 <_init>
    16a6:	4d0a      	ldr	r5, [pc, #40]	; (16d0 <__libc_init_array+0x40>)
    16a8:	4c0a      	ldr	r4, [pc, #40]	; (16d4 <__libc_init_array+0x44>)
    16aa:	1b64      	subs	r4, r4, r5
    16ac:	10a4      	asrs	r4, r4, #2
    16ae:	42a6      	cmp	r6, r4
    16b0:	d105      	bne.n	16be <__libc_init_array+0x2e>
    16b2:	bd70      	pop	{r4, r5, r6, pc}
    16b4:	00b3      	lsls	r3, r6, #2
    16b6:	58eb      	ldr	r3, [r5, r3]
    16b8:	4798      	blx	r3
    16ba:	3601      	adds	r6, #1
    16bc:	e7ee      	b.n	169c <__libc_init_array+0xc>
    16be:	00b3      	lsls	r3, r6, #2
    16c0:	58eb      	ldr	r3, [r5, r3]
    16c2:	4798      	blx	r3
    16c4:	3601      	adds	r6, #1
    16c6:	e7f2      	b.n	16ae <__libc_init_array+0x1e>
    16c8:	00002ad0 	.word	0x00002ad0
    16cc:	00002ad0 	.word	0x00002ad0
    16d0:	00002ad0 	.word	0x00002ad0
    16d4:	00002ad4 	.word	0x00002ad4

000016d8 <memset>:
    16d8:	0003      	movs	r3, r0
    16da:	1882      	adds	r2, r0, r2
    16dc:	4293      	cmp	r3, r2
    16de:	d100      	bne.n	16e2 <memset+0xa>
    16e0:	4770      	bx	lr
    16e2:	7019      	strb	r1, [r3, #0]
    16e4:	3301      	adds	r3, #1
    16e6:	e7f9      	b.n	16dc <memset+0x4>

000016e8 <iprintf>:
    16e8:	b40f      	push	{r0, r1, r2, r3}
    16ea:	4b0b      	ldr	r3, [pc, #44]	; (1718 <iprintf+0x30>)
    16ec:	b513      	push	{r0, r1, r4, lr}
    16ee:	681c      	ldr	r4, [r3, #0]
    16f0:	2c00      	cmp	r4, #0
    16f2:	d005      	beq.n	1700 <iprintf+0x18>
    16f4:	69a3      	ldr	r3, [r4, #24]
    16f6:	2b00      	cmp	r3, #0
    16f8:	d102      	bne.n	1700 <iprintf+0x18>
    16fa:	0020      	movs	r0, r4
    16fc:	f000 faf2 	bl	1ce4 <__sinit>
    1700:	ab05      	add	r3, sp, #20
    1702:	9a04      	ldr	r2, [sp, #16]
    1704:	68a1      	ldr	r1, [r4, #8]
    1706:	0020      	movs	r0, r4
    1708:	9301      	str	r3, [sp, #4]
    170a:	f000 fcc7 	bl	209c <_vfiprintf_r>
    170e:	bc16      	pop	{r1, r2, r4}
    1710:	bc08      	pop	{r3}
    1712:	b004      	add	sp, #16
    1714:	4718      	bx	r3
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	20000004 	.word	0x20000004

0000171c <_puts_r>:
    171c:	b570      	push	{r4, r5, r6, lr}
    171e:	0005      	movs	r5, r0
    1720:	000e      	movs	r6, r1
    1722:	2800      	cmp	r0, #0
    1724:	d004      	beq.n	1730 <_puts_r+0x14>
    1726:	6983      	ldr	r3, [r0, #24]
    1728:	2b00      	cmp	r3, #0
    172a:	d101      	bne.n	1730 <_puts_r+0x14>
    172c:	f000 fada 	bl	1ce4 <__sinit>
    1730:	69ab      	ldr	r3, [r5, #24]
    1732:	68ac      	ldr	r4, [r5, #8]
    1734:	2b00      	cmp	r3, #0
    1736:	d102      	bne.n	173e <_puts_r+0x22>
    1738:	0028      	movs	r0, r5
    173a:	f000 fad3 	bl	1ce4 <__sinit>
    173e:	4b24      	ldr	r3, [pc, #144]	; (17d0 <_puts_r+0xb4>)
    1740:	429c      	cmp	r4, r3
    1742:	d10f      	bne.n	1764 <_puts_r+0x48>
    1744:	686c      	ldr	r4, [r5, #4]
    1746:	89a3      	ldrh	r3, [r4, #12]
    1748:	071b      	lsls	r3, r3, #28
    174a:	d502      	bpl.n	1752 <_puts_r+0x36>
    174c:	6923      	ldr	r3, [r4, #16]
    174e:	2b00      	cmp	r3, #0
    1750:	d120      	bne.n	1794 <_puts_r+0x78>
    1752:	0021      	movs	r1, r4
    1754:	0028      	movs	r0, r5
    1756:	f000 f957 	bl	1a08 <__swsetup_r>
    175a:	2800      	cmp	r0, #0
    175c:	d01a      	beq.n	1794 <_puts_r+0x78>
    175e:	2001      	movs	r0, #1
    1760:	4240      	negs	r0, r0
    1762:	bd70      	pop	{r4, r5, r6, pc}
    1764:	4b1b      	ldr	r3, [pc, #108]	; (17d4 <_puts_r+0xb8>)
    1766:	429c      	cmp	r4, r3
    1768:	d101      	bne.n	176e <_puts_r+0x52>
    176a:	68ac      	ldr	r4, [r5, #8]
    176c:	e7eb      	b.n	1746 <_puts_r+0x2a>
    176e:	4b1a      	ldr	r3, [pc, #104]	; (17d8 <_puts_r+0xbc>)
    1770:	429c      	cmp	r4, r3
    1772:	d1e8      	bne.n	1746 <_puts_r+0x2a>
    1774:	68ec      	ldr	r4, [r5, #12]
    1776:	e7e6      	b.n	1746 <_puts_r+0x2a>
    1778:	3b01      	subs	r3, #1
    177a:	3601      	adds	r6, #1
    177c:	60a3      	str	r3, [r4, #8]
    177e:	2b00      	cmp	r3, #0
    1780:	da04      	bge.n	178c <_puts_r+0x70>
    1782:	69a2      	ldr	r2, [r4, #24]
    1784:	4293      	cmp	r3, r2
    1786:	db16      	blt.n	17b6 <_puts_r+0x9a>
    1788:	290a      	cmp	r1, #10
    178a:	d014      	beq.n	17b6 <_puts_r+0x9a>
    178c:	6823      	ldr	r3, [r4, #0]
    178e:	1c5a      	adds	r2, r3, #1
    1790:	6022      	str	r2, [r4, #0]
    1792:	7019      	strb	r1, [r3, #0]
    1794:	7831      	ldrb	r1, [r6, #0]
    1796:	68a3      	ldr	r3, [r4, #8]
    1798:	2900      	cmp	r1, #0
    179a:	d1ed      	bne.n	1778 <_puts_r+0x5c>
    179c:	3b01      	subs	r3, #1
    179e:	60a3      	str	r3, [r4, #8]
    17a0:	2b00      	cmp	r3, #0
    17a2:	da0f      	bge.n	17c4 <_puts_r+0xa8>
    17a4:	0022      	movs	r2, r4
    17a6:	310a      	adds	r1, #10
    17a8:	0028      	movs	r0, r5
    17aa:	f000 f8d7 	bl	195c <__swbuf_r>
    17ae:	1c43      	adds	r3, r0, #1
    17b0:	d0d5      	beq.n	175e <_puts_r+0x42>
    17b2:	200a      	movs	r0, #10
    17b4:	e7d5      	b.n	1762 <_puts_r+0x46>
    17b6:	0022      	movs	r2, r4
    17b8:	0028      	movs	r0, r5
    17ba:	f000 f8cf 	bl	195c <__swbuf_r>
    17be:	1c43      	adds	r3, r0, #1
    17c0:	d1e8      	bne.n	1794 <_puts_r+0x78>
    17c2:	e7cc      	b.n	175e <_puts_r+0x42>
    17c4:	200a      	movs	r0, #10
    17c6:	6823      	ldr	r3, [r4, #0]
    17c8:	1c5a      	adds	r2, r3, #1
    17ca:	6022      	str	r2, [r4, #0]
    17cc:	7018      	strb	r0, [r3, #0]
    17ce:	e7c8      	b.n	1762 <_puts_r+0x46>
    17d0:	00002a50 	.word	0x00002a50
    17d4:	00002a70 	.word	0x00002a70
    17d8:	00002a30 	.word	0x00002a30

000017dc <puts>:
    17dc:	b510      	push	{r4, lr}
    17de:	4b03      	ldr	r3, [pc, #12]	; (17ec <puts+0x10>)
    17e0:	0001      	movs	r1, r0
    17e2:	6818      	ldr	r0, [r3, #0]
    17e4:	f7ff ff9a 	bl	171c <_puts_r>
    17e8:	bd10      	pop	{r4, pc}
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	20000004 	.word	0x20000004

000017f0 <setbuf>:
    17f0:	424a      	negs	r2, r1
    17f2:	414a      	adcs	r2, r1
    17f4:	2380      	movs	r3, #128	; 0x80
    17f6:	b510      	push	{r4, lr}
    17f8:	0052      	lsls	r2, r2, #1
    17fa:	00db      	lsls	r3, r3, #3
    17fc:	f000 f802 	bl	1804 <setvbuf>
    1800:	bd10      	pop	{r4, pc}
	...

00001804 <setvbuf>:
    1804:	b5f0      	push	{r4, r5, r6, r7, lr}
    1806:	001d      	movs	r5, r3
    1808:	4b4f      	ldr	r3, [pc, #316]	; (1948 <setvbuf+0x144>)
    180a:	b085      	sub	sp, #20
    180c:	681e      	ldr	r6, [r3, #0]
    180e:	0004      	movs	r4, r0
    1810:	000f      	movs	r7, r1
    1812:	9200      	str	r2, [sp, #0]
    1814:	2e00      	cmp	r6, #0
    1816:	d005      	beq.n	1824 <setvbuf+0x20>
    1818:	69b3      	ldr	r3, [r6, #24]
    181a:	2b00      	cmp	r3, #0
    181c:	d102      	bne.n	1824 <setvbuf+0x20>
    181e:	0030      	movs	r0, r6
    1820:	f000 fa60 	bl	1ce4 <__sinit>
    1824:	4b49      	ldr	r3, [pc, #292]	; (194c <setvbuf+0x148>)
    1826:	429c      	cmp	r4, r3
    1828:	d150      	bne.n	18cc <setvbuf+0xc8>
    182a:	6874      	ldr	r4, [r6, #4]
    182c:	9b00      	ldr	r3, [sp, #0]
    182e:	2b02      	cmp	r3, #2
    1830:	d005      	beq.n	183e <setvbuf+0x3a>
    1832:	2b01      	cmp	r3, #1
    1834:	d900      	bls.n	1838 <setvbuf+0x34>
    1836:	e084      	b.n	1942 <setvbuf+0x13e>
    1838:	2d00      	cmp	r5, #0
    183a:	da00      	bge.n	183e <setvbuf+0x3a>
    183c:	e081      	b.n	1942 <setvbuf+0x13e>
    183e:	0021      	movs	r1, r4
    1840:	0030      	movs	r0, r6
    1842:	f000 f9e1 	bl	1c08 <_fflush_r>
    1846:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1848:	2900      	cmp	r1, #0
    184a:	d008      	beq.n	185e <setvbuf+0x5a>
    184c:	0023      	movs	r3, r4
    184e:	3344      	adds	r3, #68	; 0x44
    1850:	4299      	cmp	r1, r3
    1852:	d002      	beq.n	185a <setvbuf+0x56>
    1854:	0030      	movs	r0, r6
    1856:	f000 fb51 	bl	1efc <_free_r>
    185a:	2300      	movs	r3, #0
    185c:	6363      	str	r3, [r4, #52]	; 0x34
    185e:	2300      	movs	r3, #0
    1860:	61a3      	str	r3, [r4, #24]
    1862:	6063      	str	r3, [r4, #4]
    1864:	89a3      	ldrh	r3, [r4, #12]
    1866:	061b      	lsls	r3, r3, #24
    1868:	d503      	bpl.n	1872 <setvbuf+0x6e>
    186a:	6921      	ldr	r1, [r4, #16]
    186c:	0030      	movs	r0, r6
    186e:	f000 fb45 	bl	1efc <_free_r>
    1872:	89a3      	ldrh	r3, [r4, #12]
    1874:	4a36      	ldr	r2, [pc, #216]	; (1950 <setvbuf+0x14c>)
    1876:	4013      	ands	r3, r2
    1878:	81a3      	strh	r3, [r4, #12]
    187a:	9b00      	ldr	r3, [sp, #0]
    187c:	2b02      	cmp	r3, #2
    187e:	d05a      	beq.n	1936 <setvbuf+0x132>
    1880:	ab03      	add	r3, sp, #12
    1882:	aa02      	add	r2, sp, #8
    1884:	0021      	movs	r1, r4
    1886:	0030      	movs	r0, r6
    1888:	f000 fac2 	bl	1e10 <__swhatbuf_r>
    188c:	89a3      	ldrh	r3, [r4, #12]
    188e:	4318      	orrs	r0, r3
    1890:	81a0      	strh	r0, [r4, #12]
    1892:	2d00      	cmp	r5, #0
    1894:	d124      	bne.n	18e0 <setvbuf+0xdc>
    1896:	9d02      	ldr	r5, [sp, #8]
    1898:	0028      	movs	r0, r5
    189a:	f000 fb25 	bl	1ee8 <malloc>
    189e:	9501      	str	r5, [sp, #4]
    18a0:	1e07      	subs	r7, r0, #0
    18a2:	d142      	bne.n	192a <setvbuf+0x126>
    18a4:	9b02      	ldr	r3, [sp, #8]
    18a6:	9301      	str	r3, [sp, #4]
    18a8:	42ab      	cmp	r3, r5
    18aa:	d139      	bne.n	1920 <setvbuf+0x11c>
    18ac:	2001      	movs	r0, #1
    18ae:	4240      	negs	r0, r0
    18b0:	2302      	movs	r3, #2
    18b2:	89a2      	ldrh	r2, [r4, #12]
    18b4:	4313      	orrs	r3, r2
    18b6:	81a3      	strh	r3, [r4, #12]
    18b8:	2300      	movs	r3, #0
    18ba:	60a3      	str	r3, [r4, #8]
    18bc:	0023      	movs	r3, r4
    18be:	3347      	adds	r3, #71	; 0x47
    18c0:	6023      	str	r3, [r4, #0]
    18c2:	6123      	str	r3, [r4, #16]
    18c4:	2301      	movs	r3, #1
    18c6:	6163      	str	r3, [r4, #20]
    18c8:	b005      	add	sp, #20
    18ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18cc:	4b21      	ldr	r3, [pc, #132]	; (1954 <setvbuf+0x150>)
    18ce:	429c      	cmp	r4, r3
    18d0:	d101      	bne.n	18d6 <setvbuf+0xd2>
    18d2:	68b4      	ldr	r4, [r6, #8]
    18d4:	e7aa      	b.n	182c <setvbuf+0x28>
    18d6:	4b20      	ldr	r3, [pc, #128]	; (1958 <setvbuf+0x154>)
    18d8:	429c      	cmp	r4, r3
    18da:	d1a7      	bne.n	182c <setvbuf+0x28>
    18dc:	68f4      	ldr	r4, [r6, #12]
    18de:	e7a5      	b.n	182c <setvbuf+0x28>
    18e0:	2f00      	cmp	r7, #0
    18e2:	d0d9      	beq.n	1898 <setvbuf+0x94>
    18e4:	69b3      	ldr	r3, [r6, #24]
    18e6:	2b00      	cmp	r3, #0
    18e8:	d102      	bne.n	18f0 <setvbuf+0xec>
    18ea:	0030      	movs	r0, r6
    18ec:	f000 f9fa 	bl	1ce4 <__sinit>
    18f0:	9b00      	ldr	r3, [sp, #0]
    18f2:	2b01      	cmp	r3, #1
    18f4:	d103      	bne.n	18fe <setvbuf+0xfa>
    18f6:	89a3      	ldrh	r3, [r4, #12]
    18f8:	9a00      	ldr	r2, [sp, #0]
    18fa:	431a      	orrs	r2, r3
    18fc:	81a2      	strh	r2, [r4, #12]
    18fe:	2008      	movs	r0, #8
    1900:	89a3      	ldrh	r3, [r4, #12]
    1902:	6027      	str	r7, [r4, #0]
    1904:	6127      	str	r7, [r4, #16]
    1906:	6165      	str	r5, [r4, #20]
    1908:	4018      	ands	r0, r3
    190a:	d018      	beq.n	193e <setvbuf+0x13a>
    190c:	2001      	movs	r0, #1
    190e:	4018      	ands	r0, r3
    1910:	2300      	movs	r3, #0
    1912:	4298      	cmp	r0, r3
    1914:	d011      	beq.n	193a <setvbuf+0x136>
    1916:	426d      	negs	r5, r5
    1918:	60a3      	str	r3, [r4, #8]
    191a:	61a5      	str	r5, [r4, #24]
    191c:	0018      	movs	r0, r3
    191e:	e7d3      	b.n	18c8 <setvbuf+0xc4>
    1920:	9801      	ldr	r0, [sp, #4]
    1922:	f000 fae1 	bl	1ee8 <malloc>
    1926:	1e07      	subs	r7, r0, #0
    1928:	d0c0      	beq.n	18ac <setvbuf+0xa8>
    192a:	2380      	movs	r3, #128	; 0x80
    192c:	89a2      	ldrh	r2, [r4, #12]
    192e:	9d01      	ldr	r5, [sp, #4]
    1930:	4313      	orrs	r3, r2
    1932:	81a3      	strh	r3, [r4, #12]
    1934:	e7d6      	b.n	18e4 <setvbuf+0xe0>
    1936:	2000      	movs	r0, #0
    1938:	e7ba      	b.n	18b0 <setvbuf+0xac>
    193a:	60a5      	str	r5, [r4, #8]
    193c:	e7c4      	b.n	18c8 <setvbuf+0xc4>
    193e:	60a0      	str	r0, [r4, #8]
    1940:	e7c2      	b.n	18c8 <setvbuf+0xc4>
    1942:	2001      	movs	r0, #1
    1944:	4240      	negs	r0, r0
    1946:	e7bf      	b.n	18c8 <setvbuf+0xc4>
    1948:	20000004 	.word	0x20000004
    194c:	00002a50 	.word	0x00002a50
    1950:	fffff35c 	.word	0xfffff35c
    1954:	00002a70 	.word	0x00002a70
    1958:	00002a30 	.word	0x00002a30

0000195c <__swbuf_r>:
    195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    195e:	0005      	movs	r5, r0
    1960:	000e      	movs	r6, r1
    1962:	0014      	movs	r4, r2
    1964:	2800      	cmp	r0, #0
    1966:	d004      	beq.n	1972 <__swbuf_r+0x16>
    1968:	6983      	ldr	r3, [r0, #24]
    196a:	2b00      	cmp	r3, #0
    196c:	d101      	bne.n	1972 <__swbuf_r+0x16>
    196e:	f000 f9b9 	bl	1ce4 <__sinit>
    1972:	4b22      	ldr	r3, [pc, #136]	; (19fc <__swbuf_r+0xa0>)
    1974:	429c      	cmp	r4, r3
    1976:	d12d      	bne.n	19d4 <__swbuf_r+0x78>
    1978:	686c      	ldr	r4, [r5, #4]
    197a:	69a3      	ldr	r3, [r4, #24]
    197c:	60a3      	str	r3, [r4, #8]
    197e:	89a3      	ldrh	r3, [r4, #12]
    1980:	071b      	lsls	r3, r3, #28
    1982:	d531      	bpl.n	19e8 <__swbuf_r+0x8c>
    1984:	6923      	ldr	r3, [r4, #16]
    1986:	2b00      	cmp	r3, #0
    1988:	d02e      	beq.n	19e8 <__swbuf_r+0x8c>
    198a:	6823      	ldr	r3, [r4, #0]
    198c:	6922      	ldr	r2, [r4, #16]
    198e:	b2f7      	uxtb	r7, r6
    1990:	1a98      	subs	r0, r3, r2
    1992:	6963      	ldr	r3, [r4, #20]
    1994:	b2f6      	uxtb	r6, r6
    1996:	4298      	cmp	r0, r3
    1998:	db05      	blt.n	19a6 <__swbuf_r+0x4a>
    199a:	0021      	movs	r1, r4
    199c:	0028      	movs	r0, r5
    199e:	f000 f933 	bl	1c08 <_fflush_r>
    19a2:	2800      	cmp	r0, #0
    19a4:	d126      	bne.n	19f4 <__swbuf_r+0x98>
    19a6:	68a3      	ldr	r3, [r4, #8]
    19a8:	3001      	adds	r0, #1
    19aa:	3b01      	subs	r3, #1
    19ac:	60a3      	str	r3, [r4, #8]
    19ae:	6823      	ldr	r3, [r4, #0]
    19b0:	1c5a      	adds	r2, r3, #1
    19b2:	6022      	str	r2, [r4, #0]
    19b4:	701f      	strb	r7, [r3, #0]
    19b6:	6963      	ldr	r3, [r4, #20]
    19b8:	4298      	cmp	r0, r3
    19ba:	d004      	beq.n	19c6 <__swbuf_r+0x6a>
    19bc:	89a3      	ldrh	r3, [r4, #12]
    19be:	07db      	lsls	r3, r3, #31
    19c0:	d51a      	bpl.n	19f8 <__swbuf_r+0x9c>
    19c2:	2e0a      	cmp	r6, #10
    19c4:	d118      	bne.n	19f8 <__swbuf_r+0x9c>
    19c6:	0021      	movs	r1, r4
    19c8:	0028      	movs	r0, r5
    19ca:	f000 f91d 	bl	1c08 <_fflush_r>
    19ce:	2800      	cmp	r0, #0
    19d0:	d012      	beq.n	19f8 <__swbuf_r+0x9c>
    19d2:	e00f      	b.n	19f4 <__swbuf_r+0x98>
    19d4:	4b0a      	ldr	r3, [pc, #40]	; (1a00 <__swbuf_r+0xa4>)
    19d6:	429c      	cmp	r4, r3
    19d8:	d101      	bne.n	19de <__swbuf_r+0x82>
    19da:	68ac      	ldr	r4, [r5, #8]
    19dc:	e7cd      	b.n	197a <__swbuf_r+0x1e>
    19de:	4b09      	ldr	r3, [pc, #36]	; (1a04 <__swbuf_r+0xa8>)
    19e0:	429c      	cmp	r4, r3
    19e2:	d1ca      	bne.n	197a <__swbuf_r+0x1e>
    19e4:	68ec      	ldr	r4, [r5, #12]
    19e6:	e7c8      	b.n	197a <__swbuf_r+0x1e>
    19e8:	0021      	movs	r1, r4
    19ea:	0028      	movs	r0, r5
    19ec:	f000 f80c 	bl	1a08 <__swsetup_r>
    19f0:	2800      	cmp	r0, #0
    19f2:	d0ca      	beq.n	198a <__swbuf_r+0x2e>
    19f4:	2601      	movs	r6, #1
    19f6:	4276      	negs	r6, r6
    19f8:	0030      	movs	r0, r6
    19fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19fc:	00002a50 	.word	0x00002a50
    1a00:	00002a70 	.word	0x00002a70
    1a04:	00002a30 	.word	0x00002a30

00001a08 <__swsetup_r>:
    1a08:	4b36      	ldr	r3, [pc, #216]	; (1ae4 <__swsetup_r+0xdc>)
    1a0a:	b570      	push	{r4, r5, r6, lr}
    1a0c:	681d      	ldr	r5, [r3, #0]
    1a0e:	0006      	movs	r6, r0
    1a10:	000c      	movs	r4, r1
    1a12:	2d00      	cmp	r5, #0
    1a14:	d005      	beq.n	1a22 <__swsetup_r+0x1a>
    1a16:	69ab      	ldr	r3, [r5, #24]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d102      	bne.n	1a22 <__swsetup_r+0x1a>
    1a1c:	0028      	movs	r0, r5
    1a1e:	f000 f961 	bl	1ce4 <__sinit>
    1a22:	4b31      	ldr	r3, [pc, #196]	; (1ae8 <__swsetup_r+0xe0>)
    1a24:	429c      	cmp	r4, r3
    1a26:	d10f      	bne.n	1a48 <__swsetup_r+0x40>
    1a28:	686c      	ldr	r4, [r5, #4]
    1a2a:	230c      	movs	r3, #12
    1a2c:	5ee2      	ldrsh	r2, [r4, r3]
    1a2e:	b293      	uxth	r3, r2
    1a30:	0719      	lsls	r1, r3, #28
    1a32:	d42d      	bmi.n	1a90 <__swsetup_r+0x88>
    1a34:	06d9      	lsls	r1, r3, #27
    1a36:	d411      	bmi.n	1a5c <__swsetup_r+0x54>
    1a38:	2309      	movs	r3, #9
    1a3a:	2001      	movs	r0, #1
    1a3c:	6033      	str	r3, [r6, #0]
    1a3e:	3337      	adds	r3, #55	; 0x37
    1a40:	4313      	orrs	r3, r2
    1a42:	81a3      	strh	r3, [r4, #12]
    1a44:	4240      	negs	r0, r0
    1a46:	bd70      	pop	{r4, r5, r6, pc}
    1a48:	4b28      	ldr	r3, [pc, #160]	; (1aec <__swsetup_r+0xe4>)
    1a4a:	429c      	cmp	r4, r3
    1a4c:	d101      	bne.n	1a52 <__swsetup_r+0x4a>
    1a4e:	68ac      	ldr	r4, [r5, #8]
    1a50:	e7eb      	b.n	1a2a <__swsetup_r+0x22>
    1a52:	4b27      	ldr	r3, [pc, #156]	; (1af0 <__swsetup_r+0xe8>)
    1a54:	429c      	cmp	r4, r3
    1a56:	d1e8      	bne.n	1a2a <__swsetup_r+0x22>
    1a58:	68ec      	ldr	r4, [r5, #12]
    1a5a:	e7e6      	b.n	1a2a <__swsetup_r+0x22>
    1a5c:	075b      	lsls	r3, r3, #29
    1a5e:	d513      	bpl.n	1a88 <__swsetup_r+0x80>
    1a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1a62:	2900      	cmp	r1, #0
    1a64:	d008      	beq.n	1a78 <__swsetup_r+0x70>
    1a66:	0023      	movs	r3, r4
    1a68:	3344      	adds	r3, #68	; 0x44
    1a6a:	4299      	cmp	r1, r3
    1a6c:	d002      	beq.n	1a74 <__swsetup_r+0x6c>
    1a6e:	0030      	movs	r0, r6
    1a70:	f000 fa44 	bl	1efc <_free_r>
    1a74:	2300      	movs	r3, #0
    1a76:	6363      	str	r3, [r4, #52]	; 0x34
    1a78:	2224      	movs	r2, #36	; 0x24
    1a7a:	89a3      	ldrh	r3, [r4, #12]
    1a7c:	4393      	bics	r3, r2
    1a7e:	81a3      	strh	r3, [r4, #12]
    1a80:	2300      	movs	r3, #0
    1a82:	6063      	str	r3, [r4, #4]
    1a84:	6923      	ldr	r3, [r4, #16]
    1a86:	6023      	str	r3, [r4, #0]
    1a88:	2308      	movs	r3, #8
    1a8a:	89a2      	ldrh	r2, [r4, #12]
    1a8c:	4313      	orrs	r3, r2
    1a8e:	81a3      	strh	r3, [r4, #12]
    1a90:	6923      	ldr	r3, [r4, #16]
    1a92:	2b00      	cmp	r3, #0
    1a94:	d10b      	bne.n	1aae <__swsetup_r+0xa6>
    1a96:	21a0      	movs	r1, #160	; 0xa0
    1a98:	2280      	movs	r2, #128	; 0x80
    1a9a:	89a3      	ldrh	r3, [r4, #12]
    1a9c:	0089      	lsls	r1, r1, #2
    1a9e:	0092      	lsls	r2, r2, #2
    1aa0:	400b      	ands	r3, r1
    1aa2:	4293      	cmp	r3, r2
    1aa4:	d003      	beq.n	1aae <__swsetup_r+0xa6>
    1aa6:	0021      	movs	r1, r4
    1aa8:	0030      	movs	r0, r6
    1aaa:	f000 f9d9 	bl	1e60 <__smakebuf_r>
    1aae:	2301      	movs	r3, #1
    1ab0:	89a2      	ldrh	r2, [r4, #12]
    1ab2:	4013      	ands	r3, r2
    1ab4:	d011      	beq.n	1ada <__swsetup_r+0xd2>
    1ab6:	2300      	movs	r3, #0
    1ab8:	60a3      	str	r3, [r4, #8]
    1aba:	6963      	ldr	r3, [r4, #20]
    1abc:	425b      	negs	r3, r3
    1abe:	61a3      	str	r3, [r4, #24]
    1ac0:	2000      	movs	r0, #0
    1ac2:	6923      	ldr	r3, [r4, #16]
    1ac4:	4283      	cmp	r3, r0
    1ac6:	d1be      	bne.n	1a46 <__swsetup_r+0x3e>
    1ac8:	230c      	movs	r3, #12
    1aca:	5ee2      	ldrsh	r2, [r4, r3]
    1acc:	0613      	lsls	r3, r2, #24
    1ace:	d5ba      	bpl.n	1a46 <__swsetup_r+0x3e>
    1ad0:	2340      	movs	r3, #64	; 0x40
    1ad2:	4313      	orrs	r3, r2
    1ad4:	81a3      	strh	r3, [r4, #12]
    1ad6:	3801      	subs	r0, #1
    1ad8:	e7b5      	b.n	1a46 <__swsetup_r+0x3e>
    1ada:	0792      	lsls	r2, r2, #30
    1adc:	d400      	bmi.n	1ae0 <__swsetup_r+0xd8>
    1ade:	6963      	ldr	r3, [r4, #20]
    1ae0:	60a3      	str	r3, [r4, #8]
    1ae2:	e7ed      	b.n	1ac0 <__swsetup_r+0xb8>
    1ae4:	20000004 	.word	0x20000004
    1ae8:	00002a50 	.word	0x00002a50
    1aec:	00002a70 	.word	0x00002a70
    1af0:	00002a30 	.word	0x00002a30

00001af4 <__sflush_r>:
    1af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1af6:	898a      	ldrh	r2, [r1, #12]
    1af8:	0005      	movs	r5, r0
    1afa:	000c      	movs	r4, r1
    1afc:	0713      	lsls	r3, r2, #28
    1afe:	d460      	bmi.n	1bc2 <__sflush_r+0xce>
    1b00:	684b      	ldr	r3, [r1, #4]
    1b02:	2b00      	cmp	r3, #0
    1b04:	dc04      	bgt.n	1b10 <__sflush_r+0x1c>
    1b06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1b08:	2b00      	cmp	r3, #0
    1b0a:	dc01      	bgt.n	1b10 <__sflush_r+0x1c>
    1b0c:	2000      	movs	r0, #0
    1b0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1b10:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1b12:	2f00      	cmp	r7, #0
    1b14:	d0fa      	beq.n	1b0c <__sflush_r+0x18>
    1b16:	2300      	movs	r3, #0
    1b18:	682e      	ldr	r6, [r5, #0]
    1b1a:	602b      	str	r3, [r5, #0]
    1b1c:	2380      	movs	r3, #128	; 0x80
    1b1e:	015b      	lsls	r3, r3, #5
    1b20:	401a      	ands	r2, r3
    1b22:	d034      	beq.n	1b8e <__sflush_r+0x9a>
    1b24:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1b26:	89a3      	ldrh	r3, [r4, #12]
    1b28:	075b      	lsls	r3, r3, #29
    1b2a:	d506      	bpl.n	1b3a <__sflush_r+0x46>
    1b2c:	6863      	ldr	r3, [r4, #4]
    1b2e:	1ac0      	subs	r0, r0, r3
    1b30:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1b32:	2b00      	cmp	r3, #0
    1b34:	d001      	beq.n	1b3a <__sflush_r+0x46>
    1b36:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1b38:	1ac0      	subs	r0, r0, r3
    1b3a:	0002      	movs	r2, r0
    1b3c:	6a21      	ldr	r1, [r4, #32]
    1b3e:	2300      	movs	r3, #0
    1b40:	0028      	movs	r0, r5
    1b42:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1b44:	47b8      	blx	r7
    1b46:	89a1      	ldrh	r1, [r4, #12]
    1b48:	1c43      	adds	r3, r0, #1
    1b4a:	d106      	bne.n	1b5a <__sflush_r+0x66>
    1b4c:	682b      	ldr	r3, [r5, #0]
    1b4e:	2b1d      	cmp	r3, #29
    1b50:	d831      	bhi.n	1bb6 <__sflush_r+0xc2>
    1b52:	4a2c      	ldr	r2, [pc, #176]	; (1c04 <__sflush_r+0x110>)
    1b54:	40da      	lsrs	r2, r3
    1b56:	07d3      	lsls	r3, r2, #31
    1b58:	d52d      	bpl.n	1bb6 <__sflush_r+0xc2>
    1b5a:	2300      	movs	r3, #0
    1b5c:	6063      	str	r3, [r4, #4]
    1b5e:	6923      	ldr	r3, [r4, #16]
    1b60:	6023      	str	r3, [r4, #0]
    1b62:	04cb      	lsls	r3, r1, #19
    1b64:	d505      	bpl.n	1b72 <__sflush_r+0x7e>
    1b66:	1c43      	adds	r3, r0, #1
    1b68:	d102      	bne.n	1b70 <__sflush_r+0x7c>
    1b6a:	682b      	ldr	r3, [r5, #0]
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d100      	bne.n	1b72 <__sflush_r+0x7e>
    1b70:	6560      	str	r0, [r4, #84]	; 0x54
    1b72:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1b74:	602e      	str	r6, [r5, #0]
    1b76:	2900      	cmp	r1, #0
    1b78:	d0c8      	beq.n	1b0c <__sflush_r+0x18>
    1b7a:	0023      	movs	r3, r4
    1b7c:	3344      	adds	r3, #68	; 0x44
    1b7e:	4299      	cmp	r1, r3
    1b80:	d002      	beq.n	1b88 <__sflush_r+0x94>
    1b82:	0028      	movs	r0, r5
    1b84:	f000 f9ba 	bl	1efc <_free_r>
    1b88:	2000      	movs	r0, #0
    1b8a:	6360      	str	r0, [r4, #52]	; 0x34
    1b8c:	e7bf      	b.n	1b0e <__sflush_r+0x1a>
    1b8e:	2301      	movs	r3, #1
    1b90:	6a21      	ldr	r1, [r4, #32]
    1b92:	0028      	movs	r0, r5
    1b94:	47b8      	blx	r7
    1b96:	1c43      	adds	r3, r0, #1
    1b98:	d1c5      	bne.n	1b26 <__sflush_r+0x32>
    1b9a:	682b      	ldr	r3, [r5, #0]
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	d0c2      	beq.n	1b26 <__sflush_r+0x32>
    1ba0:	2b1d      	cmp	r3, #29
    1ba2:	d001      	beq.n	1ba8 <__sflush_r+0xb4>
    1ba4:	2b16      	cmp	r3, #22
    1ba6:	d101      	bne.n	1bac <__sflush_r+0xb8>
    1ba8:	602e      	str	r6, [r5, #0]
    1baa:	e7af      	b.n	1b0c <__sflush_r+0x18>
    1bac:	2340      	movs	r3, #64	; 0x40
    1bae:	89a2      	ldrh	r2, [r4, #12]
    1bb0:	4313      	orrs	r3, r2
    1bb2:	81a3      	strh	r3, [r4, #12]
    1bb4:	e7ab      	b.n	1b0e <__sflush_r+0x1a>
    1bb6:	2340      	movs	r3, #64	; 0x40
    1bb8:	430b      	orrs	r3, r1
    1bba:	2001      	movs	r0, #1
    1bbc:	81a3      	strh	r3, [r4, #12]
    1bbe:	4240      	negs	r0, r0
    1bc0:	e7a5      	b.n	1b0e <__sflush_r+0x1a>
    1bc2:	690f      	ldr	r7, [r1, #16]
    1bc4:	2f00      	cmp	r7, #0
    1bc6:	d0a1      	beq.n	1b0c <__sflush_r+0x18>
    1bc8:	680b      	ldr	r3, [r1, #0]
    1bca:	600f      	str	r7, [r1, #0]
    1bcc:	1bdb      	subs	r3, r3, r7
    1bce:	9301      	str	r3, [sp, #4]
    1bd0:	2300      	movs	r3, #0
    1bd2:	0792      	lsls	r2, r2, #30
    1bd4:	d100      	bne.n	1bd8 <__sflush_r+0xe4>
    1bd6:	694b      	ldr	r3, [r1, #20]
    1bd8:	60a3      	str	r3, [r4, #8]
    1bda:	9b01      	ldr	r3, [sp, #4]
    1bdc:	2b00      	cmp	r3, #0
    1bde:	dc00      	bgt.n	1be2 <__sflush_r+0xee>
    1be0:	e794      	b.n	1b0c <__sflush_r+0x18>
    1be2:	9b01      	ldr	r3, [sp, #4]
    1be4:	003a      	movs	r2, r7
    1be6:	6a21      	ldr	r1, [r4, #32]
    1be8:	0028      	movs	r0, r5
    1bea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1bec:	47b0      	blx	r6
    1bee:	2800      	cmp	r0, #0
    1bf0:	dc03      	bgt.n	1bfa <__sflush_r+0x106>
    1bf2:	2340      	movs	r3, #64	; 0x40
    1bf4:	89a2      	ldrh	r2, [r4, #12]
    1bf6:	4313      	orrs	r3, r2
    1bf8:	e7df      	b.n	1bba <__sflush_r+0xc6>
    1bfa:	9b01      	ldr	r3, [sp, #4]
    1bfc:	183f      	adds	r7, r7, r0
    1bfe:	1a1b      	subs	r3, r3, r0
    1c00:	9301      	str	r3, [sp, #4]
    1c02:	e7ea      	b.n	1bda <__sflush_r+0xe6>
    1c04:	20400001 	.word	0x20400001

00001c08 <_fflush_r>:
    1c08:	690b      	ldr	r3, [r1, #16]
    1c0a:	b570      	push	{r4, r5, r6, lr}
    1c0c:	0005      	movs	r5, r0
    1c0e:	000c      	movs	r4, r1
    1c10:	2b00      	cmp	r3, #0
    1c12:	d101      	bne.n	1c18 <_fflush_r+0x10>
    1c14:	2000      	movs	r0, #0
    1c16:	bd70      	pop	{r4, r5, r6, pc}
    1c18:	2800      	cmp	r0, #0
    1c1a:	d004      	beq.n	1c26 <_fflush_r+0x1e>
    1c1c:	6983      	ldr	r3, [r0, #24]
    1c1e:	2b00      	cmp	r3, #0
    1c20:	d101      	bne.n	1c26 <_fflush_r+0x1e>
    1c22:	f000 f85f 	bl	1ce4 <__sinit>
    1c26:	4b0b      	ldr	r3, [pc, #44]	; (1c54 <_fflush_r+0x4c>)
    1c28:	429c      	cmp	r4, r3
    1c2a:	d109      	bne.n	1c40 <_fflush_r+0x38>
    1c2c:	686c      	ldr	r4, [r5, #4]
    1c2e:	220c      	movs	r2, #12
    1c30:	5ea3      	ldrsh	r3, [r4, r2]
    1c32:	2b00      	cmp	r3, #0
    1c34:	d0ee      	beq.n	1c14 <_fflush_r+0xc>
    1c36:	0021      	movs	r1, r4
    1c38:	0028      	movs	r0, r5
    1c3a:	f7ff ff5b 	bl	1af4 <__sflush_r>
    1c3e:	e7ea      	b.n	1c16 <_fflush_r+0xe>
    1c40:	4b05      	ldr	r3, [pc, #20]	; (1c58 <_fflush_r+0x50>)
    1c42:	429c      	cmp	r4, r3
    1c44:	d101      	bne.n	1c4a <_fflush_r+0x42>
    1c46:	68ac      	ldr	r4, [r5, #8]
    1c48:	e7f1      	b.n	1c2e <_fflush_r+0x26>
    1c4a:	4b04      	ldr	r3, [pc, #16]	; (1c5c <_fflush_r+0x54>)
    1c4c:	429c      	cmp	r4, r3
    1c4e:	d1ee      	bne.n	1c2e <_fflush_r+0x26>
    1c50:	68ec      	ldr	r4, [r5, #12]
    1c52:	e7ec      	b.n	1c2e <_fflush_r+0x26>
    1c54:	00002a50 	.word	0x00002a50
    1c58:	00002a70 	.word	0x00002a70
    1c5c:	00002a30 	.word	0x00002a30

00001c60 <_cleanup_r>:
    1c60:	b510      	push	{r4, lr}
    1c62:	4902      	ldr	r1, [pc, #8]	; (1c6c <_cleanup_r+0xc>)
    1c64:	f000 f8b2 	bl	1dcc <_fwalk_reent>
    1c68:	bd10      	pop	{r4, pc}
    1c6a:	46c0      	nop			; (mov r8, r8)
    1c6c:	00001c09 	.word	0x00001c09

00001c70 <std.isra.0>:
    1c70:	2300      	movs	r3, #0
    1c72:	b510      	push	{r4, lr}
    1c74:	0004      	movs	r4, r0
    1c76:	6003      	str	r3, [r0, #0]
    1c78:	6043      	str	r3, [r0, #4]
    1c7a:	6083      	str	r3, [r0, #8]
    1c7c:	8181      	strh	r1, [r0, #12]
    1c7e:	6643      	str	r3, [r0, #100]	; 0x64
    1c80:	81c2      	strh	r2, [r0, #14]
    1c82:	6103      	str	r3, [r0, #16]
    1c84:	6143      	str	r3, [r0, #20]
    1c86:	6183      	str	r3, [r0, #24]
    1c88:	0019      	movs	r1, r3
    1c8a:	2208      	movs	r2, #8
    1c8c:	305c      	adds	r0, #92	; 0x5c
    1c8e:	f7ff fd23 	bl	16d8 <memset>
    1c92:	4b05      	ldr	r3, [pc, #20]	; (1ca8 <std.isra.0+0x38>)
    1c94:	6224      	str	r4, [r4, #32]
    1c96:	6263      	str	r3, [r4, #36]	; 0x24
    1c98:	4b04      	ldr	r3, [pc, #16]	; (1cac <std.isra.0+0x3c>)
    1c9a:	62a3      	str	r3, [r4, #40]	; 0x28
    1c9c:	4b04      	ldr	r3, [pc, #16]	; (1cb0 <std.isra.0+0x40>)
    1c9e:	62e3      	str	r3, [r4, #44]	; 0x2c
    1ca0:	4b04      	ldr	r3, [pc, #16]	; (1cb4 <std.isra.0+0x44>)
    1ca2:	6323      	str	r3, [r4, #48]	; 0x30
    1ca4:	bd10      	pop	{r4, pc}
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	00002609 	.word	0x00002609
    1cac:	00002631 	.word	0x00002631
    1cb0:	00002669 	.word	0x00002669
    1cb4:	00002695 	.word	0x00002695

00001cb8 <__sfmoreglue>:
    1cb8:	b570      	push	{r4, r5, r6, lr}
    1cba:	2568      	movs	r5, #104	; 0x68
    1cbc:	1e4a      	subs	r2, r1, #1
    1cbe:	4355      	muls	r5, r2
    1cc0:	000e      	movs	r6, r1
    1cc2:	0029      	movs	r1, r5
    1cc4:	3174      	adds	r1, #116	; 0x74
    1cc6:	f000 f963 	bl	1f90 <_malloc_r>
    1cca:	1e04      	subs	r4, r0, #0
    1ccc:	d008      	beq.n	1ce0 <__sfmoreglue+0x28>
    1cce:	2100      	movs	r1, #0
    1cd0:	002a      	movs	r2, r5
    1cd2:	6001      	str	r1, [r0, #0]
    1cd4:	6046      	str	r6, [r0, #4]
    1cd6:	300c      	adds	r0, #12
    1cd8:	60a0      	str	r0, [r4, #8]
    1cda:	3268      	adds	r2, #104	; 0x68
    1cdc:	f7ff fcfc 	bl	16d8 <memset>
    1ce0:	0020      	movs	r0, r4
    1ce2:	bd70      	pop	{r4, r5, r6, pc}

00001ce4 <__sinit>:
    1ce4:	6983      	ldr	r3, [r0, #24]
    1ce6:	b513      	push	{r0, r1, r4, lr}
    1ce8:	0004      	movs	r4, r0
    1cea:	2b00      	cmp	r3, #0
    1cec:	d128      	bne.n	1d40 <__sinit+0x5c>
    1cee:	6483      	str	r3, [r0, #72]	; 0x48
    1cf0:	64c3      	str	r3, [r0, #76]	; 0x4c
    1cf2:	6503      	str	r3, [r0, #80]	; 0x50
    1cf4:	4b13      	ldr	r3, [pc, #76]	; (1d44 <__sinit+0x60>)
    1cf6:	4a14      	ldr	r2, [pc, #80]	; (1d48 <__sinit+0x64>)
    1cf8:	681b      	ldr	r3, [r3, #0]
    1cfa:	6282      	str	r2, [r0, #40]	; 0x28
    1cfc:	9301      	str	r3, [sp, #4]
    1cfe:	4298      	cmp	r0, r3
    1d00:	d101      	bne.n	1d06 <__sinit+0x22>
    1d02:	2301      	movs	r3, #1
    1d04:	6183      	str	r3, [r0, #24]
    1d06:	0020      	movs	r0, r4
    1d08:	f000 f820 	bl	1d4c <__sfp>
    1d0c:	6060      	str	r0, [r4, #4]
    1d0e:	0020      	movs	r0, r4
    1d10:	f000 f81c 	bl	1d4c <__sfp>
    1d14:	60a0      	str	r0, [r4, #8]
    1d16:	0020      	movs	r0, r4
    1d18:	f000 f818 	bl	1d4c <__sfp>
    1d1c:	2200      	movs	r2, #0
    1d1e:	60e0      	str	r0, [r4, #12]
    1d20:	2104      	movs	r1, #4
    1d22:	6860      	ldr	r0, [r4, #4]
    1d24:	f7ff ffa4 	bl	1c70 <std.isra.0>
    1d28:	2201      	movs	r2, #1
    1d2a:	2109      	movs	r1, #9
    1d2c:	68a0      	ldr	r0, [r4, #8]
    1d2e:	f7ff ff9f 	bl	1c70 <std.isra.0>
    1d32:	2202      	movs	r2, #2
    1d34:	2112      	movs	r1, #18
    1d36:	68e0      	ldr	r0, [r4, #12]
    1d38:	f7ff ff9a 	bl	1c70 <std.isra.0>
    1d3c:	2301      	movs	r3, #1
    1d3e:	61a3      	str	r3, [r4, #24]
    1d40:	bd13      	pop	{r0, r1, r4, pc}
    1d42:	46c0      	nop			; (mov r8, r8)
    1d44:	00002a2c 	.word	0x00002a2c
    1d48:	00001c61 	.word	0x00001c61

00001d4c <__sfp>:
    1d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d4e:	4b1e      	ldr	r3, [pc, #120]	; (1dc8 <__sfp+0x7c>)
    1d50:	0007      	movs	r7, r0
    1d52:	681e      	ldr	r6, [r3, #0]
    1d54:	69b3      	ldr	r3, [r6, #24]
    1d56:	2b00      	cmp	r3, #0
    1d58:	d102      	bne.n	1d60 <__sfp+0x14>
    1d5a:	0030      	movs	r0, r6
    1d5c:	f7ff ffc2 	bl	1ce4 <__sinit>
    1d60:	3648      	adds	r6, #72	; 0x48
    1d62:	68b4      	ldr	r4, [r6, #8]
    1d64:	6873      	ldr	r3, [r6, #4]
    1d66:	3b01      	subs	r3, #1
    1d68:	d504      	bpl.n	1d74 <__sfp+0x28>
    1d6a:	6833      	ldr	r3, [r6, #0]
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d007      	beq.n	1d80 <__sfp+0x34>
    1d70:	6836      	ldr	r6, [r6, #0]
    1d72:	e7f6      	b.n	1d62 <__sfp+0x16>
    1d74:	220c      	movs	r2, #12
    1d76:	5ea5      	ldrsh	r5, [r4, r2]
    1d78:	2d00      	cmp	r5, #0
    1d7a:	d00d      	beq.n	1d98 <__sfp+0x4c>
    1d7c:	3468      	adds	r4, #104	; 0x68
    1d7e:	e7f2      	b.n	1d66 <__sfp+0x1a>
    1d80:	2104      	movs	r1, #4
    1d82:	0038      	movs	r0, r7
    1d84:	f7ff ff98 	bl	1cb8 <__sfmoreglue>
    1d88:	6030      	str	r0, [r6, #0]
    1d8a:	2800      	cmp	r0, #0
    1d8c:	d1f0      	bne.n	1d70 <__sfp+0x24>
    1d8e:	230c      	movs	r3, #12
    1d90:	0004      	movs	r4, r0
    1d92:	603b      	str	r3, [r7, #0]
    1d94:	0020      	movs	r0, r4
    1d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d98:	2301      	movs	r3, #1
    1d9a:	0020      	movs	r0, r4
    1d9c:	425b      	negs	r3, r3
    1d9e:	81e3      	strh	r3, [r4, #14]
    1da0:	3302      	adds	r3, #2
    1da2:	81a3      	strh	r3, [r4, #12]
    1da4:	6665      	str	r5, [r4, #100]	; 0x64
    1da6:	6025      	str	r5, [r4, #0]
    1da8:	60a5      	str	r5, [r4, #8]
    1daa:	6065      	str	r5, [r4, #4]
    1dac:	6125      	str	r5, [r4, #16]
    1dae:	6165      	str	r5, [r4, #20]
    1db0:	61a5      	str	r5, [r4, #24]
    1db2:	2208      	movs	r2, #8
    1db4:	0029      	movs	r1, r5
    1db6:	305c      	adds	r0, #92	; 0x5c
    1db8:	f7ff fc8e 	bl	16d8 <memset>
    1dbc:	6365      	str	r5, [r4, #52]	; 0x34
    1dbe:	63a5      	str	r5, [r4, #56]	; 0x38
    1dc0:	64a5      	str	r5, [r4, #72]	; 0x48
    1dc2:	64e5      	str	r5, [r4, #76]	; 0x4c
    1dc4:	e7e6      	b.n	1d94 <__sfp+0x48>
    1dc6:	46c0      	nop			; (mov r8, r8)
    1dc8:	00002a2c 	.word	0x00002a2c

00001dcc <_fwalk_reent>:
    1dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1dce:	0004      	movs	r4, r0
    1dd0:	0007      	movs	r7, r0
    1dd2:	2600      	movs	r6, #0
    1dd4:	9101      	str	r1, [sp, #4]
    1dd6:	3448      	adds	r4, #72	; 0x48
    1dd8:	2c00      	cmp	r4, #0
    1dda:	d101      	bne.n	1de0 <_fwalk_reent+0x14>
    1ddc:	0030      	movs	r0, r6
    1dde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1de0:	6863      	ldr	r3, [r4, #4]
    1de2:	68a5      	ldr	r5, [r4, #8]
    1de4:	9300      	str	r3, [sp, #0]
    1de6:	9b00      	ldr	r3, [sp, #0]
    1de8:	3b01      	subs	r3, #1
    1dea:	9300      	str	r3, [sp, #0]
    1dec:	d501      	bpl.n	1df2 <_fwalk_reent+0x26>
    1dee:	6824      	ldr	r4, [r4, #0]
    1df0:	e7f2      	b.n	1dd8 <_fwalk_reent+0xc>
    1df2:	89ab      	ldrh	r3, [r5, #12]
    1df4:	2b01      	cmp	r3, #1
    1df6:	d908      	bls.n	1e0a <_fwalk_reent+0x3e>
    1df8:	220e      	movs	r2, #14
    1dfa:	5eab      	ldrsh	r3, [r5, r2]
    1dfc:	3301      	adds	r3, #1
    1dfe:	d004      	beq.n	1e0a <_fwalk_reent+0x3e>
    1e00:	0029      	movs	r1, r5
    1e02:	0038      	movs	r0, r7
    1e04:	9b01      	ldr	r3, [sp, #4]
    1e06:	4798      	blx	r3
    1e08:	4306      	orrs	r6, r0
    1e0a:	3568      	adds	r5, #104	; 0x68
    1e0c:	e7eb      	b.n	1de6 <_fwalk_reent+0x1a>
	...

00001e10 <__swhatbuf_r>:
    1e10:	b570      	push	{r4, r5, r6, lr}
    1e12:	000e      	movs	r6, r1
    1e14:	001d      	movs	r5, r3
    1e16:	230e      	movs	r3, #14
    1e18:	5ec9      	ldrsh	r1, [r1, r3]
    1e1a:	b090      	sub	sp, #64	; 0x40
    1e1c:	0014      	movs	r4, r2
    1e1e:	2900      	cmp	r1, #0
    1e20:	da07      	bge.n	1e32 <__swhatbuf_r+0x22>
    1e22:	2300      	movs	r3, #0
    1e24:	602b      	str	r3, [r5, #0]
    1e26:	89b3      	ldrh	r3, [r6, #12]
    1e28:	061b      	lsls	r3, r3, #24
    1e2a:	d411      	bmi.n	1e50 <__swhatbuf_r+0x40>
    1e2c:	2380      	movs	r3, #128	; 0x80
    1e2e:	00db      	lsls	r3, r3, #3
    1e30:	e00f      	b.n	1e52 <__swhatbuf_r+0x42>
    1e32:	aa01      	add	r2, sp, #4
    1e34:	f000 fc5a 	bl	26ec <_fstat_r>
    1e38:	2800      	cmp	r0, #0
    1e3a:	dbf2      	blt.n	1e22 <__swhatbuf_r+0x12>
    1e3c:	22f0      	movs	r2, #240	; 0xf0
    1e3e:	9b02      	ldr	r3, [sp, #8]
    1e40:	0212      	lsls	r2, r2, #8
    1e42:	4013      	ands	r3, r2
    1e44:	4a05      	ldr	r2, [pc, #20]	; (1e5c <__swhatbuf_r+0x4c>)
    1e46:	189b      	adds	r3, r3, r2
    1e48:	425a      	negs	r2, r3
    1e4a:	4153      	adcs	r3, r2
    1e4c:	602b      	str	r3, [r5, #0]
    1e4e:	e7ed      	b.n	1e2c <__swhatbuf_r+0x1c>
    1e50:	2340      	movs	r3, #64	; 0x40
    1e52:	2000      	movs	r0, #0
    1e54:	6023      	str	r3, [r4, #0]
    1e56:	b010      	add	sp, #64	; 0x40
    1e58:	bd70      	pop	{r4, r5, r6, pc}
    1e5a:	46c0      	nop			; (mov r8, r8)
    1e5c:	ffffe000 	.word	0xffffe000

00001e60 <__smakebuf_r>:
    1e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e62:	2602      	movs	r6, #2
    1e64:	898b      	ldrh	r3, [r1, #12]
    1e66:	0005      	movs	r5, r0
    1e68:	000c      	movs	r4, r1
    1e6a:	4233      	tst	r3, r6
    1e6c:	d006      	beq.n	1e7c <__smakebuf_r+0x1c>
    1e6e:	0023      	movs	r3, r4
    1e70:	3347      	adds	r3, #71	; 0x47
    1e72:	6023      	str	r3, [r4, #0]
    1e74:	6123      	str	r3, [r4, #16]
    1e76:	2301      	movs	r3, #1
    1e78:	6163      	str	r3, [r4, #20]
    1e7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1e7c:	ab01      	add	r3, sp, #4
    1e7e:	466a      	mov	r2, sp
    1e80:	f7ff ffc6 	bl	1e10 <__swhatbuf_r>
    1e84:	9900      	ldr	r1, [sp, #0]
    1e86:	0007      	movs	r7, r0
    1e88:	0028      	movs	r0, r5
    1e8a:	f000 f881 	bl	1f90 <_malloc_r>
    1e8e:	2800      	cmp	r0, #0
    1e90:	d108      	bne.n	1ea4 <__smakebuf_r+0x44>
    1e92:	220c      	movs	r2, #12
    1e94:	5ea3      	ldrsh	r3, [r4, r2]
    1e96:	059a      	lsls	r2, r3, #22
    1e98:	d4ef      	bmi.n	1e7a <__smakebuf_r+0x1a>
    1e9a:	2203      	movs	r2, #3
    1e9c:	4393      	bics	r3, r2
    1e9e:	431e      	orrs	r6, r3
    1ea0:	81a6      	strh	r6, [r4, #12]
    1ea2:	e7e4      	b.n	1e6e <__smakebuf_r+0xe>
    1ea4:	4b0f      	ldr	r3, [pc, #60]	; (1ee4 <__smakebuf_r+0x84>)
    1ea6:	62ab      	str	r3, [r5, #40]	; 0x28
    1ea8:	2380      	movs	r3, #128	; 0x80
    1eaa:	89a2      	ldrh	r2, [r4, #12]
    1eac:	6020      	str	r0, [r4, #0]
    1eae:	4313      	orrs	r3, r2
    1eb0:	81a3      	strh	r3, [r4, #12]
    1eb2:	9b00      	ldr	r3, [sp, #0]
    1eb4:	6120      	str	r0, [r4, #16]
    1eb6:	6163      	str	r3, [r4, #20]
    1eb8:	9b01      	ldr	r3, [sp, #4]
    1eba:	2b00      	cmp	r3, #0
    1ebc:	d00d      	beq.n	1eda <__smakebuf_r+0x7a>
    1ebe:	230e      	movs	r3, #14
    1ec0:	5ee1      	ldrsh	r1, [r4, r3]
    1ec2:	0028      	movs	r0, r5
    1ec4:	f000 fc24 	bl	2710 <_isatty_r>
    1ec8:	2800      	cmp	r0, #0
    1eca:	d006      	beq.n	1eda <__smakebuf_r+0x7a>
    1ecc:	2203      	movs	r2, #3
    1ece:	89a3      	ldrh	r3, [r4, #12]
    1ed0:	4393      	bics	r3, r2
    1ed2:	001a      	movs	r2, r3
    1ed4:	2301      	movs	r3, #1
    1ed6:	4313      	orrs	r3, r2
    1ed8:	81a3      	strh	r3, [r4, #12]
    1eda:	89a0      	ldrh	r0, [r4, #12]
    1edc:	4338      	orrs	r0, r7
    1ede:	81a0      	strh	r0, [r4, #12]
    1ee0:	e7cb      	b.n	1e7a <__smakebuf_r+0x1a>
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	00001c61 	.word	0x00001c61

00001ee8 <malloc>:
    1ee8:	b510      	push	{r4, lr}
    1eea:	4b03      	ldr	r3, [pc, #12]	; (1ef8 <malloc+0x10>)
    1eec:	0001      	movs	r1, r0
    1eee:	6818      	ldr	r0, [r3, #0]
    1ef0:	f000 f84e 	bl	1f90 <_malloc_r>
    1ef4:	bd10      	pop	{r4, pc}
    1ef6:	46c0      	nop			; (mov r8, r8)
    1ef8:	20000004 	.word	0x20000004

00001efc <_free_r>:
    1efc:	b570      	push	{r4, r5, r6, lr}
    1efe:	0005      	movs	r5, r0
    1f00:	2900      	cmp	r1, #0
    1f02:	d010      	beq.n	1f26 <_free_r+0x2a>
    1f04:	1f0c      	subs	r4, r1, #4
    1f06:	6823      	ldr	r3, [r4, #0]
    1f08:	2b00      	cmp	r3, #0
    1f0a:	da00      	bge.n	1f0e <_free_r+0x12>
    1f0c:	18e4      	adds	r4, r4, r3
    1f0e:	0028      	movs	r0, r5
    1f10:	f000 fc2f 	bl	2772 <__malloc_lock>
    1f14:	4a1d      	ldr	r2, [pc, #116]	; (1f8c <_free_r+0x90>)
    1f16:	6813      	ldr	r3, [r2, #0]
    1f18:	2b00      	cmp	r3, #0
    1f1a:	d105      	bne.n	1f28 <_free_r+0x2c>
    1f1c:	6063      	str	r3, [r4, #4]
    1f1e:	6014      	str	r4, [r2, #0]
    1f20:	0028      	movs	r0, r5
    1f22:	f000 fc27 	bl	2774 <__malloc_unlock>
    1f26:	bd70      	pop	{r4, r5, r6, pc}
    1f28:	42a3      	cmp	r3, r4
    1f2a:	d909      	bls.n	1f40 <_free_r+0x44>
    1f2c:	6821      	ldr	r1, [r4, #0]
    1f2e:	1860      	adds	r0, r4, r1
    1f30:	4283      	cmp	r3, r0
    1f32:	d1f3      	bne.n	1f1c <_free_r+0x20>
    1f34:	6818      	ldr	r0, [r3, #0]
    1f36:	685b      	ldr	r3, [r3, #4]
    1f38:	1841      	adds	r1, r0, r1
    1f3a:	6021      	str	r1, [r4, #0]
    1f3c:	e7ee      	b.n	1f1c <_free_r+0x20>
    1f3e:	0013      	movs	r3, r2
    1f40:	685a      	ldr	r2, [r3, #4]
    1f42:	2a00      	cmp	r2, #0
    1f44:	d001      	beq.n	1f4a <_free_r+0x4e>
    1f46:	42a2      	cmp	r2, r4
    1f48:	d9f9      	bls.n	1f3e <_free_r+0x42>
    1f4a:	6819      	ldr	r1, [r3, #0]
    1f4c:	1858      	adds	r0, r3, r1
    1f4e:	42a0      	cmp	r0, r4
    1f50:	d10b      	bne.n	1f6a <_free_r+0x6e>
    1f52:	6820      	ldr	r0, [r4, #0]
    1f54:	1809      	adds	r1, r1, r0
    1f56:	1858      	adds	r0, r3, r1
    1f58:	6019      	str	r1, [r3, #0]
    1f5a:	4282      	cmp	r2, r0
    1f5c:	d1e0      	bne.n	1f20 <_free_r+0x24>
    1f5e:	6810      	ldr	r0, [r2, #0]
    1f60:	6852      	ldr	r2, [r2, #4]
    1f62:	1841      	adds	r1, r0, r1
    1f64:	6019      	str	r1, [r3, #0]
    1f66:	605a      	str	r2, [r3, #4]
    1f68:	e7da      	b.n	1f20 <_free_r+0x24>
    1f6a:	42a0      	cmp	r0, r4
    1f6c:	d902      	bls.n	1f74 <_free_r+0x78>
    1f6e:	230c      	movs	r3, #12
    1f70:	602b      	str	r3, [r5, #0]
    1f72:	e7d5      	b.n	1f20 <_free_r+0x24>
    1f74:	6821      	ldr	r1, [r4, #0]
    1f76:	1860      	adds	r0, r4, r1
    1f78:	4282      	cmp	r2, r0
    1f7a:	d103      	bne.n	1f84 <_free_r+0x88>
    1f7c:	6810      	ldr	r0, [r2, #0]
    1f7e:	6852      	ldr	r2, [r2, #4]
    1f80:	1841      	adds	r1, r0, r1
    1f82:	6021      	str	r1, [r4, #0]
    1f84:	6062      	str	r2, [r4, #4]
    1f86:	605c      	str	r4, [r3, #4]
    1f88:	e7ca      	b.n	1f20 <_free_r+0x24>
    1f8a:	46c0      	nop			; (mov r8, r8)
    1f8c:	200000b4 	.word	0x200000b4

00001f90 <_malloc_r>:
    1f90:	2303      	movs	r3, #3
    1f92:	b570      	push	{r4, r5, r6, lr}
    1f94:	1ccd      	adds	r5, r1, #3
    1f96:	439d      	bics	r5, r3
    1f98:	3508      	adds	r5, #8
    1f9a:	0006      	movs	r6, r0
    1f9c:	2d0c      	cmp	r5, #12
    1f9e:	d21e      	bcs.n	1fde <_malloc_r+0x4e>
    1fa0:	250c      	movs	r5, #12
    1fa2:	42a9      	cmp	r1, r5
    1fa4:	d81d      	bhi.n	1fe2 <_malloc_r+0x52>
    1fa6:	0030      	movs	r0, r6
    1fa8:	f000 fbe3 	bl	2772 <__malloc_lock>
    1fac:	4a25      	ldr	r2, [pc, #148]	; (2044 <_malloc_r+0xb4>)
    1fae:	6814      	ldr	r4, [r2, #0]
    1fb0:	0021      	movs	r1, r4
    1fb2:	2900      	cmp	r1, #0
    1fb4:	d119      	bne.n	1fea <_malloc_r+0x5a>
    1fb6:	4c24      	ldr	r4, [pc, #144]	; (2048 <_malloc_r+0xb8>)
    1fb8:	6823      	ldr	r3, [r4, #0]
    1fba:	2b00      	cmp	r3, #0
    1fbc:	d103      	bne.n	1fc6 <_malloc_r+0x36>
    1fbe:	0030      	movs	r0, r6
    1fc0:	f000 fb10 	bl	25e4 <_sbrk_r>
    1fc4:	6020      	str	r0, [r4, #0]
    1fc6:	0029      	movs	r1, r5
    1fc8:	0030      	movs	r0, r6
    1fca:	f000 fb0b 	bl	25e4 <_sbrk_r>
    1fce:	1c43      	adds	r3, r0, #1
    1fd0:	d12c      	bne.n	202c <_malloc_r+0x9c>
    1fd2:	230c      	movs	r3, #12
    1fd4:	0030      	movs	r0, r6
    1fd6:	6033      	str	r3, [r6, #0]
    1fd8:	f000 fbcc 	bl	2774 <__malloc_unlock>
    1fdc:	e003      	b.n	1fe6 <_malloc_r+0x56>
    1fde:	2d00      	cmp	r5, #0
    1fe0:	dadf      	bge.n	1fa2 <_malloc_r+0x12>
    1fe2:	230c      	movs	r3, #12
    1fe4:	6033      	str	r3, [r6, #0]
    1fe6:	2000      	movs	r0, #0
    1fe8:	bd70      	pop	{r4, r5, r6, pc}
    1fea:	680b      	ldr	r3, [r1, #0]
    1fec:	1b5b      	subs	r3, r3, r5
    1fee:	d41a      	bmi.n	2026 <_malloc_r+0x96>
    1ff0:	2b0b      	cmp	r3, #11
    1ff2:	d903      	bls.n	1ffc <_malloc_r+0x6c>
    1ff4:	600b      	str	r3, [r1, #0]
    1ff6:	18cc      	adds	r4, r1, r3
    1ff8:	6025      	str	r5, [r4, #0]
    1ffa:	e003      	b.n	2004 <_malloc_r+0x74>
    1ffc:	428c      	cmp	r4, r1
    1ffe:	d10e      	bne.n	201e <_malloc_r+0x8e>
    2000:	6863      	ldr	r3, [r4, #4]
    2002:	6013      	str	r3, [r2, #0]
    2004:	0030      	movs	r0, r6
    2006:	f000 fbb5 	bl	2774 <__malloc_unlock>
    200a:	0020      	movs	r0, r4
    200c:	2207      	movs	r2, #7
    200e:	300b      	adds	r0, #11
    2010:	1d23      	adds	r3, r4, #4
    2012:	4390      	bics	r0, r2
    2014:	1ac3      	subs	r3, r0, r3
    2016:	d0e7      	beq.n	1fe8 <_malloc_r+0x58>
    2018:	425a      	negs	r2, r3
    201a:	50e2      	str	r2, [r4, r3]
    201c:	e7e4      	b.n	1fe8 <_malloc_r+0x58>
    201e:	684b      	ldr	r3, [r1, #4]
    2020:	6063      	str	r3, [r4, #4]
    2022:	000c      	movs	r4, r1
    2024:	e7ee      	b.n	2004 <_malloc_r+0x74>
    2026:	000c      	movs	r4, r1
    2028:	6849      	ldr	r1, [r1, #4]
    202a:	e7c2      	b.n	1fb2 <_malloc_r+0x22>
    202c:	2303      	movs	r3, #3
    202e:	1cc4      	adds	r4, r0, #3
    2030:	439c      	bics	r4, r3
    2032:	42a0      	cmp	r0, r4
    2034:	d0e0      	beq.n	1ff8 <_malloc_r+0x68>
    2036:	1a21      	subs	r1, r4, r0
    2038:	0030      	movs	r0, r6
    203a:	f000 fad3 	bl	25e4 <_sbrk_r>
    203e:	1c43      	adds	r3, r0, #1
    2040:	d1da      	bne.n	1ff8 <_malloc_r+0x68>
    2042:	e7c6      	b.n	1fd2 <_malloc_r+0x42>
    2044:	200000b4 	.word	0x200000b4
    2048:	200000b8 	.word	0x200000b8

0000204c <__sfputc_r>:
    204c:	6893      	ldr	r3, [r2, #8]
    204e:	b510      	push	{r4, lr}
    2050:	3b01      	subs	r3, #1
    2052:	6093      	str	r3, [r2, #8]
    2054:	2b00      	cmp	r3, #0
    2056:	da05      	bge.n	2064 <__sfputc_r+0x18>
    2058:	6994      	ldr	r4, [r2, #24]
    205a:	42a3      	cmp	r3, r4
    205c:	db08      	blt.n	2070 <__sfputc_r+0x24>
    205e:	b2cb      	uxtb	r3, r1
    2060:	2b0a      	cmp	r3, #10
    2062:	d005      	beq.n	2070 <__sfputc_r+0x24>
    2064:	6813      	ldr	r3, [r2, #0]
    2066:	1c58      	adds	r0, r3, #1
    2068:	6010      	str	r0, [r2, #0]
    206a:	7019      	strb	r1, [r3, #0]
    206c:	b2c8      	uxtb	r0, r1
    206e:	bd10      	pop	{r4, pc}
    2070:	f7ff fc74 	bl	195c <__swbuf_r>
    2074:	e7fb      	b.n	206e <__sfputc_r+0x22>

00002076 <__sfputs_r>:
    2076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2078:	0006      	movs	r6, r0
    207a:	000f      	movs	r7, r1
    207c:	0014      	movs	r4, r2
    207e:	18d5      	adds	r5, r2, r3
    2080:	42ac      	cmp	r4, r5
    2082:	d101      	bne.n	2088 <__sfputs_r+0x12>
    2084:	2000      	movs	r0, #0
    2086:	e007      	b.n	2098 <__sfputs_r+0x22>
    2088:	7821      	ldrb	r1, [r4, #0]
    208a:	003a      	movs	r2, r7
    208c:	0030      	movs	r0, r6
    208e:	f7ff ffdd 	bl	204c <__sfputc_r>
    2092:	3401      	adds	r4, #1
    2094:	1c43      	adds	r3, r0, #1
    2096:	d1f3      	bne.n	2080 <__sfputs_r+0xa>
    2098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000209c <_vfiprintf_r>:
    209c:	b5f0      	push	{r4, r5, r6, r7, lr}
    209e:	b09f      	sub	sp, #124	; 0x7c
    20a0:	0006      	movs	r6, r0
    20a2:	000f      	movs	r7, r1
    20a4:	0014      	movs	r4, r2
    20a6:	9305      	str	r3, [sp, #20]
    20a8:	2800      	cmp	r0, #0
    20aa:	d004      	beq.n	20b6 <_vfiprintf_r+0x1a>
    20ac:	6983      	ldr	r3, [r0, #24]
    20ae:	2b00      	cmp	r3, #0
    20b0:	d101      	bne.n	20b6 <_vfiprintf_r+0x1a>
    20b2:	f7ff fe17 	bl	1ce4 <__sinit>
    20b6:	4b7f      	ldr	r3, [pc, #508]	; (22b4 <_vfiprintf_r+0x218>)
    20b8:	429f      	cmp	r7, r3
    20ba:	d15c      	bne.n	2176 <_vfiprintf_r+0xda>
    20bc:	6877      	ldr	r7, [r6, #4]
    20be:	89bb      	ldrh	r3, [r7, #12]
    20c0:	071b      	lsls	r3, r3, #28
    20c2:	d562      	bpl.n	218a <_vfiprintf_r+0xee>
    20c4:	693b      	ldr	r3, [r7, #16]
    20c6:	2b00      	cmp	r3, #0
    20c8:	d05f      	beq.n	218a <_vfiprintf_r+0xee>
    20ca:	2300      	movs	r3, #0
    20cc:	ad06      	add	r5, sp, #24
    20ce:	616b      	str	r3, [r5, #20]
    20d0:	3320      	adds	r3, #32
    20d2:	766b      	strb	r3, [r5, #25]
    20d4:	3310      	adds	r3, #16
    20d6:	76ab      	strb	r3, [r5, #26]
    20d8:	9402      	str	r4, [sp, #8]
    20da:	9c02      	ldr	r4, [sp, #8]
    20dc:	7823      	ldrb	r3, [r4, #0]
    20de:	2b00      	cmp	r3, #0
    20e0:	d15d      	bne.n	219e <_vfiprintf_r+0x102>
    20e2:	9b02      	ldr	r3, [sp, #8]
    20e4:	1ae3      	subs	r3, r4, r3
    20e6:	9304      	str	r3, [sp, #16]
    20e8:	d00d      	beq.n	2106 <_vfiprintf_r+0x6a>
    20ea:	9b04      	ldr	r3, [sp, #16]
    20ec:	9a02      	ldr	r2, [sp, #8]
    20ee:	0039      	movs	r1, r7
    20f0:	0030      	movs	r0, r6
    20f2:	f7ff ffc0 	bl	2076 <__sfputs_r>
    20f6:	1c43      	adds	r3, r0, #1
    20f8:	d100      	bne.n	20fc <_vfiprintf_r+0x60>
    20fa:	e0cc      	b.n	2296 <_vfiprintf_r+0x1fa>
    20fc:	696a      	ldr	r2, [r5, #20]
    20fe:	9b04      	ldr	r3, [sp, #16]
    2100:	4694      	mov	ip, r2
    2102:	4463      	add	r3, ip
    2104:	616b      	str	r3, [r5, #20]
    2106:	7823      	ldrb	r3, [r4, #0]
    2108:	2b00      	cmp	r3, #0
    210a:	d100      	bne.n	210e <_vfiprintf_r+0x72>
    210c:	e0c3      	b.n	2296 <_vfiprintf_r+0x1fa>
    210e:	2201      	movs	r2, #1
    2110:	2300      	movs	r3, #0
    2112:	4252      	negs	r2, r2
    2114:	606a      	str	r2, [r5, #4]
    2116:	a902      	add	r1, sp, #8
    2118:	3254      	adds	r2, #84	; 0x54
    211a:	1852      	adds	r2, r2, r1
    211c:	3401      	adds	r4, #1
    211e:	602b      	str	r3, [r5, #0]
    2120:	60eb      	str	r3, [r5, #12]
    2122:	60ab      	str	r3, [r5, #8]
    2124:	7013      	strb	r3, [r2, #0]
    2126:	65ab      	str	r3, [r5, #88]	; 0x58
    2128:	7821      	ldrb	r1, [r4, #0]
    212a:	2205      	movs	r2, #5
    212c:	4862      	ldr	r0, [pc, #392]	; (22b8 <_vfiprintf_r+0x21c>)
    212e:	f000 fb15 	bl	275c <memchr>
    2132:	1c63      	adds	r3, r4, #1
    2134:	469c      	mov	ip, r3
    2136:	2800      	cmp	r0, #0
    2138:	d135      	bne.n	21a6 <_vfiprintf_r+0x10a>
    213a:	6829      	ldr	r1, [r5, #0]
    213c:	06cb      	lsls	r3, r1, #27
    213e:	d504      	bpl.n	214a <_vfiprintf_r+0xae>
    2140:	2353      	movs	r3, #83	; 0x53
    2142:	aa02      	add	r2, sp, #8
    2144:	3020      	adds	r0, #32
    2146:	189b      	adds	r3, r3, r2
    2148:	7018      	strb	r0, [r3, #0]
    214a:	070b      	lsls	r3, r1, #28
    214c:	d504      	bpl.n	2158 <_vfiprintf_r+0xbc>
    214e:	2353      	movs	r3, #83	; 0x53
    2150:	202b      	movs	r0, #43	; 0x2b
    2152:	aa02      	add	r2, sp, #8
    2154:	189b      	adds	r3, r3, r2
    2156:	7018      	strb	r0, [r3, #0]
    2158:	7823      	ldrb	r3, [r4, #0]
    215a:	2b2a      	cmp	r3, #42	; 0x2a
    215c:	d02c      	beq.n	21b8 <_vfiprintf_r+0x11c>
    215e:	2000      	movs	r0, #0
    2160:	210a      	movs	r1, #10
    2162:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2164:	7822      	ldrb	r2, [r4, #0]
    2166:	3a30      	subs	r2, #48	; 0x30
    2168:	2a09      	cmp	r2, #9
    216a:	d800      	bhi.n	216e <_vfiprintf_r+0xd2>
    216c:	e06b      	b.n	2246 <_vfiprintf_r+0x1aa>
    216e:	2800      	cmp	r0, #0
    2170:	d02a      	beq.n	21c8 <_vfiprintf_r+0x12c>
    2172:	9309      	str	r3, [sp, #36]	; 0x24
    2174:	e028      	b.n	21c8 <_vfiprintf_r+0x12c>
    2176:	4b51      	ldr	r3, [pc, #324]	; (22bc <_vfiprintf_r+0x220>)
    2178:	429f      	cmp	r7, r3
    217a:	d101      	bne.n	2180 <_vfiprintf_r+0xe4>
    217c:	68b7      	ldr	r7, [r6, #8]
    217e:	e79e      	b.n	20be <_vfiprintf_r+0x22>
    2180:	4b4f      	ldr	r3, [pc, #316]	; (22c0 <_vfiprintf_r+0x224>)
    2182:	429f      	cmp	r7, r3
    2184:	d19b      	bne.n	20be <_vfiprintf_r+0x22>
    2186:	68f7      	ldr	r7, [r6, #12]
    2188:	e799      	b.n	20be <_vfiprintf_r+0x22>
    218a:	0039      	movs	r1, r7
    218c:	0030      	movs	r0, r6
    218e:	f7ff fc3b 	bl	1a08 <__swsetup_r>
    2192:	2800      	cmp	r0, #0
    2194:	d099      	beq.n	20ca <_vfiprintf_r+0x2e>
    2196:	2001      	movs	r0, #1
    2198:	4240      	negs	r0, r0
    219a:	b01f      	add	sp, #124	; 0x7c
    219c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    219e:	2b25      	cmp	r3, #37	; 0x25
    21a0:	d09f      	beq.n	20e2 <_vfiprintf_r+0x46>
    21a2:	3401      	adds	r4, #1
    21a4:	e79a      	b.n	20dc <_vfiprintf_r+0x40>
    21a6:	4b44      	ldr	r3, [pc, #272]	; (22b8 <_vfiprintf_r+0x21c>)
    21a8:	6829      	ldr	r1, [r5, #0]
    21aa:	1ac0      	subs	r0, r0, r3
    21ac:	2301      	movs	r3, #1
    21ae:	4083      	lsls	r3, r0
    21b0:	430b      	orrs	r3, r1
    21b2:	602b      	str	r3, [r5, #0]
    21b4:	4664      	mov	r4, ip
    21b6:	e7b7      	b.n	2128 <_vfiprintf_r+0x8c>
    21b8:	9b05      	ldr	r3, [sp, #20]
    21ba:	1d18      	adds	r0, r3, #4
    21bc:	681b      	ldr	r3, [r3, #0]
    21be:	9005      	str	r0, [sp, #20]
    21c0:	2b00      	cmp	r3, #0
    21c2:	db3a      	blt.n	223a <_vfiprintf_r+0x19e>
    21c4:	9309      	str	r3, [sp, #36]	; 0x24
    21c6:	4664      	mov	r4, ip
    21c8:	7823      	ldrb	r3, [r4, #0]
    21ca:	2b2e      	cmp	r3, #46	; 0x2e
    21cc:	d10b      	bne.n	21e6 <_vfiprintf_r+0x14a>
    21ce:	7863      	ldrb	r3, [r4, #1]
    21d0:	1c62      	adds	r2, r4, #1
    21d2:	2b2a      	cmp	r3, #42	; 0x2a
    21d4:	d13f      	bne.n	2256 <_vfiprintf_r+0x1ba>
    21d6:	9b05      	ldr	r3, [sp, #20]
    21d8:	3402      	adds	r4, #2
    21da:	1d1a      	adds	r2, r3, #4
    21dc:	681b      	ldr	r3, [r3, #0]
    21de:	9205      	str	r2, [sp, #20]
    21e0:	2b00      	cmp	r3, #0
    21e2:	db35      	blt.n	2250 <_vfiprintf_r+0x1b4>
    21e4:	9307      	str	r3, [sp, #28]
    21e6:	7821      	ldrb	r1, [r4, #0]
    21e8:	2203      	movs	r2, #3
    21ea:	4836      	ldr	r0, [pc, #216]	; (22c4 <_vfiprintf_r+0x228>)
    21ec:	f000 fab6 	bl	275c <memchr>
    21f0:	2800      	cmp	r0, #0
    21f2:	d007      	beq.n	2204 <_vfiprintf_r+0x168>
    21f4:	4b33      	ldr	r3, [pc, #204]	; (22c4 <_vfiprintf_r+0x228>)
    21f6:	682a      	ldr	r2, [r5, #0]
    21f8:	1ac0      	subs	r0, r0, r3
    21fa:	2340      	movs	r3, #64	; 0x40
    21fc:	4083      	lsls	r3, r0
    21fe:	4313      	orrs	r3, r2
    2200:	602b      	str	r3, [r5, #0]
    2202:	3401      	adds	r4, #1
    2204:	7821      	ldrb	r1, [r4, #0]
    2206:	1c63      	adds	r3, r4, #1
    2208:	2206      	movs	r2, #6
    220a:	482f      	ldr	r0, [pc, #188]	; (22c8 <_vfiprintf_r+0x22c>)
    220c:	9302      	str	r3, [sp, #8]
    220e:	7629      	strb	r1, [r5, #24]
    2210:	f000 faa4 	bl	275c <memchr>
    2214:	2800      	cmp	r0, #0
    2216:	d044      	beq.n	22a2 <_vfiprintf_r+0x206>
    2218:	4b2c      	ldr	r3, [pc, #176]	; (22cc <_vfiprintf_r+0x230>)
    221a:	2b00      	cmp	r3, #0
    221c:	d12f      	bne.n	227e <_vfiprintf_r+0x1e2>
    221e:	6829      	ldr	r1, [r5, #0]
    2220:	9b05      	ldr	r3, [sp, #20]
    2222:	2207      	movs	r2, #7
    2224:	05c9      	lsls	r1, r1, #23
    2226:	d528      	bpl.n	227a <_vfiprintf_r+0x1de>
    2228:	189b      	adds	r3, r3, r2
    222a:	4393      	bics	r3, r2
    222c:	3308      	adds	r3, #8
    222e:	9305      	str	r3, [sp, #20]
    2230:	696b      	ldr	r3, [r5, #20]
    2232:	9a03      	ldr	r2, [sp, #12]
    2234:	189b      	adds	r3, r3, r2
    2236:	616b      	str	r3, [r5, #20]
    2238:	e74f      	b.n	20da <_vfiprintf_r+0x3e>
    223a:	425b      	negs	r3, r3
    223c:	60eb      	str	r3, [r5, #12]
    223e:	2302      	movs	r3, #2
    2240:	430b      	orrs	r3, r1
    2242:	602b      	str	r3, [r5, #0]
    2244:	e7bf      	b.n	21c6 <_vfiprintf_r+0x12a>
    2246:	434b      	muls	r3, r1
    2248:	3401      	adds	r4, #1
    224a:	189b      	adds	r3, r3, r2
    224c:	2001      	movs	r0, #1
    224e:	e789      	b.n	2164 <_vfiprintf_r+0xc8>
    2250:	2301      	movs	r3, #1
    2252:	425b      	negs	r3, r3
    2254:	e7c6      	b.n	21e4 <_vfiprintf_r+0x148>
    2256:	2300      	movs	r3, #0
    2258:	0014      	movs	r4, r2
    225a:	200a      	movs	r0, #10
    225c:	001a      	movs	r2, r3
    225e:	606b      	str	r3, [r5, #4]
    2260:	7821      	ldrb	r1, [r4, #0]
    2262:	3930      	subs	r1, #48	; 0x30
    2264:	2909      	cmp	r1, #9
    2266:	d903      	bls.n	2270 <_vfiprintf_r+0x1d4>
    2268:	2b00      	cmp	r3, #0
    226a:	d0bc      	beq.n	21e6 <_vfiprintf_r+0x14a>
    226c:	9207      	str	r2, [sp, #28]
    226e:	e7ba      	b.n	21e6 <_vfiprintf_r+0x14a>
    2270:	4342      	muls	r2, r0
    2272:	3401      	adds	r4, #1
    2274:	1852      	adds	r2, r2, r1
    2276:	2301      	movs	r3, #1
    2278:	e7f2      	b.n	2260 <_vfiprintf_r+0x1c4>
    227a:	3307      	adds	r3, #7
    227c:	e7d5      	b.n	222a <_vfiprintf_r+0x18e>
    227e:	ab05      	add	r3, sp, #20
    2280:	9300      	str	r3, [sp, #0]
    2282:	003a      	movs	r2, r7
    2284:	4b12      	ldr	r3, [pc, #72]	; (22d0 <_vfiprintf_r+0x234>)
    2286:	0029      	movs	r1, r5
    2288:	0030      	movs	r0, r6
    228a:	e000      	b.n	228e <_vfiprintf_r+0x1f2>
    228c:	bf00      	nop
    228e:	9003      	str	r0, [sp, #12]
    2290:	9b03      	ldr	r3, [sp, #12]
    2292:	3301      	adds	r3, #1
    2294:	d1cc      	bne.n	2230 <_vfiprintf_r+0x194>
    2296:	89bb      	ldrh	r3, [r7, #12]
    2298:	065b      	lsls	r3, r3, #25
    229a:	d500      	bpl.n	229e <_vfiprintf_r+0x202>
    229c:	e77b      	b.n	2196 <_vfiprintf_r+0xfa>
    229e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    22a0:	e77b      	b.n	219a <_vfiprintf_r+0xfe>
    22a2:	ab05      	add	r3, sp, #20
    22a4:	9300      	str	r3, [sp, #0]
    22a6:	003a      	movs	r2, r7
    22a8:	4b09      	ldr	r3, [pc, #36]	; (22d0 <_vfiprintf_r+0x234>)
    22aa:	0029      	movs	r1, r5
    22ac:	0030      	movs	r0, r6
    22ae:	f000 f87f 	bl	23b0 <_printf_i>
    22b2:	e7ec      	b.n	228e <_vfiprintf_r+0x1f2>
    22b4:	00002a50 	.word	0x00002a50
    22b8:	00002a90 	.word	0x00002a90
    22bc:	00002a70 	.word	0x00002a70
    22c0:	00002a30 	.word	0x00002a30
    22c4:	00002a96 	.word	0x00002a96
    22c8:	00002a9a 	.word	0x00002a9a
    22cc:	00000000 	.word	0x00000000
    22d0:	00002077 	.word	0x00002077

000022d4 <_printf_common>:
    22d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    22d6:	0015      	movs	r5, r2
    22d8:	9301      	str	r3, [sp, #4]
    22da:	688a      	ldr	r2, [r1, #8]
    22dc:	690b      	ldr	r3, [r1, #16]
    22de:	9000      	str	r0, [sp, #0]
    22e0:	000c      	movs	r4, r1
    22e2:	4293      	cmp	r3, r2
    22e4:	da00      	bge.n	22e8 <_printf_common+0x14>
    22e6:	0013      	movs	r3, r2
    22e8:	0022      	movs	r2, r4
    22ea:	602b      	str	r3, [r5, #0]
    22ec:	3243      	adds	r2, #67	; 0x43
    22ee:	7812      	ldrb	r2, [r2, #0]
    22f0:	2a00      	cmp	r2, #0
    22f2:	d001      	beq.n	22f8 <_printf_common+0x24>
    22f4:	3301      	adds	r3, #1
    22f6:	602b      	str	r3, [r5, #0]
    22f8:	6823      	ldr	r3, [r4, #0]
    22fa:	069b      	lsls	r3, r3, #26
    22fc:	d502      	bpl.n	2304 <_printf_common+0x30>
    22fe:	682b      	ldr	r3, [r5, #0]
    2300:	3302      	adds	r3, #2
    2302:	602b      	str	r3, [r5, #0]
    2304:	2706      	movs	r7, #6
    2306:	6823      	ldr	r3, [r4, #0]
    2308:	401f      	ands	r7, r3
    230a:	d027      	beq.n	235c <_printf_common+0x88>
    230c:	0023      	movs	r3, r4
    230e:	3343      	adds	r3, #67	; 0x43
    2310:	781b      	ldrb	r3, [r3, #0]
    2312:	1e5a      	subs	r2, r3, #1
    2314:	4193      	sbcs	r3, r2
    2316:	6822      	ldr	r2, [r4, #0]
    2318:	0692      	lsls	r2, r2, #26
    231a:	d430      	bmi.n	237e <_printf_common+0xaa>
    231c:	0022      	movs	r2, r4
    231e:	9901      	ldr	r1, [sp, #4]
    2320:	3243      	adds	r2, #67	; 0x43
    2322:	9800      	ldr	r0, [sp, #0]
    2324:	9e08      	ldr	r6, [sp, #32]
    2326:	47b0      	blx	r6
    2328:	1c43      	adds	r3, r0, #1
    232a:	d025      	beq.n	2378 <_printf_common+0xa4>
    232c:	2306      	movs	r3, #6
    232e:	6820      	ldr	r0, [r4, #0]
    2330:	682a      	ldr	r2, [r5, #0]
    2332:	68e1      	ldr	r1, [r4, #12]
    2334:	4003      	ands	r3, r0
    2336:	2500      	movs	r5, #0
    2338:	2b04      	cmp	r3, #4
    233a:	d103      	bne.n	2344 <_printf_common+0x70>
    233c:	1a8d      	subs	r5, r1, r2
    233e:	43eb      	mvns	r3, r5
    2340:	17db      	asrs	r3, r3, #31
    2342:	401d      	ands	r5, r3
    2344:	68a3      	ldr	r3, [r4, #8]
    2346:	6922      	ldr	r2, [r4, #16]
    2348:	4293      	cmp	r3, r2
    234a:	dd01      	ble.n	2350 <_printf_common+0x7c>
    234c:	1a9b      	subs	r3, r3, r2
    234e:	18ed      	adds	r5, r5, r3
    2350:	2700      	movs	r7, #0
    2352:	42bd      	cmp	r5, r7
    2354:	d120      	bne.n	2398 <_printf_common+0xc4>
    2356:	2000      	movs	r0, #0
    2358:	e010      	b.n	237c <_printf_common+0xa8>
    235a:	3701      	adds	r7, #1
    235c:	68e3      	ldr	r3, [r4, #12]
    235e:	682a      	ldr	r2, [r5, #0]
    2360:	1a9b      	subs	r3, r3, r2
    2362:	429f      	cmp	r7, r3
    2364:	dad2      	bge.n	230c <_printf_common+0x38>
    2366:	0022      	movs	r2, r4
    2368:	2301      	movs	r3, #1
    236a:	3219      	adds	r2, #25
    236c:	9901      	ldr	r1, [sp, #4]
    236e:	9800      	ldr	r0, [sp, #0]
    2370:	9e08      	ldr	r6, [sp, #32]
    2372:	47b0      	blx	r6
    2374:	1c43      	adds	r3, r0, #1
    2376:	d1f0      	bne.n	235a <_printf_common+0x86>
    2378:	2001      	movs	r0, #1
    237a:	4240      	negs	r0, r0
    237c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    237e:	2030      	movs	r0, #48	; 0x30
    2380:	18e1      	adds	r1, r4, r3
    2382:	3143      	adds	r1, #67	; 0x43
    2384:	7008      	strb	r0, [r1, #0]
    2386:	0021      	movs	r1, r4
    2388:	1c5a      	adds	r2, r3, #1
    238a:	3145      	adds	r1, #69	; 0x45
    238c:	7809      	ldrb	r1, [r1, #0]
    238e:	18a2      	adds	r2, r4, r2
    2390:	3243      	adds	r2, #67	; 0x43
    2392:	3302      	adds	r3, #2
    2394:	7011      	strb	r1, [r2, #0]
    2396:	e7c1      	b.n	231c <_printf_common+0x48>
    2398:	0022      	movs	r2, r4
    239a:	2301      	movs	r3, #1
    239c:	321a      	adds	r2, #26
    239e:	9901      	ldr	r1, [sp, #4]
    23a0:	9800      	ldr	r0, [sp, #0]
    23a2:	9e08      	ldr	r6, [sp, #32]
    23a4:	47b0      	blx	r6
    23a6:	1c43      	adds	r3, r0, #1
    23a8:	d0e6      	beq.n	2378 <_printf_common+0xa4>
    23aa:	3701      	adds	r7, #1
    23ac:	e7d1      	b.n	2352 <_printf_common+0x7e>
	...

000023b0 <_printf_i>:
    23b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    23b2:	b08b      	sub	sp, #44	; 0x2c
    23b4:	9206      	str	r2, [sp, #24]
    23b6:	000a      	movs	r2, r1
    23b8:	3243      	adds	r2, #67	; 0x43
    23ba:	9307      	str	r3, [sp, #28]
    23bc:	9005      	str	r0, [sp, #20]
    23be:	9204      	str	r2, [sp, #16]
    23c0:	7e0a      	ldrb	r2, [r1, #24]
    23c2:	000c      	movs	r4, r1
    23c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    23c6:	2a6e      	cmp	r2, #110	; 0x6e
    23c8:	d100      	bne.n	23cc <_printf_i+0x1c>
    23ca:	e08f      	b.n	24ec <_printf_i+0x13c>
    23cc:	d817      	bhi.n	23fe <_printf_i+0x4e>
    23ce:	2a63      	cmp	r2, #99	; 0x63
    23d0:	d02c      	beq.n	242c <_printf_i+0x7c>
    23d2:	d808      	bhi.n	23e6 <_printf_i+0x36>
    23d4:	2a00      	cmp	r2, #0
    23d6:	d100      	bne.n	23da <_printf_i+0x2a>
    23d8:	e099      	b.n	250e <_printf_i+0x15e>
    23da:	2a58      	cmp	r2, #88	; 0x58
    23dc:	d054      	beq.n	2488 <_printf_i+0xd8>
    23de:	0026      	movs	r6, r4
    23e0:	3642      	adds	r6, #66	; 0x42
    23e2:	7032      	strb	r2, [r6, #0]
    23e4:	e029      	b.n	243a <_printf_i+0x8a>
    23e6:	2a64      	cmp	r2, #100	; 0x64
    23e8:	d001      	beq.n	23ee <_printf_i+0x3e>
    23ea:	2a69      	cmp	r2, #105	; 0x69
    23ec:	d1f7      	bne.n	23de <_printf_i+0x2e>
    23ee:	6821      	ldr	r1, [r4, #0]
    23f0:	681a      	ldr	r2, [r3, #0]
    23f2:	0608      	lsls	r0, r1, #24
    23f4:	d523      	bpl.n	243e <_printf_i+0x8e>
    23f6:	1d11      	adds	r1, r2, #4
    23f8:	6019      	str	r1, [r3, #0]
    23fa:	6815      	ldr	r5, [r2, #0]
    23fc:	e025      	b.n	244a <_printf_i+0x9a>
    23fe:	2a73      	cmp	r2, #115	; 0x73
    2400:	d100      	bne.n	2404 <_printf_i+0x54>
    2402:	e088      	b.n	2516 <_printf_i+0x166>
    2404:	d808      	bhi.n	2418 <_printf_i+0x68>
    2406:	2a6f      	cmp	r2, #111	; 0x6f
    2408:	d029      	beq.n	245e <_printf_i+0xae>
    240a:	2a70      	cmp	r2, #112	; 0x70
    240c:	d1e7      	bne.n	23de <_printf_i+0x2e>
    240e:	2220      	movs	r2, #32
    2410:	6809      	ldr	r1, [r1, #0]
    2412:	430a      	orrs	r2, r1
    2414:	6022      	str	r2, [r4, #0]
    2416:	e003      	b.n	2420 <_printf_i+0x70>
    2418:	2a75      	cmp	r2, #117	; 0x75
    241a:	d020      	beq.n	245e <_printf_i+0xae>
    241c:	2a78      	cmp	r2, #120	; 0x78
    241e:	d1de      	bne.n	23de <_printf_i+0x2e>
    2420:	0022      	movs	r2, r4
    2422:	2178      	movs	r1, #120	; 0x78
    2424:	3245      	adds	r2, #69	; 0x45
    2426:	7011      	strb	r1, [r2, #0]
    2428:	4a6c      	ldr	r2, [pc, #432]	; (25dc <_printf_i+0x22c>)
    242a:	e030      	b.n	248e <_printf_i+0xde>
    242c:	000e      	movs	r6, r1
    242e:	681a      	ldr	r2, [r3, #0]
    2430:	3642      	adds	r6, #66	; 0x42
    2432:	1d11      	adds	r1, r2, #4
    2434:	6019      	str	r1, [r3, #0]
    2436:	6813      	ldr	r3, [r2, #0]
    2438:	7033      	strb	r3, [r6, #0]
    243a:	2301      	movs	r3, #1
    243c:	e079      	b.n	2532 <_printf_i+0x182>
    243e:	0649      	lsls	r1, r1, #25
    2440:	d5d9      	bpl.n	23f6 <_printf_i+0x46>
    2442:	1d11      	adds	r1, r2, #4
    2444:	6019      	str	r1, [r3, #0]
    2446:	2300      	movs	r3, #0
    2448:	5ed5      	ldrsh	r5, [r2, r3]
    244a:	2d00      	cmp	r5, #0
    244c:	da03      	bge.n	2456 <_printf_i+0xa6>
    244e:	232d      	movs	r3, #45	; 0x2d
    2450:	9a04      	ldr	r2, [sp, #16]
    2452:	426d      	negs	r5, r5
    2454:	7013      	strb	r3, [r2, #0]
    2456:	4b62      	ldr	r3, [pc, #392]	; (25e0 <_printf_i+0x230>)
    2458:	270a      	movs	r7, #10
    245a:	9303      	str	r3, [sp, #12]
    245c:	e02f      	b.n	24be <_printf_i+0x10e>
    245e:	6820      	ldr	r0, [r4, #0]
    2460:	6819      	ldr	r1, [r3, #0]
    2462:	0605      	lsls	r5, r0, #24
    2464:	d503      	bpl.n	246e <_printf_i+0xbe>
    2466:	1d08      	adds	r0, r1, #4
    2468:	6018      	str	r0, [r3, #0]
    246a:	680d      	ldr	r5, [r1, #0]
    246c:	e005      	b.n	247a <_printf_i+0xca>
    246e:	0640      	lsls	r0, r0, #25
    2470:	d5f9      	bpl.n	2466 <_printf_i+0xb6>
    2472:	680d      	ldr	r5, [r1, #0]
    2474:	1d08      	adds	r0, r1, #4
    2476:	6018      	str	r0, [r3, #0]
    2478:	b2ad      	uxth	r5, r5
    247a:	4b59      	ldr	r3, [pc, #356]	; (25e0 <_printf_i+0x230>)
    247c:	2708      	movs	r7, #8
    247e:	9303      	str	r3, [sp, #12]
    2480:	2a6f      	cmp	r2, #111	; 0x6f
    2482:	d018      	beq.n	24b6 <_printf_i+0x106>
    2484:	270a      	movs	r7, #10
    2486:	e016      	b.n	24b6 <_printf_i+0x106>
    2488:	3145      	adds	r1, #69	; 0x45
    248a:	700a      	strb	r2, [r1, #0]
    248c:	4a54      	ldr	r2, [pc, #336]	; (25e0 <_printf_i+0x230>)
    248e:	9203      	str	r2, [sp, #12]
    2490:	681a      	ldr	r2, [r3, #0]
    2492:	6821      	ldr	r1, [r4, #0]
    2494:	1d10      	adds	r0, r2, #4
    2496:	6018      	str	r0, [r3, #0]
    2498:	6815      	ldr	r5, [r2, #0]
    249a:	0608      	lsls	r0, r1, #24
    249c:	d522      	bpl.n	24e4 <_printf_i+0x134>
    249e:	07cb      	lsls	r3, r1, #31
    24a0:	d502      	bpl.n	24a8 <_printf_i+0xf8>
    24a2:	2320      	movs	r3, #32
    24a4:	4319      	orrs	r1, r3
    24a6:	6021      	str	r1, [r4, #0]
    24a8:	2710      	movs	r7, #16
    24aa:	2d00      	cmp	r5, #0
    24ac:	d103      	bne.n	24b6 <_printf_i+0x106>
    24ae:	2320      	movs	r3, #32
    24b0:	6822      	ldr	r2, [r4, #0]
    24b2:	439a      	bics	r2, r3
    24b4:	6022      	str	r2, [r4, #0]
    24b6:	0023      	movs	r3, r4
    24b8:	2200      	movs	r2, #0
    24ba:	3343      	adds	r3, #67	; 0x43
    24bc:	701a      	strb	r2, [r3, #0]
    24be:	6863      	ldr	r3, [r4, #4]
    24c0:	60a3      	str	r3, [r4, #8]
    24c2:	2b00      	cmp	r3, #0
    24c4:	db5c      	blt.n	2580 <_printf_i+0x1d0>
    24c6:	2204      	movs	r2, #4
    24c8:	6821      	ldr	r1, [r4, #0]
    24ca:	4391      	bics	r1, r2
    24cc:	6021      	str	r1, [r4, #0]
    24ce:	2d00      	cmp	r5, #0
    24d0:	d158      	bne.n	2584 <_printf_i+0x1d4>
    24d2:	9e04      	ldr	r6, [sp, #16]
    24d4:	2b00      	cmp	r3, #0
    24d6:	d064      	beq.n	25a2 <_printf_i+0x1f2>
    24d8:	0026      	movs	r6, r4
    24da:	9b03      	ldr	r3, [sp, #12]
    24dc:	3642      	adds	r6, #66	; 0x42
    24de:	781b      	ldrb	r3, [r3, #0]
    24e0:	7033      	strb	r3, [r6, #0]
    24e2:	e05e      	b.n	25a2 <_printf_i+0x1f2>
    24e4:	0648      	lsls	r0, r1, #25
    24e6:	d5da      	bpl.n	249e <_printf_i+0xee>
    24e8:	b2ad      	uxth	r5, r5
    24ea:	e7d8      	b.n	249e <_printf_i+0xee>
    24ec:	6809      	ldr	r1, [r1, #0]
    24ee:	681a      	ldr	r2, [r3, #0]
    24f0:	0608      	lsls	r0, r1, #24
    24f2:	d505      	bpl.n	2500 <_printf_i+0x150>
    24f4:	1d11      	adds	r1, r2, #4
    24f6:	6019      	str	r1, [r3, #0]
    24f8:	6813      	ldr	r3, [r2, #0]
    24fa:	6962      	ldr	r2, [r4, #20]
    24fc:	601a      	str	r2, [r3, #0]
    24fe:	e006      	b.n	250e <_printf_i+0x15e>
    2500:	0649      	lsls	r1, r1, #25
    2502:	d5f7      	bpl.n	24f4 <_printf_i+0x144>
    2504:	1d11      	adds	r1, r2, #4
    2506:	6019      	str	r1, [r3, #0]
    2508:	6813      	ldr	r3, [r2, #0]
    250a:	8aa2      	ldrh	r2, [r4, #20]
    250c:	801a      	strh	r2, [r3, #0]
    250e:	2300      	movs	r3, #0
    2510:	9e04      	ldr	r6, [sp, #16]
    2512:	6123      	str	r3, [r4, #16]
    2514:	e054      	b.n	25c0 <_printf_i+0x210>
    2516:	681a      	ldr	r2, [r3, #0]
    2518:	1d11      	adds	r1, r2, #4
    251a:	6019      	str	r1, [r3, #0]
    251c:	6816      	ldr	r6, [r2, #0]
    251e:	2100      	movs	r1, #0
    2520:	6862      	ldr	r2, [r4, #4]
    2522:	0030      	movs	r0, r6
    2524:	f000 f91a 	bl	275c <memchr>
    2528:	2800      	cmp	r0, #0
    252a:	d001      	beq.n	2530 <_printf_i+0x180>
    252c:	1b80      	subs	r0, r0, r6
    252e:	6060      	str	r0, [r4, #4]
    2530:	6863      	ldr	r3, [r4, #4]
    2532:	6123      	str	r3, [r4, #16]
    2534:	2300      	movs	r3, #0
    2536:	9a04      	ldr	r2, [sp, #16]
    2538:	7013      	strb	r3, [r2, #0]
    253a:	e041      	b.n	25c0 <_printf_i+0x210>
    253c:	6923      	ldr	r3, [r4, #16]
    253e:	0032      	movs	r2, r6
    2540:	9906      	ldr	r1, [sp, #24]
    2542:	9805      	ldr	r0, [sp, #20]
    2544:	9d07      	ldr	r5, [sp, #28]
    2546:	47a8      	blx	r5
    2548:	1c43      	adds	r3, r0, #1
    254a:	d043      	beq.n	25d4 <_printf_i+0x224>
    254c:	6823      	ldr	r3, [r4, #0]
    254e:	2500      	movs	r5, #0
    2550:	079b      	lsls	r3, r3, #30
    2552:	d40f      	bmi.n	2574 <_printf_i+0x1c4>
    2554:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2556:	68e0      	ldr	r0, [r4, #12]
    2558:	4298      	cmp	r0, r3
    255a:	da3d      	bge.n	25d8 <_printf_i+0x228>
    255c:	0018      	movs	r0, r3
    255e:	e03b      	b.n	25d8 <_printf_i+0x228>
    2560:	0022      	movs	r2, r4
    2562:	2301      	movs	r3, #1
    2564:	3219      	adds	r2, #25
    2566:	9906      	ldr	r1, [sp, #24]
    2568:	9805      	ldr	r0, [sp, #20]
    256a:	9e07      	ldr	r6, [sp, #28]
    256c:	47b0      	blx	r6
    256e:	1c43      	adds	r3, r0, #1
    2570:	d030      	beq.n	25d4 <_printf_i+0x224>
    2572:	3501      	adds	r5, #1
    2574:	68e3      	ldr	r3, [r4, #12]
    2576:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2578:	1a9b      	subs	r3, r3, r2
    257a:	429d      	cmp	r5, r3
    257c:	dbf0      	blt.n	2560 <_printf_i+0x1b0>
    257e:	e7e9      	b.n	2554 <_printf_i+0x1a4>
    2580:	2d00      	cmp	r5, #0
    2582:	d0a9      	beq.n	24d8 <_printf_i+0x128>
    2584:	9e04      	ldr	r6, [sp, #16]
    2586:	0028      	movs	r0, r5
    2588:	0039      	movs	r1, r7
    258a:	f7ff f851 	bl	1630 <__aeabi_uidivmod>
    258e:	9b03      	ldr	r3, [sp, #12]
    2590:	3e01      	subs	r6, #1
    2592:	5c5b      	ldrb	r3, [r3, r1]
    2594:	0028      	movs	r0, r5
    2596:	7033      	strb	r3, [r6, #0]
    2598:	0039      	movs	r1, r7
    259a:	f7fe ffc3 	bl	1524 <__udivsi3>
    259e:	1e05      	subs	r5, r0, #0
    25a0:	d1f1      	bne.n	2586 <_printf_i+0x1d6>
    25a2:	2f08      	cmp	r7, #8
    25a4:	d109      	bne.n	25ba <_printf_i+0x20a>
    25a6:	6823      	ldr	r3, [r4, #0]
    25a8:	07db      	lsls	r3, r3, #31
    25aa:	d506      	bpl.n	25ba <_printf_i+0x20a>
    25ac:	6863      	ldr	r3, [r4, #4]
    25ae:	6922      	ldr	r2, [r4, #16]
    25b0:	4293      	cmp	r3, r2
    25b2:	dc02      	bgt.n	25ba <_printf_i+0x20a>
    25b4:	2330      	movs	r3, #48	; 0x30
    25b6:	3e01      	subs	r6, #1
    25b8:	7033      	strb	r3, [r6, #0]
    25ba:	9b04      	ldr	r3, [sp, #16]
    25bc:	1b9b      	subs	r3, r3, r6
    25be:	6123      	str	r3, [r4, #16]
    25c0:	9b07      	ldr	r3, [sp, #28]
    25c2:	aa09      	add	r2, sp, #36	; 0x24
    25c4:	9300      	str	r3, [sp, #0]
    25c6:	0021      	movs	r1, r4
    25c8:	9b06      	ldr	r3, [sp, #24]
    25ca:	9805      	ldr	r0, [sp, #20]
    25cc:	f7ff fe82 	bl	22d4 <_printf_common>
    25d0:	1c43      	adds	r3, r0, #1
    25d2:	d1b3      	bne.n	253c <_printf_i+0x18c>
    25d4:	2001      	movs	r0, #1
    25d6:	4240      	negs	r0, r0
    25d8:	b00b      	add	sp, #44	; 0x2c
    25da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25dc:	00002ab2 	.word	0x00002ab2
    25e0:	00002aa1 	.word	0x00002aa1

000025e4 <_sbrk_r>:
    25e4:	2300      	movs	r3, #0
    25e6:	b570      	push	{r4, r5, r6, lr}
    25e8:	4c06      	ldr	r4, [pc, #24]	; (2604 <_sbrk_r+0x20>)
    25ea:	0005      	movs	r5, r0
    25ec:	0008      	movs	r0, r1
    25ee:	6023      	str	r3, [r4, #0]
    25f0:	f7fe fe98 	bl	1324 <_sbrk>
    25f4:	1c43      	adds	r3, r0, #1
    25f6:	d103      	bne.n	2600 <_sbrk_r+0x1c>
    25f8:	6823      	ldr	r3, [r4, #0]
    25fa:	2b00      	cmp	r3, #0
    25fc:	d000      	beq.n	2600 <_sbrk_r+0x1c>
    25fe:	602b      	str	r3, [r5, #0]
    2600:	bd70      	pop	{r4, r5, r6, pc}
    2602:	46c0      	nop			; (mov r8, r8)
    2604:	200000d4 	.word	0x200000d4

00002608 <__sread>:
    2608:	b570      	push	{r4, r5, r6, lr}
    260a:	000c      	movs	r4, r1
    260c:	250e      	movs	r5, #14
    260e:	5f49      	ldrsh	r1, [r1, r5]
    2610:	f000 f8b2 	bl	2778 <_read_r>
    2614:	2800      	cmp	r0, #0
    2616:	db03      	blt.n	2620 <__sread+0x18>
    2618:	6d63      	ldr	r3, [r4, #84]	; 0x54
    261a:	181b      	adds	r3, r3, r0
    261c:	6563      	str	r3, [r4, #84]	; 0x54
    261e:	bd70      	pop	{r4, r5, r6, pc}
    2620:	89a3      	ldrh	r3, [r4, #12]
    2622:	4a02      	ldr	r2, [pc, #8]	; (262c <__sread+0x24>)
    2624:	4013      	ands	r3, r2
    2626:	81a3      	strh	r3, [r4, #12]
    2628:	e7f9      	b.n	261e <__sread+0x16>
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	ffffefff 	.word	0xffffefff

00002630 <__swrite>:
    2630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2632:	001f      	movs	r7, r3
    2634:	898b      	ldrh	r3, [r1, #12]
    2636:	0005      	movs	r5, r0
    2638:	000c      	movs	r4, r1
    263a:	0016      	movs	r6, r2
    263c:	05db      	lsls	r3, r3, #23
    263e:	d505      	bpl.n	264c <__swrite+0x1c>
    2640:	230e      	movs	r3, #14
    2642:	5ec9      	ldrsh	r1, [r1, r3]
    2644:	2200      	movs	r2, #0
    2646:	2302      	movs	r3, #2
    2648:	f000 f874 	bl	2734 <_lseek_r>
    264c:	89a3      	ldrh	r3, [r4, #12]
    264e:	4a05      	ldr	r2, [pc, #20]	; (2664 <__swrite+0x34>)
    2650:	0028      	movs	r0, r5
    2652:	4013      	ands	r3, r2
    2654:	81a3      	strh	r3, [r4, #12]
    2656:	0032      	movs	r2, r6
    2658:	230e      	movs	r3, #14
    265a:	5ee1      	ldrsh	r1, [r4, r3]
    265c:	003b      	movs	r3, r7
    265e:	f000 f81f 	bl	26a0 <_write_r>
    2662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2664:	ffffefff 	.word	0xffffefff

00002668 <__sseek>:
    2668:	b570      	push	{r4, r5, r6, lr}
    266a:	000c      	movs	r4, r1
    266c:	250e      	movs	r5, #14
    266e:	5f49      	ldrsh	r1, [r1, r5]
    2670:	f000 f860 	bl	2734 <_lseek_r>
    2674:	89a3      	ldrh	r3, [r4, #12]
    2676:	1c42      	adds	r2, r0, #1
    2678:	d103      	bne.n	2682 <__sseek+0x1a>
    267a:	4a05      	ldr	r2, [pc, #20]	; (2690 <__sseek+0x28>)
    267c:	4013      	ands	r3, r2
    267e:	81a3      	strh	r3, [r4, #12]
    2680:	bd70      	pop	{r4, r5, r6, pc}
    2682:	2280      	movs	r2, #128	; 0x80
    2684:	0152      	lsls	r2, r2, #5
    2686:	4313      	orrs	r3, r2
    2688:	81a3      	strh	r3, [r4, #12]
    268a:	6560      	str	r0, [r4, #84]	; 0x54
    268c:	e7f8      	b.n	2680 <__sseek+0x18>
    268e:	46c0      	nop			; (mov r8, r8)
    2690:	ffffefff 	.word	0xffffefff

00002694 <__sclose>:
    2694:	b510      	push	{r4, lr}
    2696:	230e      	movs	r3, #14
    2698:	5ec9      	ldrsh	r1, [r1, r3]
    269a:	f000 f815 	bl	26c8 <_close_r>
    269e:	bd10      	pop	{r4, pc}

000026a0 <_write_r>:
    26a0:	b570      	push	{r4, r5, r6, lr}
    26a2:	0005      	movs	r5, r0
    26a4:	0008      	movs	r0, r1
    26a6:	0011      	movs	r1, r2
    26a8:	2200      	movs	r2, #0
    26aa:	4c06      	ldr	r4, [pc, #24]	; (26c4 <_write_r+0x24>)
    26ac:	6022      	str	r2, [r4, #0]
    26ae:	001a      	movs	r2, r3
    26b0:	f7fd ffec 	bl	68c <_write>
    26b4:	1c43      	adds	r3, r0, #1
    26b6:	d103      	bne.n	26c0 <_write_r+0x20>
    26b8:	6823      	ldr	r3, [r4, #0]
    26ba:	2b00      	cmp	r3, #0
    26bc:	d000      	beq.n	26c0 <_write_r+0x20>
    26be:	602b      	str	r3, [r5, #0]
    26c0:	bd70      	pop	{r4, r5, r6, pc}
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	200000d4 	.word	0x200000d4

000026c8 <_close_r>:
    26c8:	2300      	movs	r3, #0
    26ca:	b570      	push	{r4, r5, r6, lr}
    26cc:	4c06      	ldr	r4, [pc, #24]	; (26e8 <_close_r+0x20>)
    26ce:	0005      	movs	r5, r0
    26d0:	0008      	movs	r0, r1
    26d2:	6023      	str	r3, [r4, #0]
    26d4:	f7fe fe38 	bl	1348 <_close>
    26d8:	1c43      	adds	r3, r0, #1
    26da:	d103      	bne.n	26e4 <_close_r+0x1c>
    26dc:	6823      	ldr	r3, [r4, #0]
    26de:	2b00      	cmp	r3, #0
    26e0:	d000      	beq.n	26e4 <_close_r+0x1c>
    26e2:	602b      	str	r3, [r5, #0]
    26e4:	bd70      	pop	{r4, r5, r6, pc}
    26e6:	46c0      	nop			; (mov r8, r8)
    26e8:	200000d4 	.word	0x200000d4

000026ec <_fstat_r>:
    26ec:	2300      	movs	r3, #0
    26ee:	b570      	push	{r4, r5, r6, lr}
    26f0:	4c06      	ldr	r4, [pc, #24]	; (270c <_fstat_r+0x20>)
    26f2:	0005      	movs	r5, r0
    26f4:	0008      	movs	r0, r1
    26f6:	0011      	movs	r1, r2
    26f8:	6023      	str	r3, [r4, #0]
    26fa:	f7fe fe28 	bl	134e <_fstat>
    26fe:	1c43      	adds	r3, r0, #1
    2700:	d103      	bne.n	270a <_fstat_r+0x1e>
    2702:	6823      	ldr	r3, [r4, #0]
    2704:	2b00      	cmp	r3, #0
    2706:	d000      	beq.n	270a <_fstat_r+0x1e>
    2708:	602b      	str	r3, [r5, #0]
    270a:	bd70      	pop	{r4, r5, r6, pc}
    270c:	200000d4 	.word	0x200000d4

00002710 <_isatty_r>:
    2710:	2300      	movs	r3, #0
    2712:	b570      	push	{r4, r5, r6, lr}
    2714:	4c06      	ldr	r4, [pc, #24]	; (2730 <_isatty_r+0x20>)
    2716:	0005      	movs	r5, r0
    2718:	0008      	movs	r0, r1
    271a:	6023      	str	r3, [r4, #0]
    271c:	f7fe fe1c 	bl	1358 <_isatty>
    2720:	1c43      	adds	r3, r0, #1
    2722:	d103      	bne.n	272c <_isatty_r+0x1c>
    2724:	6823      	ldr	r3, [r4, #0]
    2726:	2b00      	cmp	r3, #0
    2728:	d000      	beq.n	272c <_isatty_r+0x1c>
    272a:	602b      	str	r3, [r5, #0]
    272c:	bd70      	pop	{r4, r5, r6, pc}
    272e:	46c0      	nop			; (mov r8, r8)
    2730:	200000d4 	.word	0x200000d4

00002734 <_lseek_r>:
    2734:	b570      	push	{r4, r5, r6, lr}
    2736:	0005      	movs	r5, r0
    2738:	0008      	movs	r0, r1
    273a:	0011      	movs	r1, r2
    273c:	2200      	movs	r2, #0
    273e:	4c06      	ldr	r4, [pc, #24]	; (2758 <_lseek_r+0x24>)
    2740:	6022      	str	r2, [r4, #0]
    2742:	001a      	movs	r2, r3
    2744:	f7fe fe0a 	bl	135c <_lseek>
    2748:	1c43      	adds	r3, r0, #1
    274a:	d103      	bne.n	2754 <_lseek_r+0x20>
    274c:	6823      	ldr	r3, [r4, #0]
    274e:	2b00      	cmp	r3, #0
    2750:	d000      	beq.n	2754 <_lseek_r+0x20>
    2752:	602b      	str	r3, [r5, #0]
    2754:	bd70      	pop	{r4, r5, r6, pc}
    2756:	46c0      	nop			; (mov r8, r8)
    2758:	200000d4 	.word	0x200000d4

0000275c <memchr>:
    275c:	b2c9      	uxtb	r1, r1
    275e:	1882      	adds	r2, r0, r2
    2760:	4290      	cmp	r0, r2
    2762:	d101      	bne.n	2768 <memchr+0xc>
    2764:	2000      	movs	r0, #0
    2766:	4770      	bx	lr
    2768:	7803      	ldrb	r3, [r0, #0]
    276a:	428b      	cmp	r3, r1
    276c:	d0fb      	beq.n	2766 <memchr+0xa>
    276e:	3001      	adds	r0, #1
    2770:	e7f6      	b.n	2760 <memchr+0x4>

00002772 <__malloc_lock>:
    2772:	4770      	bx	lr

00002774 <__malloc_unlock>:
    2774:	4770      	bx	lr
	...

00002778 <_read_r>:
    2778:	b570      	push	{r4, r5, r6, lr}
    277a:	0005      	movs	r5, r0
    277c:	0008      	movs	r0, r1
    277e:	0011      	movs	r1, r2
    2780:	2200      	movs	r2, #0
    2782:	4c06      	ldr	r4, [pc, #24]	; (279c <_read_r+0x24>)
    2784:	6022      	str	r2, [r4, #0]
    2786:	001a      	movs	r2, r3
    2788:	f7fd ff5e 	bl	648 <_read>
    278c:	1c43      	adds	r3, r0, #1
    278e:	d103      	bne.n	2798 <_read_r+0x20>
    2790:	6823      	ldr	r3, [r4, #0]
    2792:	2b00      	cmp	r3, #0
    2794:	d000      	beq.n	2798 <_read_r+0x20>
    2796:	602b      	str	r3, [r5, #0]
    2798:	bd70      	pop	{r4, r5, r6, pc}
    279a:	46c0      	nop			; (mov r8, r8)
    279c:	200000d4 	.word	0x200000d4
    27a0:	00000224 	.word	0x00000224
    27a4:	00000224 	.word	0x00000224
    27a8:	00000200 	.word	0x00000200
    27ac:	00000224 	.word	0x00000224
    27b0:	00000200 	.word	0x00000200
    27b4:	000001e6 	.word	0x000001e6
    27b8:	000001e6 	.word	0x000001e6
    27bc:	00000224 	.word	0x00000224
    27c0:	00000224 	.word	0x00000224
    27c4:	00000224 	.word	0x00000224
    27c8:	00000224 	.word	0x00000224
    27cc:	00000224 	.word	0x00000224
    27d0:	00000224 	.word	0x00000224
    27d4:	00000224 	.word	0x00000224
    27d8:	00000224 	.word	0x00000224
    27dc:	00000224 	.word	0x00000224
    27e0:	00000224 	.word	0x00000224
    27e4:	00000224 	.word	0x00000224
    27e8:	00000224 	.word	0x00000224
    27ec:	00000224 	.word	0x00000224
    27f0:	00000224 	.word	0x00000224
    27f4:	00000224 	.word	0x00000224
    27f8:	00000224 	.word	0x00000224
    27fc:	00000224 	.word	0x00000224
    2800:	00000224 	.word	0x00000224
    2804:	00000224 	.word	0x00000224
    2808:	00000224 	.word	0x00000224
    280c:	00000224 	.word	0x00000224
    2810:	00000224 	.word	0x00000224
    2814:	00000224 	.word	0x00000224
    2818:	00000224 	.word	0x00000224
    281c:	00000224 	.word	0x00000224
    2820:	00000224 	.word	0x00000224
    2824:	00000224 	.word	0x00000224
    2828:	00000224 	.word	0x00000224
    282c:	00000224 	.word	0x00000224
    2830:	00000224 	.word	0x00000224
    2834:	00000224 	.word	0x00000224
    2838:	00000224 	.word	0x00000224
    283c:	00000224 	.word	0x00000224
    2840:	00000224 	.word	0x00000224
    2844:	00000224 	.word	0x00000224
    2848:	00000224 	.word	0x00000224
    284c:	00000224 	.word	0x00000224
    2850:	00000224 	.word	0x00000224
    2854:	00000224 	.word	0x00000224
    2858:	00000224 	.word	0x00000224
    285c:	00000224 	.word	0x00000224
    2860:	00000224 	.word	0x00000224
    2864:	00000224 	.word	0x00000224
    2868:	00000224 	.word	0x00000224
    286c:	00000224 	.word	0x00000224
    2870:	00000224 	.word	0x00000224
    2874:	00000224 	.word	0x00000224
    2878:	00000224 	.word	0x00000224
    287c:	00000224 	.word	0x00000224
    2880:	00000224 	.word	0x00000224
    2884:	00000224 	.word	0x00000224
    2888:	00000224 	.word	0x00000224
    288c:	00000224 	.word	0x00000224
    2890:	00000224 	.word	0x00000224
    2894:	00000224 	.word	0x00000224
    2898:	00000224 	.word	0x00000224
    289c:	00000224 	.word	0x00000224
    28a0:	00000200 	.word	0x00000200
    28a4:	00000200 	.word	0x00000200
    28a8:	00000208 	.word	0x00000208
    28ac:	00000208 	.word	0x00000208
    28b0:	00000208 	.word	0x00000208
    28b4:	00000208 	.word	0x00000208
    28b8:	42000800 	.word	0x42000800
    28bc:	42000c00 	.word	0x42000c00
    28c0:	42001000 	.word	0x42001000
    28c4:	42001400 	.word	0x42001400
    28c8:	00000cb2 	.word	0x00000cb2
    28cc:	00000cae 	.word	0x00000cae
    28d0:	00000cae 	.word	0x00000cae
    28d4:	00000d10 	.word	0x00000d10
    28d8:	00000d10 	.word	0x00000d10
    28dc:	00000cc6 	.word	0x00000cc6
    28e0:	00000cb8 	.word	0x00000cb8
    28e4:	00000ccc 	.word	0x00000ccc
    28e8:	00000cfe 	.word	0x00000cfe
    28ec:	00000d98 	.word	0x00000d98
    28f0:	00000d78 	.word	0x00000d78
    28f4:	00000d78 	.word	0x00000d78
    28f8:	00000e04 	.word	0x00000e04
    28fc:	00000d8a 	.word	0x00000d8a
    2900:	00000da6 	.word	0x00000da6
    2904:	00000d7c 	.word	0x00000d7c
    2908:	00000db4 	.word	0x00000db4
    290c:	00000df4 	.word	0x00000df4
    2910:	72617473 	.word	0x72617473
    2914:	6f622d74 	.word	0x6f622d74
    2918:	6f6c746f 	.word	0x6f6c746f
    291c:	72656461 	.word	0x72656461
    2920:	2d2d2d2d 	.word	0x2d2d2d2d
    2924:	2d2d2d2d 	.word	0x2d2d2d2d
    2928:	000d2d2d 	.word	0x000d2d2d
    292c:	72617473 	.word	0x72617473
    2930:	65732d74 	.word	0x65732d74
    2934:	642d646e 	.word	0x642d646e
    2938:	2d617461 	.word	0x2d617461
    293c:	2d2d2d2d 	.word	0x2d2d2d2d
    2940:	2d2d2d2d 	.word	0x2d2d2d2d
    2944:	00000d2d 	.word	0x00000d2d
    2948:	2d2d2d2d 	.word	0x2d2d2d2d
    294c:	2d2d2d2d 	.word	0x2d2d2d2d
    2950:	6470752d 	.word	0x6470752d
    2954:	20617461 	.word	0x20617461
    2958:	2d646e65 	.word	0x2d646e65
    295c:	2d2d2d2d 	.word	0x2d2d2d2d
    2960:	2d2d2d2d 	.word	0x2d2d2d2d
    2964:	000d2d2d 	.word	0x000d2d2d
    2968:	72617473 	.word	0x72617473
    296c:	72772d74 	.word	0x72772d74
    2970:	2d657469 	.word	0x2d657469
    2974:	61746164 	.word	0x61746164
    2978:	2d2d2d2d 	.word	0x2d2d2d2d
    297c:	2d2d2d2d 	.word	0x2d2d2d2d
    2980:	000d2d2d 	.word	0x000d2d2d
    2984:	2d2d2d2d 	.word	0x2d2d2d2d
    2988:	2d2d2d2d 	.word	0x2d2d2d2d
    298c:	2d2d2d2d 	.word	0x2d2d2d2d
    2990:	2d2d2d2d 	.word	0x2d2d2d2d
    2994:	2d2d2d2d 	.word	0x2d2d2d2d
    2998:	2d2d2d2d 	.word	0x2d2d2d2d
    299c:	000d2d2d 	.word	0x000d2d2d
    29a0:	746e6f63 	.word	0x746e6f63
    29a4:	65756e69 	.word	0x65756e69
    29a8:	6e65732d 	.word	0x6e65732d
    29ac:	61642d64 	.word	0x61642d64
    29b0:	2d2d6174 	.word	0x2d2d6174
    29b4:	2d2d2d2d 	.word	0x2d2d2d2d
    29b8:	2d2d2d2d 	.word	0x2d2d2d2d
    29bc:	0000000d 	.word	0x0000000d
    29c0:	72617473 	.word	0x72617473
    29c4:	72652074 	.word	0x72652074
    29c8:	2e657361 	.word	0x2e657361
    29cc:	2e2e2e2e 	.word	0x2e2e2e2e
    29d0:	0000000d 	.word	0x0000000d
    29d4:	73617265 	.word	0x73617265
    29d8:	6e652065 	.word	0x6e652065
    29dc:	2e2e2e64 	.word	0x2e2e2e64
    29e0:	000d2e2e 	.word	0x000d2e2e
    29e4:	72617473 	.word	0x72617473
    29e8:	72772074 	.word	0x72772074
    29ec:	2e657469 	.word	0x2e657469
    29f0:	2e2e2e2e 	.word	0x2e2e2e2e
    29f4:	0000000d 	.word	0x0000000d
    29f8:	74697277 	.word	0x74697277
    29fc:	64252065 	.word	0x64252065
    2a00:	2e2e2e2e 	.word	0x2e2e2e2e
    2a04:	000a0d2e 	.word	0x000a0d2e
    2a08:	74697277 	.word	0x74697277
    2a0c:	64252065 	.word	0x64252065
    2a10:	646e6520 	.word	0x646e6520
    2a14:	2e2e2e2e 	.word	0x2e2e2e2e
    2a18:	000a0d2e 	.word	0x000a0d2e
    2a1c:	74697277 	.word	0x74697277
    2a20:	6e652065 	.word	0x6e652065
    2a24:	2e2e2e64 	.word	0x2e2e2e64
    2a28:	000d2e2e 	.word	0x000d2e2e

00002a2c <_global_impure_ptr>:
    2a2c:	20000008                                ... 

00002a30 <__sf_fake_stderr>:
	...

00002a50 <__sf_fake_stdin>:
	...

00002a70 <__sf_fake_stdout>:
	...
    2a90:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2aa0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2ab0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2ac0:	00006665                                ef..

00002ac4 <_init>:
    2ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ac6:	46c0      	nop			; (mov r8, r8)
    2ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2aca:	bc08      	pop	{r3}
    2acc:	469e      	mov	lr, r3
    2ace:	4770      	bx	lr

00002ad0 <__init_array_start>:
    2ad0:	000000dd 	.word	0x000000dd

00002ad4 <_fini>:
    2ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ad6:	46c0      	nop			; (mov r8, r8)
    2ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2ada:	bc08      	pop	{r3}
    2adc:	469e      	mov	lr, r3
    2ade:	4770      	bx	lr

00002ae0 <__fini_array_start>:
    2ae0:	000000b5 	.word	0x000000b5
